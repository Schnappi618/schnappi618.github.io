[{"title":"MySQL慢查询SQL触发阈值邮件报警","url":"/2020/08/10/DB/MySQL%E6%85%A2%E6%9F%A5%E8%AF%A2SQL%E8%A7%A6%E5%8F%91%E9%98%88%E5%80%BC%E9%82%AE%E4%BB%B6%E6%8A%A5%E8%AD%A6/","content":"<p>这个只是我作为数据库和开发小白自己的一个解决思路，如果有更恰当的思路，欢迎评论或私聊呀～</p>\n<h2 id=\"一、项目背景\"><a href=\"#一、项目背景\" class=\"headerlink\" title=\"一、项目背景\"></a>一、项目背景</h2><p>业务数据库被异常调用时导致慢查询量增大，影响到正常业务使用，业务只能通过nginx超时异常等来进行问题排查，增大了定位和处理问题的难度、时间，尤其商品库或者交易库可能会出现页面无法正常显示的情况。故业务需求为若主库和从库慢查询总量每分钟超过某个阈值之后则发送邮件报警。</p>\n<h2 id=\"二、开发逻辑问题及处理\"><a href=\"#二、开发逻辑问题及处理\" class=\"headerlink\" title=\"二、开发逻辑问题及处理\"></a>二、开发逻辑问题及处理</h2><h3 id=\"1、问题梳理\"><a href=\"#1、问题梳理\" class=\"headerlink\" title=\"1、问题梳理\"></a>1、问题梳理</h3><ol>\n<li>由于主库和从库在不同主机上，故不能开启pt-kill的<code>--log-dsn</code>参数将pt-kill结果写入数据库中，否则会出现主从数据不一致，从而导致主从异常中断</li>\n<li>pt-kill在哪台主机上执行，如果pt-kill在主库、从库本身机器上执行，会将文件写入到本地，pt-kill效率的确最高，但后续如何将文件汇总到一起；而且最终需要将日志文件作为附件发送邮件，线上机器无法到外网，所以还需要分别将文件传输到中控机等可以访问外网的机器上</li>\n<li>对应数据库的主库、从库可能会由于实例均衡发生变动，若直接在对应主机上启动pt-kill，会出现异常情况，并且还需要代码变动</li>\n<li>pt-kill日志文件时间问题，本次需求为超过1分钟的数量触发到阈值之后发送邮件报警，若所有pt-kill结果都放入一个文件，这个文件会越来越大，不仅处理时间会越来越长，而且获取1分钟内的记录计算数量可能会存在漏掉或重复计算的情况</li>\n<li>邮件内容如何发送，虽使用附件将pt-kill日志发送，但仍需要将统计内容作为邮件正文</li>\n</ol>\n<h3 id=\"2、问题处理\"><a href=\"#2、问题处理\" class=\"headerlink\" title=\"2、问题处理\"></a>2、问题处理</h3><ol>\n<li>直接在中控机上执行对应的pt-kill命令</li>\n<li>使用pt-kill的<code>--log</code>参数直接将kill掉的记录写入到本地文件中</li>\n<li>使用多进程每一分钟启动对应的pt-kill进程，并写入到对应文件中，日志文件命名为<code>角色_端口_主机区分_时间戳_slow.log</code>。例如：主库某个时间的文件名为：<code>m_3306_733_20200810114116_slow.log</code>，表示端口为3306的主库，在主机后两位为733上2020年8月10日11时41分16秒生成的kill日志文件</li>\n<li>pt-kill进程结束后使用子进程grep对应文件来获取慢SQL数量，并记录下来</li>\n<li>由于为1min便有新的日志文件生成，时间久了之后数据量会特别大，还需要一个定时任务去清除日志文件。这里直接使用了crontab清除每10分钟清除30min之前的日志文件</li>\n<li>邮件正文通过html写为表格，详细慢查询SQL直接通过附件发送</li>\n</ol>\n<h2 id=\"三、逻辑流程梳理\"><a href=\"#三、逻辑流程梳理\" class=\"headerlink\" title=\"三、逻辑流程梳理\"></a>三、逻辑流程梳理</h2><ol>\n<li>持续使用percona提供的pt-kill工具kill对应数据库集群(主库+从库)的超过2s的慢查询并记录到日志文件中<ol>\n<li>在管理库上获取对应集群的主库和从库主机名等信息</li>\n<li>使用合适的pt-kill参数将每分钟kill掉的慢SQL记录到文件中</li>\n</ol>\n</li>\n<li>获取主库和从库总共kill的慢SQL数量<ol>\n<li>获取每个主库和从库日志文件所记录的kill慢SQL数量</li>\n<li>获取所有主机被kill的慢SQL总数</li>\n</ol>\n</li>\n<li>如果超过设定的阈值，则发送邮件报警<ol>\n<li>判断是否超过设置阈值</li>\n<li>超过则发送邮件报警</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"四、主要功能代码\"><a href=\"#四、主要功能代码\" class=\"headerlink\" title=\"四、主要功能代码\"></a>四、主要功能代码</h2><p><strong>由于markdown粘贴代码，缩进可能有部分问题，复制粘贴后需注意一下，并且这里取消了log模块，可将需要内容打印到使用的log中去</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 公共函数</span></span><br><span class=\"line\"><span class=\"comment\">## 1. 获取数据库连接</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> create_engine</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">adminMySQLConn</span><span class=\"params\">(User,Pass,Host,Port,DBName)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            adminConn=<span class=\"string\">\"mysql+pymysql://&#123;&#125;:&#123;&#125;@&#123;&#125;:&#123;&#125;/&#123;&#125;?charset=utf8mb4\"</span>.\\</span><br><span class=\"line\">                    format(User,Pass,Host,Port,DBName)</span><br><span class=\"line\">            adminEngine = create_engine(adminConn)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> adminEngine</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err:</span><br><span class=\"line\">            self.log.error(<span class=\"string\">\"adminMySQLConn: &#123;&#125;\"</span>.format(err))</span><br><span class=\"line\">            <span class=\"comment\">#self.log.error(\"adminMySQLConn: &#123;&#125;\".format(err.message))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 2. 获取当前时间戳</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initCurrentDateTime</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> datetime.now().strftime(<span class=\"string\">'%Y%m%d%H%M%S'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err:</span><br><span class=\"line\">            self.log.error(<span class=\"string\">\"initCurrentDateTime: &#123;&#125;\"</span>.format(err.message))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 3. 远程/本地执行linux命令(在本地执行可以直接使用os.system或subprocess.getstatusoutput，但由于这里是个公共函数，其他程序可能需要远程执行，故这里统一使用paramiko执行)</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> paramiko <span class=\"keyword\">import</span> SSHClient, AutoAddPolicy</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">executeSSH</span><span class=\"params\">(ip, cmds)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            client = SSHClient()</span><br><span class=\"line\">            client.set_missing_host_key_policy(AutoAddPolicy())</span><br><span class=\"line\">            system(<span class=\"string\">'kinit -kt /etc/krb5.keytab'</span>)</span><br><span class=\"line\">            client.connect(ip, look_for_keys=<span class=\"literal\">False</span>, gss_auth=<span class=\"literal\">True</span>, gss_kex=<span class=\"literal\">True</span>)</span><br><span class=\"line\">            stdin, stdout, stderr = client.exec_command(cmds)</span><br><span class=\"line\">            <span class=\"comment\"># result = stdout.readlines()       # 获取命令执行结果,返回的数据是一个list</span></span><br><span class=\"line\">            _result = stdout.read().decode()  <span class=\"comment\"># 命令执行结果</span></span><br><span class=\"line\">            _status = stdout.channel.recv_exit_status()  <span class=\"comment\"># 命令执行状态码</span></span><br><span class=\"line\">            client.close()</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _status, _result</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            <span class=\"comment\"># print(e)</span></span><br><span class=\"line\">            <span class=\"keyword\">raise</span> e</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1、获取初始化信息\"><a href=\"#1、获取初始化信息\" class=\"headerlink\" title=\"1、获取初始化信息\"></a>1、获取初始化信息</h3><p>由于这里存在一个管理库，上面有所有数据库的信息，则通过pymysql去查看并获取对应信息即可。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 输入信息，即GetHost中的info</span></span><br><span class=\"line\">Inputinfo = &#123;<span class=\"string\">\"rsPort\"</span>: <span class=\"number\">3306</span><span class=\"string\">'&#125;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># tb_mysql_instance为管理表，其中：rsPort为端口，rsHost为对应数据库所在主机，rsRole为数据库角色：master主库，slave从库</span></span><br><span class=\"line\">SQLlist = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"getHost\"</span>: <span class=\"string\">\"select rsHost, rsPort, rsRole from tb_mysql_instance where rsPort = &#123;&#125; and rsRole in ('master', 'slave');\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">GetHost</span><span class=\"params\">(**info)</span>:</span></span><br><span class=\"line\">    port = info[<span class=\"string\">'rsPort'</span>]</span><br><span class=\"line\">    insInfoList = []</span><br><span class=\"line\">    adminConn = adminMySQLConn()</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        executeSQL = SQLlist[<span class=\"string\">'getHost'</span>].format(port)</span><br><span class=\"line\">        insList = adminConn.execute(executeSQL).fetchall()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> insList:</span><br><span class=\"line\">            datetime = initCurrentDateTime()</span><br><span class=\"line\">            <span class=\"keyword\">for</span> insInfo <span class=\"keyword\">in</span> insList:</span><br><span class=\"line\">                infoDict = dict(zip(insInfo.keys(), insInfo.values()))</span><br><span class=\"line\">                <span class=\"keyword\">if</span> infoDict[<span class=\"string\">'rsRole'</span>] == <span class=\"string\">'master'</span>:</span><br><span class=\"line\">                    infoDict[<span class=\"string\">'logFile'</span>] = <span class=\"string\">\"m_&#123;&#125;_&#123;&#125;_&#123;&#125;_slow.log\"</span>.format(infoDict[<span class=\"string\">'rsPort'</span>],<span class=\"string\">''</span>.join(infoDict[<span class=\"string\">'rsHost'</span>].split(<span class=\"string\">'.'</span>)[<span class=\"number\">2</span>:]) , datetime)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    infoDict[<span class=\"string\">'logFile'</span>] = <span class=\"string\">\"s_&#123;&#125;_&#123;&#125;_&#123;&#125;_slow.log\"</span>.format(infoDict[<span class=\"string\">'rsPort'</span>],<span class=\"string\">''</span>.join(infoDict[<span class=\"string\">'rsHost'</span>].split(<span class=\"string\">'.'</span>)[<span class=\"number\">2</span>:]) , datetime)</span><br><span class=\"line\">                infoDict[<span class=\"string\">'ptkillLogFile'</span>] = <span class=\"string\">\"./SlowLog/&#123;&#125;\"</span>.format(infoDict[<span class=\"string\">'logFile'</span>])</span><br><span class=\"line\">                insInfoList.append(infoDict)</span><br><span class=\"line\">            msg = <span class=\"string\">\"Get &#123;&#125; pt-kill master and slave host info success.\"</span>.format(port)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span>, insInfoList</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            msg = <span class=\"string\">\"Get &#123;&#125; pt-kill master and slave host info failed. SQL:&#123;&#125; insList: \"</span>.format(port, executeSQL), insList</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span>, msg</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err:</span><br><span class=\"line\">        msg = <span class=\"string\">\"Get &#123;&#125; pt-kill master and slave host info err: \"</span>.format(port), err</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span>, msg</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 输出结果示例：</span></span><br><span class=\"line\">[&#123;<span class=\"string\">'rsHost'</span>: <span class=\"string\">'1.1.1.1'</span>, <span class=\"string\">'rsPort'</span>: <span class=\"number\">3306</span>, <span class=\"string\">'rsRole'</span>: <span class=\"string\">'master'</span>, <span class=\"string\">'logFile'</span>: <span class=\"string\">'m_3306_11_20200810084828_slow.log'</span>, <span class=\"string\">'ptkillLogFile'</span>: <span class=\"string\">'/path/SlowLog/m_3306_11_20200810084828_slow.log'</span>&#125;, &#123;<span class=\"string\">'rsHost'</span>: <span class=\"string\">'2.2.2.2'</span>, <span class=\"string\">'rsPort'</span>: <span class=\"number\">3306</span>, <span class=\"string\">'rsRole'</span>: <span class=\"string\">'slave'</span>, <span class=\"string\">'logFile'</span>: <span class=\"string\">'s_3306_22_20200810084828_slow.log'</span>, <span class=\"string\">'ptkillLogFile'</span>: <span class=\"string\">'/path/SlowLog/s_3306_22_20200810084828_slow.log'</span>&#125;, &#123;<span class=\"string\">'rsHost'</span>: <span class=\"string\">'3.3.3.3'</span>, <span class=\"string\">'rsPort'</span>: <span class=\"number\">3306</span>, <span class=\"string\">'rsRole'</span>: <span class=\"string\">'slave'</span>, <span class=\"string\">'logFile'</span>: <span class=\"string\">'s_3306_33_20200810084828_slow.log'</span>, <span class=\"string\">'ptkillLogFile'</span>: <span class=\"string\">'/path/SlowLog/s_3306_33_20200810084828_slow.log'</span>&#125;]</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、执行pt-kill并获取慢SQL数量\"><a href=\"#2、执行pt-kill并获取慢SQL数量\" class=\"headerlink\" title=\"2、执行pt-kill并获取慢SQL数量\"></a>2、执行pt-kill并获取慢SQL数量</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 后面的info都一直表示获取初始化信息后的里面的字典格式</span></span><br><span class=\"line\"><span class=\"comment\"># 例如：&#123;'rsHost': '1.1.1.1', 'rsPort': 3306, 'rsRole': 'master', 'logFile': 'm_3306_11_20200810084828_slow.log', 'ptkillLogFile': '/path/SlowLog/m_3306_11_20200810084828_slow.log'&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 子函数</span></span><br><span class=\"line\"><span class=\"comment\">## 执行pt-kill命令，pt-kill一次只执行60s</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ExecutePtkillCmd</span><span class=\"params\">(**info)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        ptkillCmd = <span class=\"string\">\"/opt/soft/percona-toolkit-2.2.14/bin/pt-kill --no-version-check \"</span> \\</span><br><span class=\"line\">                    <span class=\"string\">\"--host &#123;rsHost&#125; --port &#123;rsPort&#125; --user 'dba' --password '5d63f33c10b8f430'\"</span> \\</span><br><span class=\"line\">                    <span class=\"string\">\" --busy-time 2 --match-state='Sending data|Sorting result' --victim all \"</span> \\</span><br><span class=\"line\">                    <span class=\"string\">\"--interval 1 --run-time 60 --daemonize  --kill --print --log=&#123;ptkillLogFile&#125;\"</span>.format(**info)</span><br><span class=\"line\">        status, ret = executeSSH(<span class=\"string\">'10.148.16.25'</span>, ptkillCmd)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> status == <span class=\"number\">0</span>:</span><br><span class=\"line\">            msg = <span class=\"string\">\"Execute &#123;rsHost&#125;:&#123;rsPort&#125; pt-kill command success.\"</span>.format(**info)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span>, msg</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            msg = <span class=\"string\">\"Execute &#123;rsHost&#125;:&#123;rsPort&#125; pt-kill command failed, Cmd:\"</span>.format(**info), ptkillCmd</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span>, msg</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err:</span><br><span class=\"line\">        msg = <span class=\"string\">\"Execute &#123;rsHost&#125;:&#123;rsPort&#125; pt-kill command error.\"</span>.format(**info), err</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span>, msg</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 获取慢SQL数量，并写入info中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">GetFileRegixCount</span><span class=\"params\">(**info)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        logPwd = info[<span class=\"string\">'ptkillLogFile'</span>]</span><br><span class=\"line\">        process = Popen([<span class=\"string\">'grep'</span>, <span class=\"string\">'^# [0-9]\\&#123;4\\&#125;-[0-9]\\&#123;2\\&#125;-[0-9]\\&#123;2\\&#125;'</span>, logPwd], stdout=PIPE)</span><br><span class=\"line\">        info[<span class=\"string\">'slowSQLCount'</span>] = len((process.stdout).readlines())</span><br><span class=\"line\">        msg = <span class=\"string\">\"Get &#123;rsHost&#125;:&#123;rsPort&#125; slow log count success.\"</span>.format(**info)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span>, info</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err:</span><br><span class=\"line\">        msg = <span class=\"string\">\"Get &#123;rsHost&#125;:&#123;rsPort&#125; slow log count err:\"</span>.format(**info), err</span><br><span class=\"line\">        log.error(msg)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span>, msg</span><br><span class=\"line\"><span class=\"comment\">### 输出info格式类似为：</span></span><br><span class=\"line\">&#123;<span class=\"string\">'rsHost'</span>: <span class=\"string\">'1.1.1.1'</span>, <span class=\"string\">'rsPort'</span>: <span class=\"number\">3306</span>, <span class=\"string\">'rsRole'</span>: <span class=\"string\">'master'</span>, <span class=\"string\">'logFile'</span>: <span class=\"string\">'m_3306_11_20200810084828_slow.log'</span>, <span class=\"string\">'ptkillLogFile'</span>: <span class=\"string\">'/path/SlowLog/m_3306_11_20200810084828_slow.log'</span>, <span class=\"string\">'slowSQLCount'</span>: <span class=\"number\">0</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 每60s触发一次pt-kill的执行</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> sleep</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">killSlowSql</span><span class=\"params\">(info)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        status, msg = ExecutePtkillCmd(**info)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> status <span class=\"keyword\">is</span> <span class=\"literal\">False</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> status, msg</span><br><span class=\"line\">        sleep(<span class=\"number\">60</span>) </span><br><span class=\"line\">        <span class=\"keyword\">return</span> GetFileRegixCount(**info)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err:</span><br><span class=\"line\">        msg = <span class=\"string\">\"kill &#123;rsHost&#125;:&#123;rsPort&#125; &#123;ptkillLogFile&#125; err:\"</span>.format(**info), err</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span>, msg</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 多进程执行pt-kill</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Pool</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">(*HostInfoList)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        pool = Pool(<span class=\"number\">8</span>)</span><br><span class=\"line\">        res_l = []</span><br><span class=\"line\">        infoList = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> info <span class=\"keyword\">in</span> HostInfoList:</span><br><span class=\"line\">            base = pool.apply_async(killSlowSql, (info, ))</span><br><span class=\"line\">            res_l.append(base)</span><br><span class=\"line\">        pool.close()</span><br><span class=\"line\">        pool.join()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> res <span class=\"keyword\">in</span> res_l:</span><br><span class=\"line\">            ret = res.get()</span><br><span class=\"line\">            infoList.append(ret[<span class=\"number\">1</span>])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span>, infoList</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span>, err</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、邮件正文html表格\"><a href=\"#3、邮件正文html表格\" class=\"headerlink\" title=\"3、邮件正文html表格\"></a>3、邮件正文html表格</h3><p>由于python自带html表格样式有些许丑，所以参考<a href=\"https://blog.csdn.net/u012111465/article/details/82713561\" target=\"_blank\" rel=\"noopener\">这个小姐姐的表格前端页面</a>来进行了修改。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\">head = \\</span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        &lt;head&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;meta charset=\"utf-8\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;STYLE TYPE=\"text/css\" MEDIA=screen&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">                table.dataframe &#123;</span></span><br><span class=\"line\"><span class=\"string\">                    border-collapse: collapse;</span></span><br><span class=\"line\"><span class=\"string\">                    border: 2px solid #a19da2;</span></span><br><span class=\"line\"><span class=\"string\">                    /*居中显示整个表格*/</span></span><br><span class=\"line\"><span class=\"string\">                    margin: auto;</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">                table.dataframe thead &#123;</span></span><br><span class=\"line\"><span class=\"string\">                    border: 2px solid #91c6e1;</span></span><br><span class=\"line\"><span class=\"string\">                    background: #f1f1f1;</span></span><br><span class=\"line\"><span class=\"string\">                    padding: 10px 10px 10px 10px;</span></span><br><span class=\"line\"><span class=\"string\">                    color: #333333;</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">                table.dataframe tbody &#123;</span></span><br><span class=\"line\"><span class=\"string\">                    border: 2px solid #91c6e1;</span></span><br><span class=\"line\"><span class=\"string\">                    padding: 10px 10px 10px 10px;</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">                table.dataframe tr &#123;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">                table.dataframe th &#123;</span></span><br><span class=\"line\"><span class=\"string\">                    vertical-align: top;</span></span><br><span class=\"line\"><span class=\"string\">                    font-size: 14px;</span></span><br><span class=\"line\"><span class=\"string\">                    padding: 10px 10px 10px 10px;</span></span><br><span class=\"line\"><span class=\"string\">                    color: #105de3;</span></span><br><span class=\"line\"><span class=\"string\">                    font-family: arial;</span></span><br><span class=\"line\"><span class=\"string\">                    text-align: center;</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">                table.dataframe td &#123;</span></span><br><span class=\"line\"><span class=\"string\">                    text-align: center;</span></span><br><span class=\"line\"><span class=\"string\">                    padding: 10px 10px 10px 10px;</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">                body &#123;</span></span><br><span class=\"line\"><span class=\"string\">                    font-family: 宋体;</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">                h1 &#123;</span></span><br><span class=\"line\"><span class=\"string\">                    color: #5db446</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">                div.header h2 &#123;</span></span><br><span class=\"line\"><span class=\"string\">                    color: #0002e3;</span></span><br><span class=\"line\"><span class=\"string\">                    font-family: 黑体;</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">                div.content h2 &#123;</span></span><br><span class=\"line\"><span class=\"string\">                    text-align: center;</span></span><br><span class=\"line\"><span class=\"string\">                    font-size: 28px;</span></span><br><span class=\"line\"><span class=\"string\">                    text-shadow: 2px 2px 1px #de4040;</span></span><br><span class=\"line\"><span class=\"string\">                    color: #fff;</span></span><br><span class=\"line\"><span class=\"string\">                    font-weight: bold;</span></span><br><span class=\"line\"><span class=\"string\">                    background-color: #008eb7;</span></span><br><span class=\"line\"><span class=\"string\">                    line-height: 1.5;</span></span><br><span class=\"line\"><span class=\"string\">                    margin: 20px 0;</span></span><br><span class=\"line\"><span class=\"string\">                    box-shadow: 10px 10px 5px #888888;</span></span><br><span class=\"line\"><span class=\"string\">                    border-radius: 5px;</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">                h3 &#123;</span></span><br><span class=\"line\"><span class=\"string\">                    font-size: 22px;</span></span><br><span class=\"line\"><span class=\"string\">                    background-color: rgba(0, 2, 227, 0.71);</span></span><br><span class=\"line\"><span class=\"string\">                    text-shadow: 2px 2px 1px #de4040;</span></span><br><span class=\"line\"><span class=\"string\">                    color: rgba(239, 241, 234, 0.99);</span></span><br><span class=\"line\"><span class=\"string\">                    line-height: 1.5;</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">                h4 &#123;</span></span><br><span class=\"line\"><span class=\"string\">                    color: #e10092;</span></span><br><span class=\"line\"><span class=\"string\">                    font-family: 楷体;</span></span><br><span class=\"line\"><span class=\"string\">                    font-size: 20px;</span></span><br><span class=\"line\"><span class=\"string\">                    text-align: center;</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">                td img &#123;</span></span><br><span class=\"line\"><span class=\"string\">                    /*width: 60px;*/</span></span><br><span class=\"line\"><span class=\"string\">                    max-width: 300px;</span></span><br><span class=\"line\"><span class=\"string\">                    max-height: 300px;</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">            &lt;/STYLE&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 转换为表格需要的输入</span></span><br><span class=\"line\"><span class=\"comment\">## 输入格式类似为result=[[1,2,3],['a','b','c']], title=['id', 'name']</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">convert_to_html</span><span class=\"params\">(result,title)</span>:</span></span><br><span class=\"line\">    d = &#123;&#125;</span><br><span class=\"line\">    index = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> title:</span><br><span class=\"line\">        d[t] = result[index]</span><br><span class=\"line\">        index +=<span class=\"number\">1</span></span><br><span class=\"line\">    df = pd.DataFrame(d)</span><br><span class=\"line\">    <span class=\"comment\">#如数据过长，可能在表格中无法显示，加上pd.set_option语句可以避免这一情况</span></span><br><span class=\"line\">    pd.set_option(<span class=\"string\">'max_colwidth'</span>,<span class=\"number\">200</span>)</span><br><span class=\"line\">    pd.set_option(<span class=\"string\">'colheader_justify'</span>, <span class=\"string\">'center'</span>)</span><br><span class=\"line\">    df = df [title]</span><br><span class=\"line\">    <span class=\"comment\">#h =df.to_html(index=False)</span></span><br><span class=\"line\">    h =df.to_html(col_space=<span class=\"number\">30</span>,border=<span class=\"number\">1</span>,justify=<span class=\"string\">'center'</span>)</span><br><span class=\"line\">    h2 = h.replace(<span class=\"string\">'class'</span>, <span class=\"string\">'cellspacing=\\\"0\\\" class'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> h2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 初始化表格</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">formatHtmlTable</span><span class=\"params\">(result, title)</span>:</span></span><br><span class=\"line\">    df_html = convert_to_html(result,title)</span><br><span class=\"line\">    body = \\</span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        &lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        &lt;div align=\"center\" class=\"header\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;!--标题部分的信息--&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;h1 align=\"center\"&gt;慢查询SQL邮件报警&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"string\">            详情请查看附件</span></span><br><span class=\"line\"><span class=\"string\">&lt;!--            &lt;h2 align=\"center\"&gt;具体SQL详情请查看附件&lt;/h2&gt; --&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        &lt;div class=\"content\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;!--正文内容--&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;h2&gt; &lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">            &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;h4&gt;&lt;/h4&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &#123;df_html&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">            &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">            &lt;p style=\"text-align: center\"&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">            &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span>.format(df_html=df_html)</span><br><span class=\"line\">    html_msg = <span class=\"string\">\"&lt;html&gt;\"</span> + head + body + <span class=\"string\">\"&lt;/html&gt;\"</span></span><br><span class=\"line\">    html_msg = html_msg.replace(<span class=\"string\">'\\n'</span>,<span class=\"string\">''</span>).encode(<span class=\"string\">\"utf-8\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> html_msg</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、邮件发送\"><a href=\"#4、邮件发送\" class=\"headerlink\" title=\"4、邮件发送\"></a>4、邮件发送</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> smtplib</span><br><span class=\"line\"><span class=\"keyword\">from</span> email.mime.text <span class=\"keyword\">import</span> MIMEText</span><br><span class=\"line\"><span class=\"keyword\">from</span> email.header <span class=\"keyword\">import</span> Header</span><br><span class=\"line\"><span class=\"keyword\">from</span> email.mime.multipart <span class=\"keyword\">import</span> MIMEMultipart</span><br><span class=\"line\"><span class=\"comment\">## 发送邮件，username和password为发送人邮箱的用户名和密码。注意密码为smtp的授权码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sendMail</span><span class=\"params\">(sender, receivers, message)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        username = <span class=\"string\">''''''</span><span class=\"string\">'xxxx@qq.com'</span></span><br><span class=\"line\">        password = <span class=\"string\">'xxxxxx</span></span><br><span class=\"line\"><span class=\"string\">        smtp = smtplib.SMTP(host='</span>xxxx.qq.com<span class=\"string\">', port=25)</span></span><br><span class=\"line\"><span class=\"string\">        smtp.login(username, password)</span></span><br><span class=\"line\"><span class=\"string\">        rdict = smtp.sendmail(sender, receivers, message.as_string())</span></span><br><span class=\"line\"><span class=\"string\">        smtp.quit()</span></span><br><span class=\"line\"><span class=\"string\">        msg = \"send mail success\"</span></span><br><span class=\"line\"><span class=\"string\">        return True, msg</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    except smtplib.SMTPException:</span></span><br><span class=\"line\"><span class=\"string\">        msg = \"send mail failed\"</span></span><br><span class=\"line\"><span class=\"string\">        return False, msg</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">## 发送报警</span></span><br><span class=\"line\"><span class=\"string\">def sendMailAlert(*infoList):</span></span><br><span class=\"line\"><span class=\"string\">    sender ='</span>xxx@qq.com<span class=\"string\">'        # 发送人邮箱</span></span><br><span class=\"line\"><span class=\"string\">    receivers = ['</span>yy@<span class=\"number\">163.</span>com<span class=\"string\">']  # 接收人邮箱列表，可写多个</span></span><br><span class=\"line\"><span class=\"string\">    message = MIMEMultipart()</span></span><br><span class=\"line\"><span class=\"string\">    message['</span>From<span class=\"string\">'] = Header(\"lichunliang\", '</span>utf<span class=\"number\">-8</span><span class=\"string\">')  # 发送者别名</span></span><br><span class=\"line\"><span class=\"string\">    message['</span>To<span class=\"string\">'] = Header(\"business_rds\", '</span>utf<span class=\"number\">-8</span><span class=\"string\">')  # 接收者别名</span></span><br><span class=\"line\"><span class=\"string\">    subject = '</span>慢查询邮件告警测试<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">    message['</span>Subject<span class=\"string\">'] = Header(subject, '</span>utf<span class=\"number\">-8</span><span class=\"string\">')</span></span><br><span class=\"line\"><span class=\"string\">#    message.attach(MIMEText(mail_msg1, '</span>plain<span class=\"string\">', '</span>utf<span class=\"number\">-8</span><span class=\"string\">'))</span></span><br><span class=\"line\"><span class=\"string\">    sumCount = 0</span></span><br><span class=\"line\"><span class=\"string\">    for info in infoList:</span></span><br><span class=\"line\"><span class=\"string\">        sumCount += info[\"slowSQLCount\"]</span></span><br><span class=\"line\"><span class=\"string\">    if sumCount &gt; 5:</span></span><br><span class=\"line\"><span class=\"string\">        retList = []</span></span><br><span class=\"line\"><span class=\"string\">        title = ['</span>rsPort<span class=\"string\">', '</span>rsRole<span class=\"string\">', '</span>logFile<span class=\"string\">', '</span>slowSQLCount<span class=\"string\">']</span></span><br><span class=\"line\"><span class=\"string\">        for t in title:</span></span><br><span class=\"line\"><span class=\"string\">            ret = []</span></span><br><span class=\"line\"><span class=\"string\">            [ret.append(info[t]) for info in infoList]</span></span><br><span class=\"line\"><span class=\"string\">            retList.append(ret)</span></span><br><span class=\"line\"><span class=\"string\">        for info in infoList:</span></span><br><span class=\"line\"><span class=\"string\">            ## 发送附件</span></span><br><span class=\"line\"><span class=\"string\">            att1 = MIMEText(open(info['</span>ptkillLogFile<span class=\"string\">'], '</span>r<span class=\"string\">b').read(), '</span>base64<span class=\"string\">', '</span>utf<span class=\"number\">-8</span><span class=\"string\">')</span></span><br><span class=\"line\"><span class=\"string\">            att1[\"Content-Type\"] = '</span>application/octet-stream<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">            att1[\"Content-Disposition\"] = '</span>attachment; filename=&#123;&#125;<span class=\"string\">'.format(info['</span>ptkillLogFile<span class=\"string\">'].split('</span>/<span class=\"string\">')[-1])</span></span><br><span class=\"line\"><span class=\"string\">            message.attach(att1)</span></span><br><span class=\"line\"><span class=\"string\">        html_msg = formatHtmlTable(retList,title)</span></span><br><span class=\"line\"><span class=\"string\">        message.attach(MIMEText(html_msg, '</span>html<span class=\"string\">', '</span>utf<span class=\"number\">-8</span><span class=\"string\">'))</span></span><br><span class=\"line\"><span class=\"string\">        return sendMail(sender, receivers, message)</span></span><br><span class=\"line\"><span class=\"string\">    else:</span></span><br><span class=\"line\"><span class=\"string\">        log.info('</span>Dont need sendmail.<span class=\"string\">')</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"五、邮件报警效果\"><a href=\"#五、邮件报警效果\" class=\"headerlink\" title=\"五、邮件报警效果\"></a>五、邮件报警效果</h2><img src=\"/2020/08/10/DB/MySQL%E6%85%A2%E6%9F%A5%E8%AF%A2SQL%E8%A7%A6%E5%8F%91%E9%98%88%E5%80%BC%E9%82%AE%E4%BB%B6%E6%8A%A5%E8%AD%A6/alert1.png\" style=\"zoom:67%;\">","categories":["MySQL"],"tags":["MySQL"]},{"title":"MySQL使用tokuDB引擎无法备份问题排查","url":"/2020/08/06/DB/MySQL%E4%BD%BF%E7%94%A8tokuDB%E5%BC%95%E6%93%8E%E6%97%A0%E6%B3%95%E5%A4%87%E4%BB%BD%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/","content":"<h2 id=\"一、问题背景\"><a href=\"#一、问题背景\" class=\"headerlink\" title=\"一、问题背景\"></a>一、问题背景</h2><p>​    之前线上和线下测试环境数据库仅允许为MyISAM和InnoDB引擎存在，但本次数据迁移中存在tokuDB引擎的库，一直使用percona提供的xtrabackup每天进行数据备份，innobackup自动恢复数据。但由于该情况并不支持tokuDB引擎的备份，故本次数据迁移生成的十几个集群备份全部无效，后面决定使用mydumper来进行备份恢复。</p>\n<h2 id=\"二、备份方案及问题处理\"><a href=\"#二、备份方案及问题处理\" class=\"headerlink\" title=\"二、备份方案及问题处理\"></a>二、备份方案及问题处理</h2><h3 id=\"1、备份恢复流程\"><a href=\"#1、备份恢复流程\" class=\"headerlink\" title=\"1、备份恢复流程\"></a>1、备份恢复流程</h3><p>​    使用mydumper+myloader来进行tokuDB引擎库的备份恢复，简易备份恢复流程如下：</p>\n<ol>\n<li><p>使用mydumper备份：<code>mydumper -h x.x.x.x -P port -u root -p xxxx -t 16 -e -c -o /path/to/backup</code></p>\n<p>使用16个线程对某主机上某个端口的数据库来进行压缩备份，备份到目录’/path/to/backup’中</p>\n</li>\n<li><p>创建一个和备份库同版本的数据库</p>\n</li>\n<li><p>使用myloader恢复：<code>myloader --user root --password xxxxxxxx --port 3487 --host 127.0.0.1 -C --directory /path/to/backupDataPath/data --threads 8 --verbose 3 &gt; load.log 2&gt;&amp;1</code></p>\n<p>由于备份时进行了压缩，故恢复时需要用-C参数来进行解压，并输出恢复日志load.log</p>\n</li>\n<li><p>创建主从关系：主从信息位于备份目录下的data/metadata文件中，文件内容大致如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 如果想让恢复库为备份主机的从库，则用metadata中show master status中的信息创建主从关系，此时master_host为备份机IP；</span></span><br><span class=\"line\"><span class=\"comment\">## 若需要恢复库和备份机为同一个主库，则使用metadata中show slave status的信息创建主从关系即可。</span></span><br><span class=\"line\">Started dump at: 2020-08-03 02:37:02</span><br><span class=\"line\">SHOW MASTER STATUS:</span><br><span class=\"line\">        Log: mysql-bin.000671</span><br><span class=\"line\">        Pos: 16910</span><br><span class=\"line\">        GTID:</span><br><span class=\"line\"></span><br><span class=\"line\">SHOW SLAVE STATUS:</span><br><span class=\"line\">        Host: x.x.x.x</span><br><span class=\"line\">        Log: mysql-bin.000668</span><br><span class=\"line\">        Pos: 51101690</span><br><span class=\"line\">        GTID:</span><br><span class=\"line\"></span><br><span class=\"line\">Finished dump at: 2020-08-03 04:05:38</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 登陆数据库，执行</span></span><br><span class=\"line\">change master to = <span class=\"string\">'x.x.x.x'</span>,</span><br><span class=\"line\"> master_port=xxxx, </span><br><span class=\"line\"> master_user=<span class=\"string\">'xx'</span></span><br><span class=\"line\"> master_password=<span class=\"string\">'xxxxxxxxxx'</span>,</span><br><span class=\"line\"> master_log_file=<span class=\"string\">'mysql-bin.xxxxx'</span>,</span><br><span class=\"line\"> mysql_log_pos=xxxxxxxxxx;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 开启主从同步</span></span><br><span class=\"line\">start slave;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"2、问题处理\"><a href=\"#2、问题处理\" class=\"headerlink\" title=\"2、问题处理\"></a>2、问题处理</h3><h4 id=\"1-开启主从时出现1062报错\"><a href=\"#1-开启主从时出现1062报错\" class=\"headerlink\" title=\"1. 开启主从时出现1062报错\"></a>1. 开启主从时出现1062报错</h4><p><strong>1. 报错信息</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@(none))&gt;show slave status\\G</span><br><span class=\"line\">*************************** 1. row ***************************</span><br><span class=\"line\">               Slave_IO_State: Waiting for master to send event</span><br><span class=\"line\">                  Master_Host: x.x.x.x</span><br><span class=\"line\">                  Master_User: xx</span><br><span class=\"line\">                  Master_Port: 3487</span><br><span class=\"line\">                Connect_Retry: 60</span><br><span class=\"line\">              Master_Log_File: mysql-bin.000783</span><br><span class=\"line\">          Read_Master_Log_Pos: 360153174</span><br><span class=\"line\">               Relay_Log_File: relay-log.000002</span><br><span class=\"line\">                Relay_Log_Pos: 283</span><br><span class=\"line\">        Relay_Master_Log_File: mysql-bin.000668</span><br><span class=\"line\">             Slave_IO_Running: Yes</span><br><span class=\"line\">            Slave_SQL_Running: No</span><br><span class=\"line\">              Replicate_Do_DB: </span><br><span class=\"line\">          Replicate_Ignore_DB: </span><br><span class=\"line\">           Replicate_Do_Table: </span><br><span class=\"line\">       Replicate_Ignore_Table: </span><br><span class=\"line\">      Replicate_Wild_Do_Table: </span><br><span class=\"line\">  Replicate_Wild_Ignore_Table: </span><br><span class=\"line\">                   Last_Errno: 1062</span><br><span class=\"line\">                   Last_Error: Error 'Duplicate entry '426922153' for key 'PRIMARY'' on query.</span><br></pre></td></tr></table></figure>\n\n<p><strong>2. 问题原因</strong></p>\n<p>本次出现该问题是由于在备份过程中原数据库有数据写入，导致数据冲突。故使用备份数据进行恢复时出现’Duplicate entry’报错。在网上查找解决方法时发现其他人出现这个问题是由于两个库有相同表名、相同表结构的表同时进行恢复，这个还未进行测试验证。</p>\n<p><strong>3. 解决方法</strong></p>\n<p>mydumper备份时添加<code>--lock-all-tables</code>参数，即强制在备份开始时开启<code>flush table with read lock;</code>，则在备份时该库无法写入数据，所有的更新操作都会被阻塞，从而强制获得一致性备份数据。由于所有备份都是在从库执行，所以写入阻塞没有很大影响，但数据量较大时会导致主从延迟出现。如果主库备份数据，还是使用mysqldump来进行备份比较稳妥。后面可以考虑用mysqlpump来实现所有备份操作。</p>\n<p>开启备份库的全日制可以看到，在备份开始时开启了FTWRL，备份完成后释放。</p>\n<p><img src=\"/2020/08/06/DB/MySQL%E4%BD%BF%E7%94%A8tokuDB%E5%BC%95%E6%93%8E%E6%97%A0%E6%B3%95%E5%A4%87%E4%BB%BD%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/1.png\"></p>\n","categories":["MySQL"],"tags":["MySQL","tokuDB"]},{"title":"ClickHouse存储引擎之ReplacingMergeTree引擎","url":"/2020/07/28/clickhouse/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/ClickHouse%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B9%8BReplacingMergeTree%E5%BC%95%E6%93%8E/","content":"<h2 id=\"一、ReplacingMergeTree作用\"><a href=\"#一、ReplacingMergeTree作用\" class=\"headerlink\" title=\"一、ReplacingMergeTree作用\"></a>一、ReplacingMergeTree作用</h2><p>​    ClickHouse中最常用也是最基础的表引擎为MergeTree，在它的功能基础上添加特定功能就构成了MergeTree系列引擎。MergeTree支持主键，但主键主要用来缩小查询范围，且不具备唯一性约束，可以正常写入相同主键的数据。但在一些情况下，可能需要表中没有主键重复的数据。ReplacingMergeTree就是在MergeTree的基础上加入了去重的功能，但它仅会在合并分区时，去删除重复的数据，写入相同数据时并不会引发异常。</p>\n<h2 id=\"二、功能示例\"><a href=\"#二、功能示例\" class=\"headerlink\" title=\"二、功能示例\"></a>二、功能示例</h2><p>创建一张ReplacingMergeTree的表和创建MergeTree类似，修改引擎即可。ReplacingMergeTree引擎创建规范为：<code>ENGINE = ReplacingMergeTree([ver])</code>，其中ver为选填参数，它需要指定一个UInt8/UInt16、Date或DateTime类型的字段，它决定了数据去重时所用的算法，如果没有设置该参数，合并时保留分组内的最后一条数据；如果指定了该参数，则保留ver字段取值最大的那一行。</p>\n<h3 id=\"1、不指定ver参数\"><a href=\"#1、不指定ver参数\" class=\"headerlink\" title=\"1、不指定ver参数\"></a>1、不指定ver参数</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建未指定ver参数ReplacintMergeTree引擎的表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> replac_merge_test</span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"string\">`id`</span> <span class=\"keyword\">String</span>, </span><br><span class=\"line\">    <span class=\"string\">`code`</span> <span class=\"keyword\">String</span>, </span><br><span class=\"line\">    <span class=\"string\">`create_time`</span> DateTime</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">ENGINE</span> = ReplacingMergeTree()</span><br><span class=\"line\"><span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> toYYYYMM(create_time)</span><br><span class=\"line\">PRIMARY <span class=\"keyword\">KEY</span> <span class=\"keyword\">id</span></span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> (<span class=\"keyword\">id</span>, code)</span><br></pre></td></tr></table></figure>\n\n<p><strong>ReplacingMergeTree会根据ORDER BY所声明的表达式去重</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 在上述表中插入数据</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> replac_merge_test <span class=\"keyword\">values</span> (<span class=\"string\">'A000'</span>, <span class=\"string\">'code1'</span>, <span class=\"keyword\">now</span>()),(<span class=\"string\">'A000'</span>, <span class=\"string\">'code1'</span>, <span class=\"string\">'2020-07-28 21:30:00'</span>), (<span class=\"string\">'A001'</span>, <span class=\"string\">'code1'</span>, <span class=\"keyword\">now</span>()), (<span class=\"string\">'A001'</span>, <span class=\"string\">'code2'</span>, <span class=\"string\">'2020-07-28 21:30:00'</span>), (<span class=\"string\">'A0002'</span>, <span class=\"string\">'code2'</span>, <span class=\"keyword\">now</span>());</span><br><span class=\"line\"><span class=\"comment\">-- 查询当前数据</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> replac_merge_test;</span><br><span class=\"line\">┌─id────┬─code──┬─────────create_time─┐</span><br><span class=\"line\">│ A000  │ code1 │ 2020-07-28 21:23:48 │</span><br><span class=\"line\">│ A000  │ code1 │ 2020-07-28 21:30:00 │</span><br><span class=\"line\">│ A0002 │ code2 │ 2020-07-28 21:23:48 │</span><br><span class=\"line\">│ A001  │ code1 │ 2020-07-28 21:23:48 │</span><br><span class=\"line\">│ A001  │ code2 │ 2020-07-28 21:30:00 │</span><br><span class=\"line\">└───────┴───────┴─────────────────────┘</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 强制进行分区合并</span></span><br><span class=\"line\"><span class=\"keyword\">optimize</span> <span class=\"keyword\">table</span> replac_merge_test <span class=\"keyword\">FINAL</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 再次查询数据</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> replac_merge_test;</span><br><span class=\"line\">┌─id────┬─code──┬─────────create_time─┐</span><br><span class=\"line\">│ A000  │ code1 │ 2020-07-28 21:30:00 │</span><br><span class=\"line\">│ A0002 │ code2 │ 2020-07-28 21:23:48 │</span><br><span class=\"line\">│ A001  │ code1 │ 2020-07-28 21:23:48 │</span><br><span class=\"line\">│ A001  │ code2 │ 2020-07-28 21:30:00 │</span><br><span class=\"line\">└───────┴───────┴─────────────────────┘</span><br></pre></td></tr></table></figure>\n\n<p>通过上面示例可以看到，id、code相同的字段’A000’,’code1’被去重剩余一条数据，由于创建表时没有设置ver参数，故保留分组内的最后一条数据(create_time字段)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 再次使用insert插入一条数据</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> replac_merge_test <span class=\"keyword\">values</span> (<span class=\"string\">'A001'</span>, <span class=\"string\">'code1'</span>, <span class=\"string\">'2020-07-28 21:30:00'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询表中数据</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> replac_merge_test;</span><br><span class=\"line\">┌─id────┬─code──┬─────────create_time─┐</span><br><span class=\"line\">│ A000  │ code1 │ 2020-07-28 21:30:00 │</span><br><span class=\"line\">│ A0002 │ code2 │ 2020-07-28 21:23:48 │</span><br><span class=\"line\">│ A001  │ code1 │ 2020-07-28 21:23:48 │</span><br><span class=\"line\">│ A001  │ code2 │ 2020-07-28 21:30:00 │</span><br><span class=\"line\">└───────┴───────┴─────────────────────┘</span><br><span class=\"line\">┌─id───┬─code──┬─────────create_time─┐</span><br><span class=\"line\">│ A001 │ code1 │ 2020-07-28 21:30:00 │</span><br><span class=\"line\">└──────┴───────┴─────────────────────┘</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，再次插入重复数据时，查询仍然会存在重复。在ClickHouse中，默认一条insert插入的数据为同一个数据分区，不同insert插入的数据为不同的分区，所以ReplacingMergeTree是以分区为单位进行去重的，也就是说只有在相同的数据分区内，重复数据才可以被删除掉。只有数据合并完成后，才可以使用引擎特性进行去重。</p>\n<h3 id=\"2、指定ver参数\"><a href=\"#2、指定ver参数\" class=\"headerlink\" title=\"2、指定ver参数\"></a>2、指定ver参数</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建指定ver参数ReplacingMergeTree引擎的表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> replac_merge_ver_test</span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"string\">`id`</span> <span class=\"keyword\">String</span>, </span><br><span class=\"line\">    <span class=\"string\">`code`</span> <span class=\"keyword\">String</span>, </span><br><span class=\"line\">    <span class=\"string\">`create_time`</span> DateTime</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">ENGINE</span> = ReplacingMergeTree(create_time)</span><br><span class=\"line\"><span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> toYYYYMM(create_time)</span><br><span class=\"line\">PRIMARY <span class=\"keyword\">KEY</span> <span class=\"keyword\">id</span></span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> (<span class=\"keyword\">id</span>, code)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 插入测试数据</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> replac_merge_ver_test <span class=\"keyword\">values</span>(<span class=\"string\">'A000'</span>, <span class=\"string\">'code1'</span>, <span class=\"string\">'2020-07-10 21:35:30'</span>),(<span class=\"string\">'A000'</span>, <span class=\"string\">'code1'</span>, <span class=\"string\">'2020-07-15 21:35:30'</span>),(<span class=\"string\">'A000'</span>, <span class=\"string\">'code1'</span>, <span class=\"string\">'2020-07-05 21:35:30'</span>),(<span class=\"string\">'A000'</span>, <span class=\"string\">'code1'</span>, <span class=\"string\">'2020-06-05 21:35:30'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询数据</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> replac_merge_ver_test;</span><br><span class=\"line\">┌─id───┬─code──┬─────────create_time─┐</span><br><span class=\"line\">│ A000 │ code1 │ 2020-06-05 21:35:30 │</span><br><span class=\"line\">└──────┴───────┴─────────────────────┘</span><br><span class=\"line\">┌─id───┬─code──┬─────────create_time─┐</span><br><span class=\"line\">│ A000 │ code1 │ 2020-07-10 21:35:30 │</span><br><span class=\"line\">│ A000 │ code1 │ 2020-07-15 21:35:30 │</span><br><span class=\"line\">│ A000 │ code1 │ 2020-07-05 21:35:30 │</span><br><span class=\"line\">└──────┴───────┴─────────────────────┘</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 强制进行分区合并</span></span><br><span class=\"line\"><span class=\"keyword\">optimize</span> <span class=\"keyword\">table</span> replac_merge_ver_test <span class=\"keyword\">FINAL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询数据</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> replac_merge_ver_test;</span><br><span class=\"line\">┌─id───┬─code──┬─────────create_time─┐</span><br><span class=\"line\">│ A000 │ code1 │ 2020-07-15 21:35:30 │</span><br><span class=\"line\">└──────┴───────┴─────────────────────┘</span><br><span class=\"line\">┌─id───┬─code──┬─────────create_time─┐</span><br><span class=\"line\">│ A000 │ code1 │ 2020-06-05 21:35:30 │</span><br><span class=\"line\">└──────┴───────┴─────────────────────┘</span><br></pre></td></tr></table></figure>\n\n<p>由于上述创建表是以create_time的年月来进行分区的，可以看出不同的数据分区，ReplacingMergeTree并不会进行去重，并且在相同数据分区内，指定ver参数后，会保留同一组数据内create_time时间最大的那一行数据。</p>\n<h2 id=\"三、ReplacingMergeTree引擎总结\"><a href=\"#三、ReplacingMergeTree引擎总结\" class=\"headerlink\" title=\"三、ReplacingMergeTree引擎总结\"></a>三、ReplacingMergeTree引擎总结</h2><ul>\n<li>使用ORDER BY排序键，作为判断数据是否重复的唯一键</li>\n<li>只有在合并分区时，才会触发数据的去重逻辑</li>\n<li>删除重复数据，是以数据分区为单位。同一个数据分区的重复数据才会被删除，不同数据分区的重复数据仍会保留</li>\n<li>在进行数据去重时，由于已经基于ORDER BY排序，所以可以找到相邻的重复数据</li>\n<li>数据去重策略为：<ul>\n<li>若指定了ver参数，则会保留重复数据中，ver字段最大的那一行</li>\n<li>若未指定ver参数，则会保留重复数据中最末的那一行数据</li>\n</ul>\n</li>\n</ul>\n","categories":["clickhouse"],"tags":["clickhouse","engine","MergeTree"]},{"title":"ClickHouse存储引擎之MergeTree引擎——数据TTL","url":"/2020/07/26/clickhouse/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/ClickHouse%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B9%8BMergeTree%E5%BC%95%E6%93%8E%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AETTL/","content":"<h2 id=\"一、数据TTL\"><a href=\"#一、数据TTL\" class=\"headerlink\" title=\"一、数据TTL\"></a>一、数据TTL</h2><p>​    TTL(Time to Live)，表示数据的存活时间。在MergeTree中，可以为某个列字段或整张表设置TTL时间。若为列字段的TTL，当时间到期时，则会删除这一列的数据；若为表级别的TTL，当时间到期时，则会删除整张表的数据；若一张表同时设置了列级别和表级别的TTL，则会以先到期的为主。</p>\n<p>​    无论是列级别还是表级别的TTL，都需要依托于某个DateTime或Date类型的字段，通过对这个时间字段的INTERVAL操作，来描述TTL的过期时间，设置TTL过期时间的INTERVAL完整操作包括：SECOND、MINUTE、HOUR、DAY、WEEK、MONTH、QUARTER和YEAR。例如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 表示数据存活时间为，time_col时间的三天内</span></span><br><span class=\"line\">TTL time_col + INTERVAL 3 DAY</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 表示数据存活时间为，time_col一月内</span></span><br><span class=\"line\">TTL time_col + INTERVAL 1 MONTH</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、列级别TTL\"><a href=\"#二、列级别TTL\" class=\"headerlink\" title=\"二、列级别TTL\"></a>二、列级别TTL</h2><p>​    若设置了列级别的TTL，当列字段中的值过期时，ClickHouse会将他们替换成默认值。如果一个分区内，某一列的所有值都已过期，那么ClickHouse会从文件系统中删除这个分区目录下的列文件。</p>\n<p>​    如果想要设置列级别的TTL，需要在定义表字段的时候，为列声明TTL表达式，主键字段不能被声明成TTL。示例数据如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建有TTL列的表结构</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> ttl_table_t1</span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"string\">`id`</span> <span class=\"keyword\">String</span>, </span><br><span class=\"line\">    <span class=\"string\">`create_time`</span> DateTime, </span><br><span class=\"line\">    <span class=\"string\">`code`</span> <span class=\"keyword\">String</span> TTL create_time + toIntervalSecond(<span class=\"number\">10</span>), </span><br><span class=\"line\">    <span class=\"string\">`type`</span> UInt8 TTL create_time + toIntervalSecond(<span class=\"number\">10</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">ENGINE</span> = MergeTree</span><br><span class=\"line\"><span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> toYYYYMM(create_time)</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> <span class=\"keyword\">id</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 可以看到，create_time为日期类型，列字段code和type都被设置了TTL时间，他们存活时间，都为create_time建立后向后10s</span></span><br><span class=\"line\"><span class=\"comment\">-- 写入测试数据</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> ttl_table_t1 <span class=\"keyword\">VALUES</span>(<span class=\"string\">'A000'</span>, <span class=\"keyword\">now</span>(), <span class=\"string\">'c1'</span>, <span class=\"number\">1</span>), (<span class=\"string\">'A000'</span>, <span class=\"keyword\">now</span>() + <span class=\"built_in\">INTERVAL</span> <span class=\"number\">2</span> <span class=\"keyword\">MINUTE</span>, <span class=\"string\">'c1'</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查看数据</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> ttl_table_t1;</span><br><span class=\"line\">┌─id───┬─────────create_time─┬─code─┬─type─┐</span><br><span class=\"line\">│ A000 │ 2020-07-27 21:29:15 │ c1   │    1 │</span><br><span class=\"line\">│ A000 │ 2020-07-27 21:31:15 │ c1   │    2 │</span><br><span class=\"line\">└──────┴─────────────────────┴──────┴──────┘</span><br></pre></td></tr></table></figure>\n\n<p>ClickHouse看到数据已经过期的时候，将执行合并，合并的频率由<code>merge_with_ttl_timeout</code>参数控制，<code>SETTINGS merge_with_ttl_timeout = 86400 </code>默认为86400s即1天，如果这个值太低，表示ClickHouse需要执行许多计划外的合并，可能消耗大量的资源。</p>\n<p>如果在ClickHouse合并期间进行查询，可能会获得过期的数据，所以在select查询之前可使用<code>optimize</code>命令强制触发TTL清理机制。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 查看merge_with_ttl_timeout参数的值</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> system.merge_tree_settings <span class=\"keyword\">where</span> <span class=\"keyword\">name</span>=<span class=\"string\">'merge_with_ttl_timeout'</span>;</span><br><span class=\"line\">┌─name───────────────────┬─value─┬─changed─┬─description───────────────────────────────────────────────────┐</span><br><span class=\"line\">│ merge_with_ttl_timeout │ 86400 │       0 │ Minimal time in seconds, when <span class=\"keyword\">merge</span> <span class=\"keyword\">with</span> TTL can be repeated. │</span><br><span class=\"line\">└────────────────────────┴───────┴─────────┴───────────────────────────────────────────────────────────────┘</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 10s后强制触发TTL清理，FINAL表示触发所有分区合并，没有FINAL表示触发一个分区合并</span></span><br><span class=\"line\"><span class=\"keyword\">optimize</span> <span class=\"keyword\">TABLE</span> ttl_table_t1 <span class=\"keyword\">FINAL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 再次查看数据</span></span><br><span class=\"line\"><span class=\"comment\">-- 可以看到由于第一行满足TTL过期条件，所以被还原为了列的默认值</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> ttl_table_t1;</span><br><span class=\"line\">┌─id───┬─────────create_time─┬─code─┬─type─┐</span><br><span class=\"line\">│ A000 │ 2020-07-27 21:29:15 │      │    0 │</span><br><span class=\"line\">│ A000 │ 2020-07-27 21:31:15 │ c1   │    2 │</span><br><span class=\"line\">└──────┴─────────────────────┴──────┴──────┘</span><br></pre></td></tr></table></figure>\n\n<p>​    如果需要修改列字段的TTL或为已有字段添加TTL，可使用ALTER语句设置：<code>ALTER TABLE ttl_table_t1 MODIFY COLUMN code STRING TTL create_time + INTERVAL 1 DAY</code>，目前<strong>ClickHouse没有提供取消列级别TTL的方法。</strong></p>\n<h2 id=\"三、表级别TTL\"><a href=\"#三、表级别TTL\" class=\"headerlink\" title=\"三、表级别TTL\"></a>三、表级别TTL</h2><p>​    如果需要为整张表设置TTL过期时间，则需要在MergeTree的表参数重增加TTL表达式，例如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> ttl_table_t2</span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"string\">`id`</span> <span class=\"keyword\">String</span>, </span><br><span class=\"line\">    <span class=\"string\">`create_time`</span> DateTime, </span><br><span class=\"line\">    <span class=\"string\">`code`</span> <span class=\"keyword\">String</span> TTL create_time + toIntervalSecond(<span class=\"number\">10</span>), </span><br><span class=\"line\">    <span class=\"string\">`type`</span> UInt8 TTL create_time + toIntervalSecond(<span class=\"number\">10</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">ENGINE</span> = MergeTree</span><br><span class=\"line\"><span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> toYYYYMM(create_time)</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> <span class=\"keyword\">id</span></span><br><span class=\"line\">TTL create_time + <span class=\"built_in\">INTERVAL</span> <span class=\"number\">1</span> <span class=\"keyword\">DAY</span></span><br></pre></td></tr></table></figure>\n\n<p>​    上面示例中整张表都被设置了TTL，当触发到TTL清理时，满足过期时间的数据行将被整行删除。表级别的TTL也支持修改，同样适用ALTER语句：<code>ALTER TABLE ttl_table_t2 MODIFY TTL create_time + INTERVAL 3 DAY</code>，<strong>同样，表级别的TTL目前也不支持删除。</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 执行上述alter语句修改后表结构如下：</span></span><br><span class=\"line\">clickhouse-server_1 :) desc ttl_table_t2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DESCRIBE</span> <span class=\"keyword\">TABLE</span> ttl_table_t2</span><br><span class=\"line\"></span><br><span class=\"line\">┌─<span class=\"keyword\">name</span>────────┬─<span class=\"keyword\">type</span>─────┬─default_type─┬─default_expression─┬─<span class=\"keyword\">comment</span>─┬─codec_expression─┬─ttl_expression─────────────────────┐</span><br><span class=\"line\">│ <span class=\"keyword\">id</span>          │ <span class=\"keyword\">String</span>   │              │                    │         │                  │                                    │</span><br><span class=\"line\">│ create_time │ DateTime │              │                    │         │                  │                                    │</span><br><span class=\"line\">│ code        │ <span class=\"keyword\">String</span>   │              │                    │         │                  │ create_time + toIntervalSecond(<span class=\"number\">10</span>) │</span><br><span class=\"line\">│ <span class=\"keyword\">type</span>        │ UInt8    │              │                    │         │                  │ create_time + toIntervalSecond(<span class=\"number\">10</span>) │</span><br><span class=\"line\">└─────────────┴──────────┴──────────────┴────────────────────┴─────────┴──────────────────┴────────────────────────────────────┘</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、TTL的运行原理\"><a href=\"#四、TTL的运行原理\" class=\"headerlink\" title=\"四、TTL的运行原理\"></a>四、TTL的运行原理</h2><p>​    当一张MergeTree表被设置了TTL表达式，在写入数据时，会以数据分区为单位，在每个分区目录内生成一个<code>ttl.txt</code>的文件，以上面的表ttl_table_t2为例，它既包含了列级别TTL，还包含了表级别的TTL。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 向ttl_table_t2表插入数据</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> ttl_table_t2 <span class=\"keyword\">VALUES</span>(<span class=\"string\">'A000'</span>, <span class=\"keyword\">now</span>(), <span class=\"string\">'haha'</span>, <span class=\"number\">2</span>), (<span class=\"string\">'A001'</span>, <span class=\"keyword\">now</span>(), <span class=\"string\">'xx'</span>, <span class=\"number\">2</span>) ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> ttl_table_t2</span><br><span class=\"line\"></span><br><span class=\"line\">┌─<span class=\"keyword\">id</span>───┬─────────create_time─┬─code─┬─<span class=\"keyword\">type</span>─┐</span><br><span class=\"line\">│ A000 │ <span class=\"number\">2020</span><span class=\"number\">-07</span><span class=\"number\">-28</span> <span class=\"number\">14</span>:<span class=\"number\">28</span>:<span class=\"number\">23</span> │ haha │    <span class=\"number\">2</span> │</span><br><span class=\"line\">│ A001 │ <span class=\"number\">2020</span><span class=\"number\">-07</span><span class=\"number\">-28</span> <span class=\"number\">14</span>:<span class=\"number\">28</span>:<span class=\"number\">23</span> │ xx   │    <span class=\"number\">2</span> │</span><br><span class=\"line\">└──────┴─────────────────────┴──────┴──────┘</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 由于这里插入了两条数据，所以会有两个分区目录</span></span><br><span class=\"line\">[root@xxxx ttl_table_t2]<span class=\"comment\"># ll</span></span><br><span class=\"line\">total <span class=\"number\">8</span></span><br><span class=\"line\">drwxr-x<span class=\"comment\">--- 2 101 101 4096 Jul 28 14:28 202007_1_1_0</span></span><br><span class=\"line\">drwxr-x<span class=\"comment\">--- 2 101 101  272 Jul 28 14:28 202007_1_1_1</span></span><br><span class=\"line\">drwxr-x<span class=\"comment\">--- 2 101 101   10 Jul 28 14:28 detached</span></span><br><span class=\"line\">-rw-r<span class=\"comment\">----- 1 101 101    1 Jul 28 14:28 format_version.txt</span></span><br></pre></td></tr></table></figure>\n\n<p>​    在写入数据后，每个分区目录内都会生成ttl.txt文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## tree查看当前分区目录结构,用202007_1_1_0分区为例</span></span><br><span class=\"line\">tree ./202007_1_1_0</span><br><span class=\"line\">.</span><br><span class=\"line\">├── checksums.txt</span><br><span class=\"line\">├── code.bin</span><br><span class=\"line\">├── code.mrk2</span><br><span class=\"line\">├── columns.txt</span><br><span class=\"line\">├── count.txt</span><br><span class=\"line\">├── create_time.bin</span><br><span class=\"line\">├── create_time.mrk2</span><br><span class=\"line\">├── id.bin</span><br><span class=\"line\">├── id.mrk2</span><br><span class=\"line\">├── minmax_create_time.idx</span><br><span class=\"line\">├── partition.dat</span><br><span class=\"line\">├── primary.idx</span><br><span class=\"line\">├── ttl.txt</span><br><span class=\"line\">├── type.bin</span><br><span class=\"line\">└── type.mrk2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 查看ttl.txt信息</span></span><br><span class=\"line\">cat ttl.txt </span><br><span class=\"line\">ttl format version: 1</span><br><span class=\"line\">&#123;<span class=\"string\">\"columns\"</span>:[&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"code\"</span>,<span class=\"string\">\"min\"</span>:1595917713,<span class=\"string\">\"max\"</span>:1595917713&#125;,&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"type\"</span>,<span class=\"string\">\"min\"</span>:1595917713,<span class=\"string\">\"max\"</span>:1595917713&#125;],<span class=\"string\">\"table\"</span>:&#123;<span class=\"string\">\"min\"</span>:1596004103,<span class=\"string\">\"max\"</span>:1596004103&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    通过ttl.txt内容可以发现，MergeTree时通过一串JSON配置保存了ttl的相关信息，其中：</p>\n<ul>\n<li>columns：用于保存列级别ttl的信息</li>\n<li>table：用于表示表级别ttl的信息</li>\n<li>min和max：保存了当前数据分区内，TTL指定日期字段的最小值、最大值分别与INVERTAL表达式计算后的时间戳。</li>\n</ul>\n<p>将table属性中的min和max时间戳格式化，并分别和create_time最小值与最大值对比：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    toDateTime(<span class=\"string\">'1596004103'</span>) <span class=\"keyword\">AS</span> ttl_min, </span><br><span class=\"line\">    toDateTime(<span class=\"string\">'1596004103'</span>) <span class=\"keyword\">AS</span> ttl_max, </span><br><span class=\"line\">    ttl_min - <span class=\"keyword\">MIN</span>(create_time) <span class=\"keyword\">AS</span> expire_min, </span><br><span class=\"line\">    ttl_max - <span class=\"keyword\">MAX</span>(create_time) <span class=\"keyword\">AS</span> expire_max</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> ttl_table_t2</span><br><span class=\"line\"></span><br><span class=\"line\">┌─────────────ttl_min─┬─────────────ttl_max─┬─expire_min─┬─expire_max─┐</span><br><span class=\"line\">│ <span class=\"number\">2020</span><span class=\"number\">-07</span><span class=\"number\">-29</span> <span class=\"number\">14</span>:<span class=\"number\">28</span>:<span class=\"number\">23</span> │ <span class=\"number\">2020</span><span class=\"number\">-07</span><span class=\"number\">-29</span> <span class=\"number\">14</span>:<span class=\"number\">28</span>:<span class=\"number\">23</span> │      <span class=\"number\">86400</span> │      <span class=\"number\">86400</span> │</span><br><span class=\"line\">└─────────────────────┴─────────────────────┴────────────┴────────────┘</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>TTL的处理逻辑：</strong></p>\n<ul>\n<li>MergeTree以分区目录为单位，通过分区内的ttl.txt文件记录过期时间，并最为后续的判断依据</li>\n<li>当写入一批数据时，都会给予INTERVAL表达式的计算结果为这个分区生成对应的ttl.txt文件</li>\n<li>在MergeTree进行合并分区时，会触发删除TTL过期数据的逻辑</li>\n<li>在选择删除的分区时，使用了贪婪算法：尽可能找到会最早过期，合并次数最多的分区(MaxBlockNum)最大</li>\n<li>如果一个分区内某一列数据因为TTL到期被全部删除，在合并之后的新分区目录中，不会包含这个列字段的数据文件(column.bin和column.mrk)</li>\n</ul>\n<p>ClickHouse针对列级别和表级别的TTL目前都没有提供删除TTL策略的方法，仅提供了全局开启/关闭TTL的方法：<code>SYSTEM START/STOP TTL MERGES;</code>，而且该配置并不能指定某张表开启或关闭TTL。</p>\n","categories":["clickhouse"],"tags":["clickhouse","engine","MergeTree"]},{"title":"ClickHouse存储引擎之MergeTree引擎——数据标记","url":"/2020/07/20/clickhouse/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/ClickHouse%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B9%8BMergeTree%E5%BC%95%E6%93%8E%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E6%A0%87%E8%AE%B0/","content":"<h2 id=\"一、数据标记文件的作用\"><a href=\"#一、数据标记文件的作用\" class=\"headerlink\" title=\"一、数据标记文件的作用\"></a>一、数据标记文件的作用</h2><p>​    在MergeTree中，保存数据的物理文件包括索引文件primary.idx、column.bin数据文件和column.mrk数据标记文件(若使用了自适应大小的索引间隔，则标记文件会为column.mrk2)，这三种文件帮助人们快速找到需要的数据。如果把MergeTree看为一本书，primary.idx一级索引文件类似于书的一级章节目录，column.bin文件中的数据类似书中具体的文字，而数据标记文件则将一级章节目录和具体文字关联起来。</p>\n<p>​    对于数据标记而言，它记录了两个信息：一是一级章节对应的页码信息；二是对应的文字在某一页中的起始位置信息。通过数据标记文件就可以很快的翻到关注内容所在的页，并知道从第几行开始阅读。</p>\n<h2 id=\"二、数据标记的生成规则\"><a href=\"#二、数据标记的生成规则\" class=\"headerlink\" title=\"二、数据标记的生成规则\"></a>二、数据标记的生成规则</h2><p>​    数据标记文件、一级索引的对应关系大致如下：</p>\n<img src=\"/2020/07/20/clickhouse/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/ClickHouse%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B9%8BMergeTree%E5%BC%95%E6%93%8E%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E6%A0%87%E8%AE%B0/biaoji_1.svg\" style=\"zoom:70%;\">\n\n<p>​    从上图可以看出列数据标记和索引区间是对齐的，都按照index_granularity(默认8192)索引粒度间隔，故通过索引区间的下标编号就可以直接找到对应的数据标记。</p>\n<p>​    数据标记文件也和column.bin文件一一对应，每一个列字段都有一个对应的column.mrk数据标记文件，用于记录数据在column.bin文件中的偏移量信息。一行标记数据用一个元组表示，元组内包含了两个整型数值的偏移量信息：某段数据区间内，对应的column.bin压缩文件中，压缩数据块的起始偏移量；未压缩数据的起始偏移量。对应关系如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th>编号</th>\n<th>压缩文件中的偏移量</th>\n<th>解压缩块中的偏移量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>8192</td>\n</tr>\n<tr>\n<td>2</td>\n<td>0</td>\n<td>16384</td>\n</tr>\n<tr>\n<td>3</td>\n<td>0</td>\n<td>24576</td>\n</tr>\n<tr>\n<td>4</td>\n<td>0</td>\n<td>32768</td>\n</tr>\n<tr>\n<td>5</td>\n<td>0</td>\n<td>40960</td>\n</tr>\n<tr>\n<td>6</td>\n<td>0</td>\n<td>49152</td>\n</tr>\n<tr>\n<td>7</td>\n<td>0</td>\n<td>57344</td>\n</tr>\n<tr>\n<td>8</td>\n<td>12016</td>\n<td>0</td>\n</tr>\n<tr>\n<td>9</td>\n<td>12016</td>\n<td>8192</td>\n</tr>\n</tbody></table>\n<p>​    这里使用了之前MergeTree引擎——数据存储中的示例数据，可以看到在示例数据中，第0个压缩块的大小是12000，而在上表中对应的第0个压缩数据块的截止偏移量是12016，在数据存储的文章中我们知道，压缩数据块包含了压缩数据和头信息，并且为了让读取粒度进一步精确到压缩数据块，加载数据还包含了下一个压缩数据块的头文件，一个压缩数据块的头信息固定由9个字节组成，压缩后大小为8字节，所以这里截止偏移量就为8+12000+8=12016.</p>\n<p>​    由表中还可以看出，每一行标记数据都表示了一个片段的数据(默认8192行)在column.bin压缩文件中的读取位置信息。标记数据和一级索引数据不同，它不能常驻于内存中，clickhouse使用了LRU(最近最少使用)缓存策略加快其获取速度。</p>\n<h2 id=\"三、数据标记的工作方式\"><a href=\"#三、数据标记的工作方式\" class=\"headerlink\" title=\"三、数据标记的工作方式\"></a>三、数据标记的工作方式</h2><p>​    MergeTree读取数据时，需要通过标记数据的位置信息再找到需要的数据，整个查找过程大致分为读取压缩数据块和读取数据两个步骤</p>\n<img src=\"/2020/07/20/clickhouse/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/ClickHouse%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B9%8BMergeTree%E5%BC%95%E6%93%8E%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E6%A0%87%E8%AE%B0/biaoji2.jpg\" style=\"zoom:67%;\">\n\n<p>​    上图为ClickHouse官方提供的hits_v1测试表中，JavaEnable字段标记文件和压缩数据文件的对应关系示例。由于测试表中JavaEnable字段的数据类型为UInt8，该列每行数据大小为1字节，hits_v1表的索引粒度index_granularity为8192，所以一个索引片段的数据大小为8192字节。按照压缩数据块的生成规则，当数据大小在64KB～1MB之间时，生成一个压缩数据块(64K=65536字节，65536/5192=8)，所以在该JavaEnable的标记文件中，每8行标记数据对应一个压缩数据块，故从图中可以看到，在标记文件中，压缩文件中8行数据的偏移量相同，这8行标记指向了同一个压缩数据块。由于每一个片段的数据大小都为8192字节，所以解压缩块中每8行的偏移量都按照8192的大小递增，到第9行时，又会置为0，这是由于从这里开始，又生成了下一个压缩数据块。</p>\n<p><strong>MergeTree定位压缩数据块并读取数据：</strong></p>\n<ol>\n<li><p>读取压缩数据块</p>\n<p>在查询某一列数据时，MergeTree不需要一次性加载所有column.bin文件，而可以根据需要，借助标记文件中保存的压缩数据偏移量只加载特定的数据块。</p>\n<p>在上图示例中，上下相邻两个压缩文件的起始偏移量，构成了获取当前标记对应压缩块的偏移量区间。由当前标记数据开始，向下找到不同的压缩文件偏移量为止，此时获得的一组偏移量区间，就是压缩数据块在column.bin数据文件中的偏移量。例如在上图中，读取.bin文件中[0, 12016]字节数据，就能得到第0个压缩数据块的数据。</p>\n</li>\n<li><p>读取数据</p>\n<p>在读取数据时，MergeTree也可以根据需要借助标记文件中保存的解压缩块中的偏移量，以index_granularity的索引粒度加载特定的一小段。标记数据中，上下相邻的两个解压缩块中的偏移起始量，构成了获取当前标记对应数据的偏移量区间。通过这个区间，能在它的压缩块解压之后，按照偏移量按需读取数据。例如，在图中，通过[0, 8192]便能够读取压缩块0中的第一个数据片段。</p>\n</li>\n</ol>\n","categories":["clickhouse"],"tags":["clickhouse","engine","MergeTree"]},{"title":"ClickHouse存储引擎之MergeTree引擎——数据存储","url":"/2020/07/12/clickhouse/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/ClickHouse%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B9%8BMergeTree%E5%BC%95%E6%93%8E%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/","content":"<h2 id=\"一、按列存储\"><a href=\"#一、按列存储\" class=\"headerlink\" title=\"一、按列存储\"></a>一、按列存储</h2><p>​    在MergeTree中，数据按列存储，每个字段也独立单独存储，每个列字段均拥有一个对应的column.bin数据文件，这些数据文件便为数据的物理存储。数据文件以分区目录的形式被组织存放，所以每个分区目录中的bin文件只保存了当前分区片段内的该列数据。按列独立存储有利于更好的进行数据压缩(相同类型数据存放在一起)，还可以最小化需扫描数据的范围。</p>\n<p>​    MergeTree会将经过压缩的数据存放到对应column.bin文件中，默认使用LZ4算法，然后将数据按照声明的ORDER BY排序。最后，数据会以压缩数据块的方式被有序的写入数据文件中的。</p>\n<h2 id=\"二、压缩数据块\"><a href=\"#二、压缩数据块\" class=\"headerlink\" title=\"二、压缩数据块\"></a>二、压缩数据块</h2><h3 id=\"1、简介\"><a href=\"#1、简介\" class=\"headerlink\" title=\"1、简介\"></a>1、简介</h3><p>​    一个压缩数据块由头信息和压缩数据两部分组成。头信息固定使用9位字节表示，具体由1个UInt8(1字节)和2个UInt32(4字节)整型组成，分别代表了使用的压缩算法类型、压缩后的数据大小和压缩前的数据大小，具体格式如图所示：</p>\n<img src=\"/2020/07/12/clickhouse/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/ClickHouse%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B9%8BMergeTree%E5%BC%95%E6%93%8E%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/cunchu_1.svg\" width=\"50%\">\n\n<p>​    从上图可以看出，column.bin文件由多个压缩数据块组成，每个压缩数据块的头部信息是基于CompressionMethod_CompressedSize_UncompressedSize公式生成，可通过ClickHouse提供的clickhouse-compressor工具查询到某个.bin文件中压缩数据的统计信息。这里以官方提供的测试数据hit_v1为例，执行该命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">clickhouse-compressor --<span class=\"built_in\">stat</span> &lt;  /var/lib/clickhouse/data/datasets/hits_v1/201403_1_32_2/JavaEnable.bin </span><br><span class=\"line\"><span class=\"comment\">## 结果如下，每一行数据表示一个压缩数据块的头信息，分表表示该压缩数据块中未压缩数据大小和压缩后数据大小(打印信息和物理存储的顺序刚好相反)</span></span><br><span class=\"line\">65536   12000</span><br><span class=\"line\">65536   14661</span><br><span class=\"line\">65536   4936</span><br><span class=\"line\">65536   7506</span><br><span class=\"line\">65536   18660</span><br><span class=\"line\">65536   14892</span><br><span class=\"line\">65536   17474</span><br><span class=\"line\">65536   13464</span><br><span class=\"line\">65536   14999</span><br><span class=\"line\">...</span><br><span class=\"line\">72776   1546</span><br><span class=\"line\">68558   12639</span><br><span class=\"line\">72089   11184</span><br><span class=\"line\">71612   6945</span><br><span class=\"line\">65857   11135</span><br><span class=\"line\">7963    1559</span><br></pre></td></tr></table></figure>\n\n<p>​    每个压缩数据块的体积，按照其压缩前的数据字节大小，被严格控制在64KB～1MB之间，上下限大小由<code>min_compress_block_size(默认65536)</code>和<code>max_compress_block_size(默认1048576)</code>参数指定。而每一个压缩数据块最终大小，则和一个index_granularity内实际的数据大小有关。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">clickhouse-server_1 :) <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> system.settings <span class=\"keyword\">where</span> <span class=\"keyword\">name</span> <span class=\"keyword\">like</span> <span class=\"string\">'%_compress_block_size%'</span>\\G</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> *</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> system.settings</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">name</span> <span class=\"keyword\">LIKE</span> <span class=\"string\">'%_compress_block_size%'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">Row</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">──────</span><br><span class=\"line\"><span class=\"keyword\">name</span>:        min_compress_block_size</span><br><span class=\"line\"><span class=\"keyword\">value</span>:       <span class=\"number\">65536</span></span><br><span class=\"line\"><span class=\"keyword\">changed</span>:     <span class=\"number\">0</span></span><br><span class=\"line\">description: The actual <span class=\"keyword\">size</span> <span class=\"keyword\">of</span> the <span class=\"keyword\">block</span> <span class=\"keyword\">to</span> <span class=\"keyword\">compress</span>, <span class=\"keyword\">if</span> the uncompressed <span class=\"keyword\">data</span> <span class=\"keyword\">less</span> <span class=\"keyword\">than</span> max_compress_block_size <span class=\"keyword\">is</span> <span class=\"keyword\">no</span> <span class=\"keyword\">less</span> <span class=\"keyword\">than</span> this <span class=\"keyword\">value</span> <span class=\"keyword\">and</span> <span class=\"keyword\">no</span> <span class=\"keyword\">less</span> <span class=\"keyword\">than</span> the volume <span class=\"keyword\">of</span> <span class=\"keyword\">data</span> <span class=\"keyword\">for</span> one mark.</span><br><span class=\"line\"><span class=\"keyword\">min</span>:         ᴺᵁᴸᴸ</span><br><span class=\"line\"><span class=\"keyword\">max</span>:         ᴺᵁᴸᴸ</span><br><span class=\"line\">readonly:    <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">Row</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">──────</span><br><span class=\"line\"><span class=\"keyword\">name</span>:        max_compress_block_size</span><br><span class=\"line\"><span class=\"keyword\">value</span>:       <span class=\"number\">1048576</span></span><br><span class=\"line\"><span class=\"keyword\">changed</span>:     <span class=\"number\">0</span></span><br><span class=\"line\">description: The maximum <span class=\"keyword\">size</span> <span class=\"keyword\">of</span> blocks <span class=\"keyword\">of</span> uncompressed <span class=\"keyword\">data</span> <span class=\"keyword\">before</span> compressing <span class=\"keyword\">for</span> writing <span class=\"keyword\">to</span> a table.</span><br><span class=\"line\"><span class=\"keyword\">min</span>:         ᴺᵁᴸᴸ</span><br><span class=\"line\"><span class=\"keyword\">max</span>:         ᴺᵁᴸᴸ</span><br><span class=\"line\">readonly:    <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> set. Elapsed: <span class=\"number\">0.002</span> sec.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、压缩规则及流程\"><a href=\"#2、压缩规则及流程\" class=\"headerlink\" title=\"2、压缩规则及流程\"></a>2、压缩规则及流程</h3><p>​    MergeTree在数据存储过程中，会遵循以下规则：</p>\n<ul>\n<li>单个索引粒度间隔数据size &lt; 64KB：如果单个索引粒度数据大小小于64KB，则继续获取下一个索引粒度的数据，一直到size &gt;= 64KB，生成下一个压缩数据块。</li>\n<li>单个索引粒度间隔数据 64KB &lt;= size &lt;= 1MB：如果单个索引粒度数据大小大于64KB，小于1MB，则直接生成下一个压缩数据块</li>\n<li>单个索引粒度间隔数据 size &gt; 1MB：如果单个索引粒度数据大小超过1MB，则先按照1MB大小截断并生成下一个压缩数据块，剩余数据按照这三个规则对应执行。这时就会出现一批数据生成多个压缩数据块的情况。</li>\n</ul>\n<p><img src=\"/2020/07/12/clickhouse/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/ClickHouse%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B9%8BMergeTree%E5%BC%95%E6%93%8E%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/cunchu_2.svg\"></p>\n<h3 id=\"3、总结\"><a href=\"#3、总结\" class=\"headerlink\" title=\"3、总结\"></a>3、总结</h3><p>​    一个column.bin文件是由一个到多个压缩数据块组成的，每个压缩数据块大小在64KB～1MB之间。多个压缩数据块之间，按照写入顺序首尾相接，紧密排列在一起。数据被压缩后可以减少数据大小，降低存储空间并且加快数据的传输效率，但数据的压缩和解压动作，本身也会带来额外的性能损耗，所以需要控制被压缩数据的大小。另外，在具体读取某一列的压缩数据时，首先需要将压缩数据(包含了整个压缩数据块以及下个压缩数据块的头文件)加载到内存并解压，再进行后续的数据处理。通过压缩数据块，可以在不读取整个.bin文件的情况下将读取粒度降低到压缩数据块级别，进一步缩小了数据读取的范围。</p>\n<img src=\"/2020/07/12/clickhouse/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/ClickHouse%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B9%8BMergeTree%E5%BC%95%E6%93%8E%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/cunchu_3.png\" style=\"zoom:67%;\">\n\n","categories":["clickhouse"],"tags":["clickhouse","engine","MergeTree"]},{"title":"简述ClickHouse数据类型","url":"/2020/07/12/clickhouse/%E7%AE%80%E8%BF%B0ClickHouse%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","content":"<p>​    ClickHouse作为一个DBMS，提供了DDL和DML的功能，并支持部分标准的SQL语法。但ClickHouse在基础数据方面，既提供了常规的数据类型、字符串类型格式，又提供了一些常用的复合类型(数组、元组等)，并且与常规的数据库，在DML的使用上也存在不同(例如：UPDATE和DELETE是借助ALTER实现的)。本文将简单介绍ClickHouse所提供的各种数据类型。</p>\n<h2 id=\"一、ClickHouse的数据类型\"><a href=\"#一、ClickHouse的数据类型\" class=\"headerlink\" title=\"一、ClickHouse的数据类型\"></a>一、ClickHouse的数据类型</h2><p>​    <strong>ClickHouse提供了许多数据类型，可以分为基础类型、符合类型和特殊类型</strong>，可进入clickhouse数据库中，通过<code>select * from system.data_type_families</code>查询所支持的所有数据类型。</p>\n<h2 id=\"二、基础数据类型\"><a href=\"#二、基础数据类型\" class=\"headerlink\" title=\"二、基础数据类型\"></a>二、基础数据类型</h2><p>​    ClickHouse基础数据类型可分为数值、字符串和时间三种类型，没有Boolean类型，可用整型的0和1来替代。</p>\n<h3 id=\"1、数值型\"><a href=\"#1、数值型\" class=\"headerlink\" title=\"1、数值型\"></a>1、数值型</h3><p>数值型可分为Int、Float和Decimal三种类型</p>\n<h4 id=\"1-1-Int\"><a href=\"#1-1-Int\" class=\"headerlink\" title=\"1.1 Int\"></a>1.1 Int</h4><p>​    在MySQL中，使用Tinyint、smallint、int和bigint来指代整数类型的取值。ClickHouse中使用了Int8、Int16、Int32、Int64来分别指代不同大小的Int类型(末尾数字表明占用字节大小，1字节=8位)，具体对比关系如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">名称</th>\n<th align=\"center\">字节大小</th>\n<th>范围</th>\n<th align=\"center\">MySQL</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Int8</td>\n<td align=\"center\">1</td>\n<td>-128到127</td>\n<td align=\"center\">Tinyint</td>\n</tr>\n<tr>\n<td align=\"center\">Int16</td>\n<td align=\"center\">2</td>\n<td>-32768到32767</td>\n<td align=\"center\">Smallint</td>\n</tr>\n<tr>\n<td align=\"center\">Int32</td>\n<td align=\"center\">4</td>\n<td>-2147483648到214783647</td>\n<td align=\"center\">Int</td>\n</tr>\n<tr>\n<td align=\"center\">Int64</td>\n<td align=\"center\">8</td>\n<td>-9223372036854775808到9223372036854775807</td>\n<td align=\"center\">Bigint</td>\n</tr>\n<tr>\n<td align=\"center\">UInt8</td>\n<td align=\"center\">1</td>\n<td>0到255</td>\n<td align=\"center\">Tinyint Unsinged</td>\n</tr>\n<tr>\n<td align=\"center\">UInt16</td>\n<td align=\"center\">2</td>\n<td>0到65535</td>\n<td align=\"center\">Smallint Unsigned</td>\n</tr>\n<tr>\n<td align=\"center\">UInt32</td>\n<td align=\"center\">4</td>\n<td>0到4294967295</td>\n<td align=\"center\">Int Unsigned</td>\n</tr>\n<tr>\n<td align=\"center\">UInt64</td>\n<td align=\"center\">8</td>\n<td>0到18446744073709551615</td>\n<td align=\"center\">Bigint Unsigned</td>\n</tr>\n</tbody></table>\n<h4 id=\"1-2-Float\"><a href=\"#1-2-Float\" class=\"headerlink\" title=\"1.2 Float\"></a>1.2 Float</h4><p>​    ClickHouse使用了Float32和Float64来代表单精度浮点数一级双精度浮点数，具体对比关系如下，使用浮点数会引起四舍五入的误差：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">名称</th>\n<th align=\"center\">大小(字节)</th>\n<th align=\"center\">有效精度(位数)</th>\n<th align=\"center\">C语言类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Float32</td>\n<td align=\"center\">4</td>\n<td align=\"center\">7</td>\n<td align=\"center\">float</td>\n</tr>\n<tr>\n<td align=\"center\">Float64</td>\n<td align=\"center\">8</td>\n<td align=\"center\">16</td>\n<td align=\"center\">Double</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 1. 转换为Float32类型</span></span><br><span class=\"line\">clickhouse-server_1 :) <span class=\"keyword\">select</span> toFloat32(<span class=\"string\">'0.123456789098765432'</span>) <span class=\"keyword\">as</span> a, toTypeName(a);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    toFloat32(<span class=\"string\">'0.123456789098765432'</span>) <span class=\"keyword\">AS</span> a, </span><br><span class=\"line\">    toTypeName(a)</span><br><span class=\"line\"></span><br><span class=\"line\">┌──────────a─┬─toTypeName(toFloat32(<span class=\"string\">'0.123456789098765432'</span>))─┐</span><br><span class=\"line\">│ <span class=\"number\">0.12345679</span> │ Float32                                       │</span><br><span class=\"line\">└────────────┴───────────────────────────────────────────────┘</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> set. Elapsed: <span class=\"number\">0.002</span> sec. </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2. 转换为Float64类型</span></span><br><span class=\"line\">clickhouse-server_1 :) <span class=\"keyword\">select</span> toFloat64(<span class=\"string\">'0.123456789098765432'</span>) <span class=\"keyword\">as</span> a, toTypeName(a);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    toFloat64(<span class=\"string\">'0.123456789098765432'</span>) <span class=\"keyword\">AS</span> a, </span><br><span class=\"line\">    toTypeName(a)</span><br><span class=\"line\"></span><br><span class=\"line\">┌───────────────────a─┬─toTypeName(toFloat64(<span class=\"string\">'0.123456789098765432'</span>))─┐</span><br><span class=\"line\">│ <span class=\"number\">0.12345678909876544</span> │ Float64                                       │</span><br><span class=\"line\">└─────────────────────┴───────────────────────────────────────────────┘</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> set. Elapsed: <span class=\"number\">0.003</span> sec.</span><br></pre></td></tr></table></figure>\n\n<p>​    和标准的SQL相比，ClickHouse还支持了以下类别的浮点数：</p>\n<ul>\n<li><p>Inf：正无穷</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">clickhouse-server_1 :) <span class=\"keyword\">select</span> <span class=\"number\">0.5</span>/<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"number\">0.5</span> / <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">┌─divide(<span class=\"number\">0.5</span>, <span class=\"number\">0</span>)─┐</span><br><span class=\"line\">│            inf │</span><br><span class=\"line\">└────────────────┘</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> set. Elapsed: <span class=\"number\">0.007</span> sec.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>-Inf：负无穷</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">clickhouse-server_1 :) <span class=\"keyword\">select</span> <span class=\"number\">-0.5</span> / <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"number\">-0.5</span> / <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">┌─divide(<span class=\"number\">-0.5</span>, <span class=\"number\">0</span>)─┐</span><br><span class=\"line\">│            -inf │</span><br><span class=\"line\">└─────────────────┘</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> set. Elapsed: <span class=\"number\">0.001</span> sec.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>NaN：非数字</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">clickhouse-server_1 :) <span class=\"keyword\">select</span> <span class=\"number\">0</span> / <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"number\">0</span> / <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">┌─divide(<span class=\"number\">0</span>, <span class=\"number\">0</span>)─┐</span><br><span class=\"line\">│          <span class=\"keyword\">nan</span> │</span><br><span class=\"line\">└──────────────┘</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> set. Elapsed: <span class=\"number\">0.002</span> sec.</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"1-3-Decimal\"><a href=\"#1-3-Decimal\" class=\"headerlink\" title=\"1.3 Decimal\"></a>1.3 Decimal</h4><p>​    在高精度的数值运算中，会使用Decimal类型。ClickHouse提供了Decimal32、Decimal64和Decimal128三种精度的定点数，可通过<code>Decimal(P, S)</code>或简写<code>Decimal32(S), Decimal64(S), Decimal128(S)</code>来表示定义，参数含义如下：</p>\n<ul>\n<li>P表示精度，有效范围为[1, 38]，决定总位数(整数部分+小数部分)</li>\n<li>S表示规模，有效范围为[0, P]，决定小数位数</li>\n</ul>\n<p>简写方式和原生方式的对应如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">简写</th>\n<th align=\"center\">原生</th>\n<th align=\"center\">范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Decimal32(S)</td>\n<td align=\"center\">Decimal(1~9, S)</td>\n<td align=\"center\">$-1 * 10^(9 - S)$ 到 $1 * 10^(9 - S)$</td>\n</tr>\n<tr>\n<td align=\"center\">Decimal64(S)</td>\n<td align=\"center\">Decimal(10~18, S)</td>\n<td align=\"center\">$-1 * 10^(18 - S)$ 到 $1 * 10^(18 - S)$</td>\n</tr>\n<tr>\n<td align=\"center\">Decimal128(S)</td>\n<td align=\"center\">Decimal(19~38, S)</td>\n<td align=\"center\">$-1 * 10^(38 - S)$ 到 $1 * 10^(38 - S)$</td>\n</tr>\n</tbody></table>\n<p>​    使用两个不同精度的定点数进行元算的话，他们小数位数S会发生变化：</p>\n<ul>\n<li>加法：S = max(S1, S2)</li>\n<li>减法：S = max(S1, S2)</li>\n<li>乘法：S = S1 + S2</li>\n<li>除法：S = S1  (S1 为被除数，且被除数S1必须大于除数S2，即S1 / S2)</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 1. 加法示例</span></span><br><span class=\"line\">clickhouse-server_1 :) <span class=\"keyword\">select</span> toDecimal32(<span class=\"number\">2</span>,<span class=\"number\">4</span>) + toDecimal64(<span class=\"number\">2</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> toDecimal32(<span class=\"number\">2</span>, <span class=\"number\">4</span>) + toDecimal64(<span class=\"number\">2</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">┌─plus(toDecimal32(<span class=\"number\">2</span>, <span class=\"number\">4</span>), toDecimal64(<span class=\"number\">2</span>, <span class=\"number\">2</span>))─┐</span><br><span class=\"line\">│                                     <span class=\"number\">4.0000</span> │</span><br><span class=\"line\">└────────────────────────────────────────────┘</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> set. Elapsed: <span class=\"number\">0.006</span> sec. </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2. 减法示例</span></span><br><span class=\"line\">clickhouse-server_1 :) <span class=\"keyword\">select</span> toDecimal32(<span class=\"number\">4</span>, <span class=\"number\">6</span>) - toDecimal64(<span class=\"number\">2</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> toDecimal32(<span class=\"number\">4</span>, <span class=\"number\">6</span>) - toDecimal64(<span class=\"number\">2</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">┌─<span class=\"keyword\">minus</span>(toDecimal32(<span class=\"number\">4</span>, <span class=\"number\">6</span>), toDecimal64(<span class=\"number\">2</span>, <span class=\"number\">2</span>))─┐</span><br><span class=\"line\">│                                    <span class=\"number\">2.000000</span> │</span><br><span class=\"line\">└─────────────────────────────────────────────┘</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> set. Elapsed: <span class=\"number\">0.003</span> sec. </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 3. 乘法示例</span></span><br><span class=\"line\">clickhouse-server_1 :) <span class=\"keyword\">select</span> toDecimal64(<span class=\"number\">4</span>, <span class=\"number\">4</span>) * toDecimal32(<span class=\"number\">2</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> toDecimal64(<span class=\"number\">4</span>, <span class=\"number\">4</span>) * toDecimal32(<span class=\"number\">2</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">┌─multiply(toDecimal64(<span class=\"number\">4</span>, <span class=\"number\">4</span>), toDecimal32(<span class=\"number\">2</span>, <span class=\"number\">2</span>))─┐</span><br><span class=\"line\">│                                       <span class=\"number\">8.000000</span> │</span><br><span class=\"line\">└────────────────────────────────────────────────┘</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> set. Elapsed: <span class=\"number\">0.002</span> sec. </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 4. 除法示例</span></span><br><span class=\"line\">clickhouse-server_1 :) <span class=\"keyword\">select</span> toDecimal64(<span class=\"number\">4</span>, <span class=\"number\">4</span>) / toDecimal32(<span class=\"number\">2</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> toDecimal64(<span class=\"number\">4</span>, <span class=\"number\">4</span>) / toDecimal32(<span class=\"number\">2</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">┌─divide(toDecimal64(<span class=\"number\">4</span>, <span class=\"number\">4</span>), toDecimal32(<span class=\"number\">2</span>, <span class=\"number\">2</span>))─┐</span><br><span class=\"line\">│                                       <span class=\"number\">2.0000</span> │</span><br><span class=\"line\">└──────────────────────────────────────────────┘</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> set. Elapsed: <span class=\"number\">0.003</span> sec.</span><br></pre></td></tr></table></figure>\n\n<p><strong>溢出检查：</strong></p>\n<p>对Decimal进行操作时，数值可能会发生溢出。小数部分过多数字会被丢弃(不是四舍五入)，整数数字过多会导致异常。可通过设置<code>decimal_check_overflow</code>来关闭溢出检查，但溢出会导致结果不正确，而且会让计算变慢。在比较计算上也会发生溢出。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 1. 数值溢出，x/3的结果本应为无限循环小数，只保留了S位，其余小数被丢弃</span></span><br><span class=\"line\">clickhouse-server_1 :) <span class=\"keyword\">SELECT</span> toDecimal32(<span class=\"number\">2</span>, <span class=\"number\">4</span>) <span class=\"keyword\">AS</span> x, x / <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    toDecimal32(<span class=\"number\">2</span>, <span class=\"number\">4</span>) <span class=\"keyword\">AS</span> x, </span><br><span class=\"line\">    x / <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">┌──────x─┬─divide(toDecimal32(<span class=\"number\">2</span>, <span class=\"number\">4</span>), <span class=\"number\">3</span>)─┐</span><br><span class=\"line\">│ <span class=\"number\">2.0000</span> │                       <span class=\"number\">0.6666</span> │</span><br><span class=\"line\">└────────┴──────────────────────────────┘</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> set. Elapsed: <span class=\"number\">0.002</span> sec. </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2. 整数部分溢出导致报错</span></span><br><span class=\"line\">clickhouse-server_1 :) <span class=\"keyword\">SELECT</span> toDecimal32(<span class=\"number\">4.2</span>, <span class=\"number\">8</span>) <span class=\"keyword\">AS</span> x, x * x</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    toDecimal32(<span class=\"number\">4.2</span>, <span class=\"number\">8</span>) <span class=\"keyword\">AS</span> x, </span><br><span class=\"line\">    x * x</span><br><span class=\"line\"></span><br><span class=\"line\">Received <span class=\"keyword\">exception</span> <span class=\"keyword\">from</span> <span class=\"keyword\">server</span> (<span class=\"keyword\">version</span> <span class=\"number\">20.3</span><span class=\"number\">.4</span>):</span><br><span class=\"line\">Code: <span class=\"number\">69.</span> DB::<span class=\"keyword\">Exception</span>: Received <span class=\"keyword\">from</span> localhost:<span class=\"number\">9000.</span> DB::<span class=\"keyword\">Exception</span>: Scale <span class=\"number\">16</span> <span class=\"keyword\">is</span> <span class=\"keyword\">out</span> <span class=\"keyword\">of</span> bounds. </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> set. Elapsed: <span class=\"number\">0.005</span> sec. </span><br><span class=\"line\"></span><br><span class=\"line\">clickhouse-server_1 :) <span class=\"keyword\">SELECT</span> toDecimal32(<span class=\"number\">4.2</span>, <span class=\"number\">8</span>) <span class=\"keyword\">AS</span> x, <span class=\"number\">6</span> * x</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    toDecimal32(<span class=\"number\">4.2</span>, <span class=\"number\">8</span>) <span class=\"keyword\">AS</span> x, </span><br><span class=\"line\">    <span class=\"number\">6</span> * x</span><br><span class=\"line\"></span><br><span class=\"line\">Received <span class=\"keyword\">exception</span> <span class=\"keyword\">from</span> <span class=\"keyword\">server</span> (<span class=\"keyword\">version</span> <span class=\"number\">20.3</span><span class=\"number\">.4</span>):</span><br><span class=\"line\">Code: <span class=\"number\">407.</span> DB::<span class=\"keyword\">Exception</span>: Received <span class=\"keyword\">from</span> localhost:<span class=\"number\">9000.</span> DB::<span class=\"keyword\">Exception</span>: <span class=\"built_in\">Decimal</span> math overflow. </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> set. Elapsed: <span class=\"number\">0.002</span> sec.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 3. 关闭溢出检查</span></span><br><span class=\"line\">clickhouse-server_1 :) <span class=\"keyword\">SET</span> decimal_check_overflow = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SET</span> decimal_check_overflow = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">Ok.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> set. Elapsed: <span class=\"number\">0.001</span> sec. </span><br><span class=\"line\"></span><br><span class=\"line\">clickhouse-server_1 :) <span class=\"keyword\">SELECT</span> toDecimal32(<span class=\"number\">4.2</span>, <span class=\"number\">8</span>) <span class=\"keyword\">AS</span> x, <span class=\"number\">6</span> * x</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    toDecimal32(<span class=\"number\">4.2</span>, <span class=\"number\">8</span>) <span class=\"keyword\">AS</span> x, </span><br><span class=\"line\">    <span class=\"number\">6</span> * x</span><br><span class=\"line\"></span><br><span class=\"line\">┌──────────x─┬─multiply(<span class=\"number\">6</span>, toDecimal32(<span class=\"number\">4.2</span>, <span class=\"number\">8</span>))─┐</span><br><span class=\"line\">│ <span class=\"number\">4.20000000</span> │                     <span class=\"number\">-17.74967296</span> │</span><br><span class=\"line\">└────────────┴──────────────────────────────────┘</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> set. Elapsed: <span class=\"number\">0.002</span> sec. </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 4. 比较，溢出提示Can't compare</span></span><br><span class=\"line\">clickhouse-server_1 :) <span class=\"keyword\">SELECT</span> toDecimal32(<span class=\"number\">1</span>, <span class=\"number\">8</span>) &lt; <span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> toDecimal32(<span class=\"number\">1</span>, <span class=\"number\">8</span>) &lt; <span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\">Received <span class=\"keyword\">exception</span> <span class=\"keyword\">from</span> <span class=\"keyword\">server</span> (<span class=\"keyword\">version</span> <span class=\"number\">20.3</span><span class=\"number\">.4</span>):</span><br><span class=\"line\">Code: <span class=\"number\">407.</span> DB::<span class=\"keyword\">Exception</span>: Received <span class=\"keyword\">from</span> localhost:<span class=\"number\">9000.</span> DB::<span class=\"keyword\">Exception</span>: Can<span class=\"string\">'t compare. </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">0 rows in set. Elapsed: 0.010 sec.</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"2、字符串类型\"><a href=\"#2、字符串类型\" class=\"headerlink\" title=\"2、字符串类型\"></a>2、字符串类型</h3><p>字符串类型可分为String、FixedString和UUID类型。</p>\n<h4 id=\"2-1-String\"><a href=\"#2-1-String\" class=\"headerlink\" title=\"2.1 String\"></a>2.1 String</h4><p>字符串由String类型定义，无长度限制。在使用时也不需要声明大小，代替了其他数据库上的Varchar、Text、Blob等自负类型。而且String类型不限制字符集限制，可以写入任意编码的字符串，但为了标准统一化开发管理，官方建议一套程序中应使用统一的编码类型。</p>\n<h4 id=\"2-2-FixedString\"><a href=\"#2-2-FixedString\" class=\"headerlink\" title=\"2.2 FixedString\"></a>2.2 FixedString</h4><p>FixedString和传统的char类型类似，用来定义一些固定长度的字符串。通过<code>FixedString(N)</code>来定义声明，N表示字符串长度，当数据长度小于N字节时，会降低一定效率。但Char类型通常使用空格填充末尾字符，而FixedString用null字节来填充。</p>\n<ul>\n<li>当向ClickHouse中插入数据时<ul>\n<li>如果字符串包含字节数少于N，将用null字节来填充</li>\n<li>如果字符串包含字节数大于N，将抛出<code>Too large value for FixedString(N)</code>的异常</li>\n</ul>\n</li>\n<li>当查询数据时<ul>\n<li>ClickHouse不会删除字符串末尾的空字节，如果使用WHERE子句，则<strong>需要手动添加空字节来匹配FixedString的值</strong></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 1. 创建一个用来测试的表，并插入测试数据，若没有test库则需要create database test来进行创建</span></span><br><span class=\"line\">clickhouse-server_1 :) <span class=\"keyword\">use</span> <span class=\"keyword\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\">clickhouse-server_1 :) <span class=\"keyword\">create</span> <span class=\"keyword\">table</span> FixedStringTest ( a FixedString(<span class=\"number\">2</span>) ) <span class=\"keyword\">engine</span>=MergeTree <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> a</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2. 插入正常数据</span></span><br><span class=\"line\">clickhouse-server_1 :) <span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> FixedStringTest <span class=\"keyword\">values</span> (<span class=\"string\">'a'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 3. 插入大于N数据</span></span><br><span class=\"line\">clickhouse-server_1 :) <span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> FixedStringTest <span class=\"keyword\">values</span> (<span class=\"string\">'abc'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 4. 查询数据</span></span><br><span class=\"line\"><span class=\"comment\">-- where查询时并不会自动删除后面的null，所以无法得到想要的结果</span></span><br><span class=\"line\">clickhouse-server_1 :) <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> FixedStringTest <span class=\"keyword\">where</span> a = <span class=\"string\">'a'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> *</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> FixedStringTest</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> a = <span class=\"string\">'a'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Ok.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> set. Elapsed: <span class=\"number\">0.002</span> sec. </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询可看到，长度为2</span></span><br><span class=\"line\">clickhouse-server_1 :) <span class=\"keyword\">select</span> a, <span class=\"keyword\">length</span>(a) <span class=\"keyword\">from</span> FixedStringTest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    a, </span><br><span class=\"line\">    <span class=\"keyword\">length</span>(a)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> FixedStringTest</span><br><span class=\"line\"></span><br><span class=\"line\">┌─a─┬─<span class=\"keyword\">length</span>(a)─┐</span><br><span class=\"line\">│ a │         <span class=\"number\">2</span> │</span><br><span class=\"line\">└───┴───────────┘</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> set. Elapsed: <span class=\"number\">0.002</span> sec. </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 需手动填充空字节用于where匹配</span></span><br><span class=\"line\">clickhouse-server_1 :) <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> FixedStringTest <span class=\"keyword\">where</span> a = <span class=\"string\">'a\\0'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> *</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> FixedStringTest</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> a = <span class=\"string\">'a\\0'</span></span><br><span class=\"line\"></span><br><span class=\"line\">┌─a─┐</span><br><span class=\"line\">│ a │</span><br><span class=\"line\">└───┘</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> set. Elapsed: <span class=\"number\">0.002</span> sec.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-UUID\"><a href=\"#2-3-UUID\" class=\"headerlink\" title=\"2.3 UUID\"></a>2.3 UUID</h4><p>UUID经常会在数据库中使用，有时候还会作为主键，ClickHouse直接将UUID作为了一种数据类型。UUID一共有32位，格式为<code>8-4-4-4-12</code>,如果UUID类型的字段在写入数据时没有被赋值，则会按照格式用0来填充。ClickHouse还提供了<code>generateUUIDv4</code>来生成随机的UUID。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 1. 创建测试表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> t_uuid (x <span class=\"keyword\">UUID</span>, y <span class=\"keyword\">String</span>) <span class=\"keyword\">ENGINE</span>=TinyLog</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2. 插入UUID</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> t_uuid <span class=\"keyword\">SELECT</span> generateUUIDv4(), <span class=\"string\">'Example 1'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 3. 查询</span></span><br><span class=\"line\">clickhouse-server_1 :) <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> t_uuid</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> *</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> t_uuid</span><br><span class=\"line\"></span><br><span class=\"line\">┌────────────────────────────────────x─┬─y─────────┐</span><br><span class=\"line\">│ a603876a<span class=\"number\">-38</span>cb<span class=\"number\">-460</span>a-bafb-a08d4ab1b9c4 │ Example <span class=\"number\">1</span> │</span><br><span class=\"line\">└──────────────────────────────────────┴───────────┘</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> set. Elapsed: <span class=\"number\">0.002</span> sec. </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 4. 不指定UUID插入数据</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> t_uuid (y) <span class=\"keyword\">VALUES</span> (<span class=\"string\">'Example 2'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询结果</span></span><br><span class=\"line\">clickhouse-server_1 :) <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> t_uuid</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> *</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> t_uuid</span><br><span class=\"line\"></span><br><span class=\"line\">┌────────────────────────────────────x─┬─y─────────┐</span><br><span class=\"line\">│ a603876a<span class=\"number\">-38</span>cb<span class=\"number\">-460</span>a-bafb-a08d4ab1b9c4 │ Example <span class=\"number\">1</span> │</span><br><span class=\"line\">│ <span class=\"number\">00000000</span><span class=\"number\">-0000</span><span class=\"number\">-0000</span><span class=\"number\">-0000</span><span class=\"number\">-000000000000</span> │ Example <span class=\"number\">2</span> │</span><br><span class=\"line\">└──────────────────────────────────────┴───────────┘</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> set. Elapsed: <span class=\"number\">0.002</span> sec.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、时间类型\"><a href=\"#3、时间类型\" class=\"headerlink\" title=\"3、时间类型\"></a>3、时间类型</h3><p>时间类型分为DateTime、DateTime64和Date三种。ClickHouse目前不存在时间戳类型，时间类型的最高精度到秒，所以若需要毫秒、微秒等时间，只能用UInt类型实现</p>\n<h4 id=\"3-1-DateTime\"><a href=\"#3-1-DateTime\" class=\"headerlink\" title=\"3.1 DateTime\"></a>3.1 DateTime</h4><p>DateTime类型精确到秒，可表示的时间范围为<code>[&#39;1970-01-01 00:00:00&#39;, &#39;2105-12-31 23:59:59&#39;]</code>，创建表时，可以为DateTime的列显示设置失去，如果未为表设置失去，启动ClickHouse服务时，它将使用系统设置中的timezone参数，也可以使用<code>--use_client_time_zone</code>参数来启动clickhouse-client，默认格式为<code>YYYY-MM-DD hh:mm:ss</code>输出至，也可以使用<code>formatDateTime</code>函数来更改输出，插入数据时格式则取决于<code>date_time_input_format</code>的设置。</p>\n<p><strong>1. 创建设置了DateTime类型列的表并插入数据</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> dt ( <span class=\"string\">`timestamp`</span> DateTime(<span class=\"string\">'Asia/Shanghai'</span>), <span class=\"string\">`event_id`</span> UInt8 ) <span class=\"keyword\">ENGINE</span> = TinyLog;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 插入数据</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dt <span class=\"keyword\">Values</span> (<span class=\"number\">1546300800</span>, <span class=\"number\">1</span>), (<span class=\"string\">'2020-07-12 00:00:00'</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询数据</span></span><br><span class=\"line\">clickhouse-server_1 :) <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> dt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> *</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> dt</span><br><span class=\"line\"></span><br><span class=\"line\">┌───────────<span class=\"built_in\">timestamp</span>─┬─event_id─┐</span><br><span class=\"line\">│ <span class=\"number\">2019</span><span class=\"number\">-01</span><span class=\"number\">-01</span> <span class=\"number\">08</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span> │        <span class=\"number\">1</span> │</span><br><span class=\"line\">│ <span class=\"number\">2020</span><span class=\"number\">-07</span><span class=\"number\">-12</span> <span class=\"number\">00</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span> │        <span class=\"number\">2</span> │</span><br><span class=\"line\">└─────────────────────┴──────────┘</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> set. Elapsed: <span class=\"number\">0.002</span> sec.</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>将datetime插入为整数时，它会被视为Unix时间戳(UTC)，1546300800表示’2019-01-01 00:00:00’UTC，但由于timestamp列已指定了时区<code>Asia/Shanghai</code>，所以会显示为东八区时间<code>2019-01-01 08:00:00</code></li>\n</ul>\n<p><strong>2. 指定时区删选DateTime值</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> dt <span class=\"keyword\">WHERE</span> <span class=\"built_in\">timestamp</span> = toDateTime(<span class=\"string\">'2020-07-12 00:00:00'</span>, <span class=\"string\">'Asia/Shanghai'</span>)</span><br><span class=\"line\"><span class=\"comment\">-- 结果为</span></span><br><span class=\"line\">┌───────────<span class=\"built_in\">timestamp</span>─┬─event_id─┐</span><br><span class=\"line\">│ <span class=\"number\">2020</span><span class=\"number\">-07</span><span class=\"number\">-12</span> <span class=\"number\">00</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span> │        <span class=\"number\">2</span> │</span><br><span class=\"line\">└─────────────────────┴──────────┘</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 也可通过where字符串值过滤</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> dt <span class=\"keyword\">WHERE</span> <span class=\"built_in\">timestamp</span> = <span class=\"string\">'2020-07-12 00:00:00'</span></span><br><span class=\"line\">┌───────────<span class=\"built_in\">timestamp</span>─┬─event_id─┐</span><br><span class=\"line\">│ <span class=\"number\">2020</span><span class=\"number\">-07</span><span class=\"number\">-12</span> <span class=\"number\">00</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span> │        <span class=\"number\">2</span> │</span><br><span class=\"line\">└─────────────────────┴──────────┘</span><br></pre></td></tr></table></figure>\n\n<p><strong>3. 获取DateTime列和时区类型</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> toDateTime(<span class=\"keyword\">now</span>(), <span class=\"string\">'Asia/Shanghai'</span>) <span class=\"keyword\">AS</span> <span class=\"keyword\">column</span>, toTypeName(<span class=\"keyword\">column</span>) <span class=\"keyword\">AS</span> x</span><br><span class=\"line\"><span class=\"comment\">-- 结果</span></span><br><span class=\"line\">┌──────────────<span class=\"keyword\">column</span>─┬─x─────────────────────────┐</span><br><span class=\"line\">│ <span class=\"number\">2020</span><span class=\"number\">-07</span><span class=\"number\">-12</span> <span class=\"number\">12</span>:<span class=\"number\">41</span>:<span class=\"number\">28</span> │ DateTime(<span class=\"string\">'Asia/Shanghai'</span>) │</span><br><span class=\"line\">└─────────────────────┴───────────────────────────┘</span><br></pre></td></tr></table></figure>\n\n<p><strong>4. 转换列时区</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> toDateTime(<span class=\"built_in\">timestamp</span>, <span class=\"string\">'Europe/London'</span>) <span class=\"keyword\">as</span> lon_time, toDateTime(<span class=\"built_in\">timestamp</span>, <span class=\"string\">'Europe/Moscow'</span>) <span class=\"keyword\">as</span> mos_time <span class=\"keyword\">FROM</span> dt</span><br><span class=\"line\"><span class=\"comment\">-- 结果</span></span><br><span class=\"line\">┌────────────lon_time─┬────────────mos_time─┐</span><br><span class=\"line\">│ <span class=\"number\">2019</span><span class=\"number\">-01</span><span class=\"number\">-01</span> <span class=\"number\">00</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span> │ <span class=\"number\">2019</span><span class=\"number\">-01</span><span class=\"number\">-01</span> <span class=\"number\">03</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span> │</span><br><span class=\"line\">│ <span class=\"number\">2020</span><span class=\"number\">-07</span><span class=\"number\">-11</span> <span class=\"number\">17</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span> │ <span class=\"number\">2020</span><span class=\"number\">-07</span><span class=\"number\">-11</span> <span class=\"number\">19</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span> │</span><br><span class=\"line\">└─────────────────────┴─────────────────────┘</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-DateTime64\"><a href=\"#3-2-DateTime64\" class=\"headerlink\" title=\"3.2 DateTime64\"></a>3.2 DateTime64</h4><p>DateTime64在DateTime类型基础上增加了精度设置，可以记录到亚秒，其余使用方法和DateTime相同。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建测试表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> dt64 (<span class=\"string\">`timestamp`</span> DateTime64(<span class=\"number\">3</span>, <span class=\"string\">'Asia/Shanghai'</span>), <span class=\"string\">`event_id`</span> UInt8 ) <span class=\"keyword\">ENGINE</span> = TinyLog</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 插入测试数据</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> dt64 <span class=\"keyword\">Values</span> (<span class=\"number\">1546300800000</span>, <span class=\"number\">1</span>), (<span class=\"string\">'2019-01-01 00:00:00'</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询结果</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> dt64</span><br><span class=\"line\"><span class=\"comment\">-- 结果为</span></span><br><span class=\"line\">┌───────────────<span class=\"built_in\">timestamp</span>─┬─event_id─┐</span><br><span class=\"line\">│ <span class=\"number\">2019</span><span class=\"number\">-01</span><span class=\"number\">-01</span> <span class=\"number\">08</span>:<span class=\"number\">00</span>:<span class=\"number\">00.000</span> │        <span class=\"number\">1</span> │</span><br><span class=\"line\">│ <span class=\"number\">2019</span><span class=\"number\">-01</span><span class=\"number\">-01</span> <span class=\"number\">00</span>:<span class=\"number\">00</span>:<span class=\"number\">00.000</span> │        <span class=\"number\">2</span> │</span><br><span class=\"line\">└─────────────────────────┴──────────┘</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-Date\"><a href=\"#3-3-Date\" class=\"headerlink\" title=\"3.3 Date\"></a>3.3 Date</h4><p>Date类型不包含具体的时间，只精确到天，存储的日期值不带时区，同样支持字符串的形式写入。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建测试表</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> date_test(<span class=\"string\">`c1`</span> <span class=\"built_in\">Date</span>, <span class=\"string\">`event_id`</span> UInt8 ) <span class=\"keyword\">Engine</span> = TinyLog</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 插入数据，即使插入包含具体时间的值，也只会写入日期</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> date_test <span class=\"keyword\">values</span> (<span class=\"string\">'2019-01-01 00:00:00'</span>, <span class=\"number\">1</span>), (<span class=\"string\">'2020-07-12'</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> date_test</span><br><span class=\"line\"><span class=\"comment\">-- 结果为</span></span><br><span class=\"line\">┌─────────c1─┬─event_id─┐</span><br><span class=\"line\">│ <span class=\"number\">2019</span><span class=\"number\">-01</span><span class=\"number\">-01</span> │        <span class=\"number\">1</span> │</span><br><span class=\"line\">│ <span class=\"number\">2020</span><span class=\"number\">-07</span><span class=\"number\">-12</span> │        <span class=\"number\">2</span> │</span><br><span class=\"line\">└────────────┴──────────┘</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、复合类型\"><a href=\"#三、复合类型\" class=\"headerlink\" title=\"三、复合类型\"></a>三、复合类型</h2><p>除了数值、字符串和时间这些基础数据类型之外，ClickHouse还提供了数组、元组、枚举和嵌套四种复合类型。</p>\n<h3 id=\"1、数组Array\"><a href=\"#1、数组Array\" class=\"headerlink\" title=\"1、数组Array\"></a>1、数组Array</h3><p>数组有两种定义形式：array(T)和[]</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">array</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>) <span class=\"keyword\">as</span> a, toTypeName(a)</span><br><span class=\"line\"><span class=\"comment\">-- 结果</span></span><br><span class=\"line\">┌─a─────┬─toTypeName([<span class=\"number\">1</span>, <span class=\"number\">2</span>])─┐</span><br><span class=\"line\">│ [<span class=\"number\">1</span>,<span class=\"number\">2</span>] │ <span class=\"built_in\">Array</span>(UInt8)       │</span><br><span class=\"line\">└───────┴────────────────────┘</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>] <span class=\"keyword\">as</span> a, toTypeName(a)</span><br><span class=\"line\"><span class=\"comment\">-- 结果</span></span><br><span class=\"line\">┌─a─────┬─toTypeName([<span class=\"number\">1</span>, <span class=\"number\">2</span>])─┐</span><br><span class=\"line\">│ [<span class=\"number\">1</span>,<span class=\"number\">2</span>] │ <span class=\"built_in\">Array</span>(UInt8)       │</span><br><span class=\"line\">└───────┴────────────────────┘</span><br></pre></td></tr></table></figure>\n\n<p>可以看出，在查询时并不需要主动声明数组的元素类型，这是因为ClickHouse的数组拥有类型推断的能力。但在快速创建数组时，ClickHouse会自动将参数定义为最小的可表达的数据类型。例如若数组中存在NULL值，数组元素类型会变为Nullable。<strong>但在进行表定义时，数组需要指定明确的元素类型</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">array</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"literal\">NULL</span>) <span class=\"keyword\">AS</span> x, toTypeName(x)</span><br><span class=\"line\"><span class=\"comment\">-- 结果</span></span><br><span class=\"line\">┌─x──────────┬─toTypeName([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"literal\">NULL</span>])─┐</span><br><span class=\"line\">│ [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"literal\">NULL</span>] │ <span class=\"built_in\">Array</span>(Nullable(UInt8))   │</span><br><span class=\"line\">└────────────┴──────────────────────────┘</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 建表时需要指定类型</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> array_test(c1 <span class=\"built_in\">Array</span>(<span class=\"keyword\">String</span>)) <span class=\"keyword\">engine</span> = TinyLog     <span class=\"comment\">## 可创建成功，数据写入过程中会进行类型检查</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> array_test(c1 <span class=\"built_in\">Array</span>) <span class=\"keyword\">engine</span> = TinyLog     <span class=\"comment\">## 会创建失败</span></span><br><span class=\"line\"><span class=\"comment\">-- 结果</span></span><br><span class=\"line\">Received <span class=\"keyword\">exception</span> <span class=\"keyword\">from</span> <span class=\"keyword\">server</span> (<span class=\"keyword\">version</span> <span class=\"number\">20.3</span><span class=\"number\">.4</span>):</span><br><span class=\"line\">Code: <span class=\"number\">42.</span> DB::<span class=\"keyword\">Exception</span>: Received <span class=\"keyword\">from</span> localhost:<span class=\"number\">9000.</span> DB::<span class=\"keyword\">Exception</span>: <span class=\"built_in\">Array</span> <span class=\"keyword\">data</span> <span class=\"keyword\">type</span> family must have exactly one argument - <span class=\"keyword\">type</span> <span class=\"keyword\">of</span> elements.</span><br></pre></td></tr></table></figure>\n\n<p>当一个数组内包含了多种数据类型，则ClickHouse会引发异常。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">array</span>(<span class=\"number\">1</span>, <span class=\"string\">'a'</span>)</span><br><span class=\"line\"><span class=\"comment\">-- 结果</span></span><br><span class=\"line\">Received <span class=\"keyword\">exception</span> <span class=\"keyword\">from</span> <span class=\"keyword\">server</span> (<span class=\"keyword\">version</span> <span class=\"number\">20.3</span><span class=\"number\">.4</span>):</span><br><span class=\"line\">Code: <span class=\"number\">386.</span> DB::<span class=\"keyword\">Exception</span>: Received <span class=\"keyword\">from</span> localhost:<span class=\"number\">9000.</span> DB::<span class=\"keyword\">Exception</span>: There <span class=\"keyword\">is</span> <span class=\"keyword\">no</span> supertype <span class=\"keyword\">for</span> types UInt8, <span class=\"keyword\">String</span> because <span class=\"keyword\">some</span> <span class=\"keyword\">of</span> them <span class=\"keyword\">are</span> <span class=\"keyword\">String</span>/FixedString <span class=\"keyword\">and</span> <span class=\"keyword\">some</span> <span class=\"keyword\">of</span> them <span class=\"keyword\">are</span> not.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、元组Tuple\"><a href=\"#2、元组Tuple\" class=\"headerlink\" title=\"2、元组Tuple\"></a>2、元组Tuple</h3><p>元组类型有1～n个元素组成，每个元素都是一个单独的类型。与数组类似，元组也可用两种方式定义：tuple(T)或(t1, t2, …)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> tuple(<span class=\"number\">1</span>,<span class=\"string\">'a'</span>) <span class=\"keyword\">AS</span> x, toTypeName(x)</span><br><span class=\"line\"><span class=\"comment\">-- 结果</span></span><br><span class=\"line\">┌─x───────┬─toTypeName(tuple(<span class=\"number\">1</span>, <span class=\"string\">'a'</span>))─┐</span><br><span class=\"line\">│ (<span class=\"number\">1</span>,<span class=\"string\">'a'</span>) │ Tuple(UInt8, <span class=\"keyword\">String</span>)      │</span><br><span class=\"line\">└─────────┴───────────────────────────┘</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> tuple(<span class=\"number\">1</span>, <span class=\"literal\">NULL</span>) <span class=\"keyword\">AS</span> x, toTypeName(x)</span><br><span class=\"line\">┌─x────────┬─toTypeName(tuple(<span class=\"number\">1</span>, <span class=\"literal\">NULL</span>))──────┐</span><br><span class=\"line\">│ (<span class=\"number\">1</span>,<span class=\"literal\">NULL</span>) │ Tuple(UInt8, Nullable(<span class=\"keyword\">Nothing</span>)) │</span><br><span class=\"line\">└──────────┴─────────────────────────────────┘</span><br></pre></td></tr></table></figure>\n\n<p>定义表字段时，同样需要指定明确的元素类型</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> tuple_test ( c1 Tuple(<span class=\"keyword\">String</span>, <span class=\"built_in\">Int8</span>)) <span class=\"keyword\">Engine</span> = TinyLog</span><br><span class=\"line\"><span class=\"comment\">-- 插入数据时也会进行类型检查</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> tuple_test <span class=\"keyword\">values</span>((<span class=\"string\">'abc'</span>, <span class=\"number\">123</span>))    <span class=\"comment\">## 可插入成功</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> tuple_test <span class=\"keyword\">values</span>((<span class=\"string\">'abc'</span>, <span class=\"string\">'def'</span>))\t<span class=\"comment\">## 会提示类型报错</span></span><br><span class=\"line\"><span class=\"comment\">-- 结果</span></span><br><span class=\"line\"><span class=\"keyword\">Exception</span> <span class=\"keyword\">on</span> <span class=\"keyword\">client</span>:</span><br><span class=\"line\">Code: <span class=\"number\">6.</span> DB::<span class=\"keyword\">Exception</span>: Cannot <span class=\"keyword\">parse</span> <span class=\"keyword\">string</span> <span class=\"string\">'def'</span> <span class=\"keyword\">as</span> <span class=\"built_in\">Int8</span>: syntax <span class=\"keyword\">error</span> <span class=\"keyword\">at</span> <span class=\"keyword\">begin</span> <span class=\"keyword\">of</span> string. Note: there <span class=\"keyword\">are</span> toInt8OrZero <span class=\"keyword\">and</span> toInt8OrNull functions, which <span class=\"keyword\">returns</span> zero/<span class=\"literal\">NULL</span> instead <span class=\"keyword\">of</span> throwing exception.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、枚举Enum\"><a href=\"#3、枚举Enum\" class=\"headerlink\" title=\"3、枚举Enum\"></a>3、枚举Enum</h3><p>ClickHouse提供了Enum8和Enum16两种枚举类型，ClickHouse可自动选择Enum插入数据的类型，也可以手动指定。他们仅取值范围不同：</p>\n<ul>\n<li>Enum8包含[-128, 127]范围内列举的256个值-</li>\n<li>Enum16最多包含[-32768, 32767]范围内列举的65536个值</li>\n</ul>\n<p>命名值必须声明为<code>&#39;string: Int&#39;的Key/Value</code>键值对形式，所以Enum8和Enum16分别为<code>(String: Int8)</code>和<code>(String: Int16)</code>.</p>\n<p>在使用枚举类型时，有以下限制：</p>\n<ul>\n<li>Key和Value不允许重复，需保证唯一性</li>\n<li>Key和Value值都不能为Null，但Key允许是空字符串</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建测试表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> t_enum (x Enum(<span class=\"string\">'hello'</span> = <span class=\"number\">1</span>, <span class=\"string\">'world'</span> = <span class=\"number\">2</span>)) <span class=\"keyword\">ENGINE</span> = TinyLog</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 插入数据</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> t_enum <span class=\"keyword\">VALUES</span> (<span class=\"string\">'hello'</span>), (<span class=\"string\">'world'</span>), (<span class=\"string\">'hello'</span>)</span><br><span class=\"line\"><span class=\"comment\">-- 插入成功</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 若插入enum之外的key，则会抛出异常</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> t_enum <span class=\"keyword\">values</span>(<span class=\"string\">'a'</span>)</span><br><span class=\"line\"><span class=\"comment\">-- 结果：</span></span><br><span class=\"line\"><span class=\"keyword\">Exception</span> <span class=\"keyword\">on</span> <span class=\"keyword\">client</span>:</span><br><span class=\"line\">Code: <span class=\"number\">36.</span> DB::<span class=\"keyword\">Exception</span>: <span class=\"literal\">Unknown</span> <span class=\"keyword\">element</span> <span class=\"string\">'a'</span> <span class=\"keyword\">for</span> <span class=\"keyword\">type</span> Enum8(<span class=\"string\">'hello'</span> = <span class=\"number\">1</span>, <span class=\"string\">'world'</span> = <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询数据，会输出字符串类型的Key值</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t_enum</span><br><span class=\"line\">┌─x─────┐</span><br><span class=\"line\">│ hello │</span><br><span class=\"line\">│ world │</span><br><span class=\"line\">│ hello │</span><br><span class=\"line\">└───────┘</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 若需要查看对应的value值，则需要将Enum值转换为整数类型，CAST(x, T)则将x类型转换为T类型</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">CAST</span>(x, <span class=\"string\">'Int8'</span>) <span class=\"keyword\">FROM</span> t_enum</span><br><span class=\"line\">┌─<span class=\"keyword\">CAST</span>(x, <span class=\"string\">'Int8'</span>)─┐</span><br><span class=\"line\">│               <span class=\"number\">1</span> │</span><br><span class=\"line\">│               <span class=\"number\">2</span> │</span><br><span class=\"line\">│               <span class=\"number\">1</span> │</span><br><span class=\"line\">└─────────────────┘</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 若在select中直接创建Enum类型，仍然需要CAST函数转换</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> toTypeName(<span class=\"keyword\">CAST</span>(<span class=\"string\">'hello'</span>, <span class=\"string\">'Enum(\\'</span>hello\\<span class=\"string\">' = 1, \\'</span>world\\<span class=\"string\">' = 2)'</span>))</span><br><span class=\"line\">┌─toTypeName(<span class=\"keyword\">CAST</span>(<span class=\"string\">'hello'</span>, <span class=\"string\">'Enum(\\'</span>hello\\<span class=\"string\">' = 1, \\'</span>world\\<span class=\"string\">' = 2)'</span>))─┐</span><br><span class=\"line\">│ Enum8(<span class=\"string\">'hello'</span> = <span class=\"number\">1</span>, <span class=\"string\">'world'</span> = <span class=\"number\">2</span>)                                 │</span><br><span class=\"line\">└─────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、嵌套Nested\"><a href=\"#4、嵌套Nested\" class=\"headerlink\" title=\"4、嵌套Nested\"></a>4、嵌套Nested</h3><p>一个数据表可以定义任意多个嵌套类型字段，但每个字段只能有一层潜逃，即嵌套字段内不能继续使用嵌套类型。ClickHouse的嵌套类型本质是一个多维数组的结构，即嵌套表中的每个字段都是一个数组。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建测试表</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> nested_test(<span class=\"keyword\">name</span> <span class=\"keyword\">String</span>, age UInt8, dept <span class=\"keyword\">Nested</span>(<span class=\"keyword\">id</span> UInt8, <span class=\"keyword\">name</span> <span class=\"keyword\">String</span>)) <span class=\"keyword\">Engine</span> = TinyLog</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 插入数据</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> nested_test <span class=\"keyword\">values</span> (<span class=\"string\">'alice'</span>, <span class=\"number\">18</span>, [<span class=\"number\">10000</span>, <span class=\"number\">10001</span>], [<span class=\"string\">'aaa'</span>, <span class=\"string\">'bbb'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 插入数据时，同一行数据中嵌套类型的数组字段长度必须相同，否则会抛出以下异常</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> nested_test <span class=\"keyword\">values</span> (<span class=\"string\">'bob'</span>, <span class=\"number\">22</span>, [<span class=\"number\">10000</span>], [<span class=\"string\">'aaa'</span>, <span class=\"string\">'bbb'</span>])</span><br><span class=\"line\">Received <span class=\"keyword\">exception</span> <span class=\"keyword\">from</span> <span class=\"keyword\">server</span> (<span class=\"keyword\">version</span> <span class=\"number\">20.3</span><span class=\"number\">.4</span>):</span><br><span class=\"line\">Code: <span class=\"number\">190.</span> DB::<span class=\"keyword\">Exception</span>: Received <span class=\"keyword\">from</span> localhost:<span class=\"number\">9000.</span> DB::<span class=\"keyword\">Exception</span>: Elements <span class=\"string\">'dept.id'</span> <span class=\"keyword\">and</span> <span class=\"string\">'dept.name'</span> <span class=\"keyword\">of</span> <span class=\"keyword\">Nested</span> <span class=\"keyword\">data</span> structure <span class=\"string\">'dept'</span> (<span class=\"built_in\">Array</span> <span class=\"keyword\">columns</span>) have different <span class=\"built_in\">array</span> sizes.. </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询数据</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">name</span>, dept.id, dept.name <span class=\"keyword\">from</span> nested_test;</span><br><span class=\"line\">┌─name──┬─dept.id─┬─dept.name─────┐</span><br><span class=\"line\">│ alice │ [16,17] │ ['aaa','bbb'] │</span><br><span class=\"line\">└───────┴─────────┴───────────────┘</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、其他类型\"><a href=\"#四、其他类型\" class=\"headerlink\" title=\"四、其他类型\"></a>四、其他类型</h2><p>​    ClickHouse除了上述类型之外，还定义了一些其他字段类型作为对基础数据的进一步修饰和封装。</p>\n<h3 id=\"1、Nullable\"><a href=\"#1、Nullable\" class=\"headerlink\" title=\"1、Nullable\"></a>1、Nullable</h3><p>​    Nullable并不能算一种独立的数据类型，它需要和基础数据类型配合使用，并不能用于数组和元组这些复合类型，通过Nullable修饰之后，该基础类型字段可以输入Null值。</p>\n<p>​    使用了Nullable修饰后，该字段不能作为索引字段，并且会使查询和写入性能变慢。这是由于一般情况下每个字段的数据会存储在对应的column.bin文件中，如果该字段被Nullable修饰，会额外生成column.null.bin文件专门保存null值，这表示读取和写入，需要一倍的额外文件操作。故官方并不建议经常使用Nullable类型</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建测试表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> t_null(x <span class=\"built_in\">Int8</span>, y Nullable(<span class=\"built_in\">Int8</span>)) <span class=\"keyword\">ENGINE</span> TinyLog</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 插入数据</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> t_null <span class=\"keyword\">VALUES</span> (<span class=\"number\">1</span>, <span class=\"literal\">NULL</span>), (<span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> t_null</span><br><span class=\"line\">┌─x─┬────y─┐</span><br><span class=\"line\">│ <span class=\"number\">1</span> │ ᴺᵁᴸᴸ │</span><br><span class=\"line\">│ <span class=\"number\">2</span> │    <span class=\"number\">3</span> │</span><br><span class=\"line\">└───┴──────┘</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、Domain\"><a href=\"#2、Domain\" class=\"headerlink\" title=\"2、Domain\"></a>2、Domain</h3><p>Domain类型分为IPv4和IPv6两种，本质是对整型和字符串型的进一步封装，虽然Domain类型看起来和String类型相同，但它并不是字符串类型，不支持隐式的自动类型转换，如果需要返回IP的字符串形式，需要调用<code>IPv4NumToString</code>或<code>IPv6NumToString</code>函数进行转换。IPv4类型是基于UInt32封装，IPv6基于FixedString(16)封装。他们使用方式相同，以下用IPv4作为示例。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建测试表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> hits (<span class=\"keyword\">url</span> <span class=\"keyword\">String</span>, <span class=\"keyword\">from</span> IPv4) <span class=\"keyword\">ENGINE</span> = MergeTree() <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> <span class=\"keyword\">url</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 插入数据</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> hits <span class=\"keyword\">values</span>(<span class=\"string\">'www.zzdb.com'</span>, <span class=\"string\">'1.1.1.1'</span>),(<span class=\"string\">'test.db.com'</span>, <span class=\"string\">'2.2.2.2'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Domain格式会进行数据类型检查</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> hits <span class=\"keyword\">values</span> (<span class=\"string\">'www.test.com'</span>, <span class=\"string\">'192.168.1'</span>)</span><br><span class=\"line\"><span class=\"keyword\">Exception</span> <span class=\"keyword\">on</span> <span class=\"keyword\">client</span>:</span><br><span class=\"line\">Code: <span class=\"number\">441.</span> DB::<span class=\"keyword\">Exception</span>: Invalid IPv4 value.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询数据</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> hits</span><br><span class=\"line\">┌─<span class=\"keyword\">url</span>──────────┬────<span class=\"keyword\">from</span>─┐</span><br><span class=\"line\">│ test.db.com  │ <span class=\"number\">2.2</span><span class=\"number\">.2</span><span class=\"number\">.2</span> │</span><br><span class=\"line\">│ www.zzdb.com │ <span class=\"number\">1.1</span><span class=\"number\">.1</span><span class=\"number\">.1</span> │</span><br><span class=\"line\">└──────────────┴─────────┘</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 转换为字符串类型</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> toTypeName(s), IPv4NumToString(<span class=\"keyword\">from</span>) <span class=\"keyword\">as</span> s <span class=\"keyword\">FROM</span> hits <span class=\"keyword\">LIMIT</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">┌─toTypeName(IPv4NumToString(from))─┬─s───────┐</span><br><span class=\"line\">│ String                            │ 2.2.2.2 │</span><br><span class=\"line\">└───────────────────────────────────┴─────────┘</span><br></pre></td></tr></table></figure>\n\n","categories":["clickhouse"],"tags":["clickhouse"]},{"title":"ClickHouse存储引擎之MergeTree引擎——索引","url":"/2020/07/05/clickhouse/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/ClickHouse%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B9%8BMergeTree%E5%BC%95%E6%93%8E%E2%80%94%E2%80%94%E7%B4%A2%E5%BC%95/","content":"<h2 id=\"一、一级索引\"><a href=\"#一、一级索引\" class=\"headerlink\" title=\"一、一级索引\"></a>一、一级索引</h2><p>​    MergeTree的主键使用PRIMARY KEY来定义，MergeTree会根据index_granularity间隔(默认8192行)，为数据表生成一级索引并保存到primary.idx文件里，索引数据会按照PRIMARY KEY排序，所以，ClickHouse中经常通过ORDER BY来代替主键。此时，索引(primary.idx)和数据文件(column.bin)会按照相同的规则排序</p>\n<p>​    ClickHouse的一级索引使用了稀疏索引实现，即每一行索引表计对应的是一段数据，而不是一行数据。它使用少量的索引标记就可以记录大量数据的区间位置信息。</p>\n<h3 id=\"1、索引粒度\"><a href=\"#1、索引粒度\" class=\"headerlink\" title=\"1、索引粒度\"></a>1、索引粒度</h3><p>​    ClickHouse通过<code>index_granularity</code>参数来控制索引粒度，默认为8192，最新版本可以使用自适应索引粒度大小，则标记文件会被命名为(column.mrk2)。数据会以该参数的大小被标记为多个小区间，每个区间默认最多8192行数据，MergeTree使用MarkRange来表示一个具体区间，并通过start和end表示具体范围。</p>\n<p>​    在ClickHouse中，索引粒度不仅影响一级索引(primary.idx)，同时也影响数据标记文件(column.mrk)和数据文件(column.bin)。这是由于MergeTree无法只通过索引来完成查询工作，通过标记文件建立以稀疏索引(primary.idx)和对应数据文件(column.bin)的映射关系，MergeTree会先通过稀疏索引(primary.idx)找到对应数据的偏移量信息(column.mrk)，再通过偏移量直接从数据文件(column.bin)读取数据。所以一级索引和数据标记的间隔粒度相同，均有<code>index_granularity</code>参数决定，数据文件也会依据该参数生成压缩数据块。</p>\n<img src=\"/2020/07/05/clickhouse/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/ClickHouse%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B9%8BMergeTree%E5%BC%95%E6%93%8E%E2%80%94%E2%80%94%E7%B4%A2%E5%BC%95/suoyin_1.png\" alt=\"MergeTree按照索引粒度划分数据\" style=\"zoom:50%;\">\n\n<h3 id=\"2、索引数据的生成规则\"><a href=\"#2、索引数据的生成规则\" class=\"headerlink\" title=\"2、索引数据的生成规则\"></a>2、索引数据的生成规则</h3><p>​    MergeTree需要间隔index_granularity行数据才会生成一条索引记录，索引值会依据声明的主键字段来获取。例如官方提供的测试数据表hits_v1使用了年月分区(PARTITION BY toYYYYMM(EventDate))，如果使用CounterID作为主键，则每间隔8192行数据就会取一次CounterID的值作为索引值，索引数据最终写入parimary.idx文件中保存。</p>\n<img src=\"/2020/07/05/clickhouse/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/ClickHouse%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B9%8BMergeTree%E5%BC%95%E6%93%8E%E2%80%94%E2%80%94%E7%B4%A2%E5%BC%95/suoyin_2.png\" style=\"zoom:60%;\">\n\n<p>​    以上是使用单个字段作为主键的情况，若使用多个主键，例<code>ORDER BY(CounterID, EventDate)</code>，则每间隔8192行同时取CounterID和EventDate两列值作为索引，上述例子，索引值将为<code>572014-03-1716352014-03-1832662014-03-19</code></p>\n<h2 id=\"二、索引的查询过程\"><a href=\"#二、索引的查询过程\" class=\"headerlink\" title=\"二、索引的查询过程\"></a>二、索引的查询过程</h2><p>​    MarkRange在ClickHouse中用来定义标记区间，MergeTree按照index_granularity设置的索引粒度，将一段完整的数据划分成了多个小的间隔数据段，一个数据段则是一个MarkRange，它与索引编号对应，使用start和end两个属性表示区间范围，通过start和end对应的索引编号的取值，可以得到它所对应的数值区间，数值区间则表示了该MarkRange的数据范围。</p>\n<p>​    假如一份测试数据，共有192条记录。其中主键ID为String类型，ID取值从A000开始，后面依次为A001、A002…A191。MergeTree的索引粒度为index_granularity=3，根据索引的生成规则，primary.idx文件内的索引数据会为<code>A000A003A006A009A012...A186A189</code></p>\n<p>​    根据索引数据，MergeTree会将此数据片段分为192/3 = 64个小的MarkRange，两个相邻MarkRange相距步长为1，所有MarkRange(整个数据片段)的最大数值区间为[A000, +inf)。MarkRange和数值区间范围示意图如下：</p>\n<img src=\"/2020/07/05/clickhouse/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/ClickHouse%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B9%8BMergeTree%E5%BC%95%E6%93%8E%E2%80%94%E2%80%94%E7%B4%A2%E5%BC%95/suoyin_3.png\" style=\"zoom:60%;\">\n\n<p>​    索引的查询其实为基于主键的查询条件转换的条件区间和MarkRange对应的数值区间这两个区间的交集判断。整个查询过程可分为以下三个步骤：</p>\n<ol>\n<li><p>生成查询条件区间。</p>\n<p>例如：</p>\n<p>条件为 <code>WHERE ID = &#39;A003&#39;</code>,条件区间会转换为<code>[&#39;A003&#39;, &#39;A003&#39;]</code>;</p>\n<p>条件为<code>WHEER ID &gt; &#39;A000&#39;</code>,条件区间会转换为<code>[&#39;A000&#39;, +inf]</code>;</p>\n</li>\n<li><p>递归交集判断：以递归的形式，依次对MarkRange的数值区间与条件区间做交集判断。从最大的MarkRange区间<code>[A000,+inf]</code>开始</p>\n<ol>\n<li>如果不存在交集，则直接去掉整段MarkRange数据</li>\n<li>存在交集，且MarkRange步长大于8(end - start)，则将此区间进一步拆分成8个字区间(由merge_tree_coarse_index_granularity指定，默认为8)，不断重复，做交集判断</li>\n<li>存在交集，并且MarkRange不可被再分解(步长小于8)，则记录MarkRange并返回</li>\n</ol>\n</li>\n<li><p>合并MarkRange区间：将最终匹配的MarkRange聚合</p>\n</li>\n</ol>\n<p>大致流程图如下：</p>\n<img src=\"/2020/07/05/clickhouse/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/ClickHouse%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B9%8BMergeTree%E5%BC%95%E6%93%8E%E2%80%94%E2%80%94%E7%B4%A2%E5%BC%95/suoyin_4.png\" style=\"zoom:80%;\">\n\n<h2 id=\"二、二级索引\"><a href=\"#二、二级索引\" class=\"headerlink\" title=\"二、二级索引\"></a>二、二级索引</h2><p>MergeTree还支持二级索引，但目前还处于测试阶段，官方不建议大量使用。</p>\n<h3 id=\"1、定义方式\"><a href=\"#1、定义方式\" class=\"headerlink\" title=\"1、定义方式\"></a>1、定义方式</h3><p>MergeTree二级索引又叫跳数索引，是由数据按索引粒度分割后的每部分在指定表达式上的汇总信息组成，这些汇总信息有助于用where条件过滤时跳过不满足的数据，从而减少select查询从磁盘读取的数据量以及数据扫描的范围。</p>\n<p>跳数索引默认是关闭的，需要执行<code>SET allow_experimental_data_skipping_indices = 1</code>开启，在创建表时指定，定义语法为：</p>\n<p><code>INDEX index_name expr TYPE index_type(...) GRANULARITY granularity_value</code></p>\n<p>当建表语句中声明了跳数索引，则会额外生成相对应的索引和标记文件(skp_idx_[column].idx和skp_idx_[column].mrk)</p>\n<h3 id=\"2、granularity与index-granularity的关系\"><a href=\"#2、granularity与index-granularity的关系\" class=\"headerlink\" title=\"2、granularity与index_granularity的关系\"></a>2、granularity与index_granularity的关系</h3><p>不同的二级索引中，除了各个索引不同类型的参数以外，都共同拥有granularity参数。对于跳数索引，index_granularity定义了数据粒度，二granularity定义了聚合信息汇总的力度。即granularity定义了一行跳数索引能够跳过多少个index_granularity区间的数据。</p>\n<p>跳数索引的生成规则可以大概解释为：</p>\n<ol>\n<li>按照index_granularity粒度间隔将数据划分为n段，总共有[0, n-1]个区间(n = total_rows / index_granularity，向上取整)</li>\n<li>根据索引定义声明，从0区间开始，一次按照index_granularity粒度从数据中获取聚合信息，每次向前移动1步(n + 1)，聚合信息逐步累加</li>\n<li>当移动到granularity次区间时，则进行数据汇总并生成一行跳数索引数据</li>\n</ol>\n<p><strong>示例：</strong></p>\n<p>以minmax索引为例，它聚合了一个index_granularity区间内的最大和最小数据，假设index_granulariyt=8192且granulariyt=3，则数据按照index_granularity划分为n等份，MergeTree从第0段分区开始，依次获取聚合信息，当获取到第三个分区(granularity=3)，则汇总并生成第一行minmax索引(前3段minmax汇总后取值为[1, 9])，如下图所示：</p>\n<img src=\"/2020/07/05/clickhouse/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/ClickHouse%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B9%8BMergeTree%E5%BC%95%E6%93%8E%E2%80%94%E2%80%94%E7%B4%A2%E5%BC%95/suoyin_5.svg\" style=\"zoom:80%;\">\n\n<h3 id=\"3、跳数索引的类型\"><a href=\"#3、跳数索引的类型\" class=\"headerlink\" title=\"3、跳数索引的类型\"></a>3、跳数索引的类型</h3><p>​    目前，MergeTree支持4中跳数座因，分别是minmax、set、ngrambf_v1和tokenbf_v1，一张数据表支持同时声明多个跳数索引。</p>\n<ul>\n<li><p><code>minmax</code>：minmax索引记录了一段数据内的最小值和最大值，用于快速跳过无用的数据区间</p>\n<ul>\n<li><code>INDEX a ID TYPE minmax GRANULARITY 5</code> 表示minmax索引会记录每5个index_granularity区间数据中的最大值和最小值</li>\n</ul>\n</li>\n<li><p><code>set</code>：存储指定字段或表达式的唯一值，完整形式为<code>set(max_rows)</code>，max_rows表示在一个index_granularity内，索引最多纪录的数据行数，如果max_rows=0，则表示无限制</p>\n<ul>\n<li><code>INDEX b(length(ID) * 8) TYPE set(100) GRANULARITY 5</code> 表示该索引会记录数据中ID长度*8之后的取值，并且每个index_granularity最多纪录100条</li>\n</ul>\n</li>\n<li><p><code>ngrambf_v1</code>：记录了数据块中n元短语的布隆表过滤器(简单来讲，布隆表过滤器本质是由仅包含0和1位值的列表组成，默认均为0，利用哈希函数对数据值进行处理，并将结果位置上对应位的值改为1，由于存在哈希冲突，所以只能判断不在列表中和可能在列表中)，只支持String和FixedString数据类型，可用于优化like、in、equals、notIn、notEquals的查询性能，完整形式为<code>ngrambf_v1(n, size_of_bloom_filter_in_bytes, number_of_hash_functions, random_seed)</code>，各参数含义为：</p>\n<ul>\n<li>n: token长度，依据n长度将数据切割为token短语</li>\n<li>size_of_bloom_filter_in_bytes: 布隆过滤器的大小</li>\n<li>number_of_hash_functions: 布隆过滤器中使用Hash函数的个数</li>\n<li>random_seed: Hash函数的随机种子</li>\n</ul>\n<p>例如：<code>INDEX c(ID, Code) TYPE ngrambf_v1(3, 256, 2, 0) GRANULARITY 5</code> 表示依照3的粒度将数据切割成短语token，token经过两个Hash函数映射后再被写入，布隆过滤器大小伟256字节</p>\n</li>\n<li><p><code>tokenbf_v1</code>：和ngrambf_v1类似，但它会自动按照非字符、数字的字符串切割token</p>\n</li>\n</ul>\n","categories":["clickhouse"],"tags":["clickhouse","engine","MergeTree"]},{"title":"ClickHouse存储引擎之MergeTree引擎——数据分区","url":"/2020/06/27/clickhouse/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/ClickHouse%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B9%8BMergeTree%E5%BC%95%E6%93%8E%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%88%86%E5%8C%BA/","content":"<p>​    从<a href=\"%5Bhttps://schnappi618.github.io/2020/06/11/clickhouse/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/ClickHouse%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B9%8BMergeTree%E5%BC%95%E6%93%8E%E2%80%94%E2%80%94%E6%A6%82%E8%BF%B0/%5D(https://schnappi618.github.io/2020/06/11/clickhouse/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/ClickHouse%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B9%8BMergeTree%E5%BC%95%E6%93%8E%E2%80%94%E2%80%94%E6%A6%82%E8%BF%B0/)\">ClickHouse存储引擎之MergeTree引擎——概述</a>中可以知道，在MergeTree存储引擎中，数据是以分区目录的形式存放的。基于该原理，在进行数据查询时，可以仅查询最小的分区目录。</p>\n<h2 id=\"一、MergeTree数据分区规则\"><a href=\"#一、MergeTree数据分区规则\" class=\"headerlink\" title=\"一、MergeTree数据分区规则\"></a>一、MergeTree数据分区规则</h2><h3 id=\"1、测试示例\"><a href=\"#1、测试示例\" class=\"headerlink\" title=\"1、测试示例\"></a>1、测试示例</h3><p>​    下面仍然使用上一篇的测试数据来继续说明MergeTree的数据分区方式和规则</p>\n<ol>\n<li>原始数据情况</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 初始化数据后的数据目录如下</span></span><br><span class=\"line\">[root@xxxx partitioned_by_week]<span class=\"comment\"># ll</span></span><br><span class=\"line\">total 4</span><br><span class=\"line\">drwxr-x--- 2 101 101 221 Jun 13 17:18 19991227_1_1_0</span><br><span class=\"line\">drwxr-x--- 2 101 101 221 Jun 13 17:18 20000103_2_2_0</span><br><span class=\"line\">drwxr-x--- 2 101 101  10 Jun 13 17:15 detached</span><br><span class=\"line\">-rw-r----- 1 101 101   1 Jun 13 17:15 format_version.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 目前partitioned_by_week表的数据内容为</span></span><br><span class=\"line\"><span class=\"comment\">## 查询该表的测试数据</span></span><br><span class=\"line\">clickhouse-server_1 :) select * from partitioned_by_week;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT *</span><br><span class=\"line\">FROM partitioned_by_week</span><br><span class=\"line\"></span><br><span class=\"line\">┌──────────d─┬─x─┐</span><br><span class=\"line\">│ 2000-01-03 │ 3 │</span><br><span class=\"line\">└────────────┴───┘</span><br><span class=\"line\">┌──────────d─┬─x─┐</span><br><span class=\"line\">│ 2000-01-01 │ 1 │</span><br><span class=\"line\">│ 2000-01-02 │ 2 │</span><br><span class=\"line\">└────────────┴───┘</span><br><span class=\"line\"></span><br><span class=\"line\">3 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span>. Elapsed: 0.004 sec. </span><br><span class=\"line\"><span class=\"comment\">## 表结构如下</span></span><br><span class=\"line\">clickhouse-server_1 :) show create table partitioned_by_week;</span><br><span class=\"line\"></span><br><span class=\"line\">SHOW CREATE TABLE partitioned_by_week</span><br><span class=\"line\"></span><br><span class=\"line\">┌─statement────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐</span><br><span class=\"line\">│ CREATE TABLE test.partitioned_by_week (`d` Date, `x` UInt8) ENGINE = MergeTree PARTITION BY toMonday(d) ORDER BY x SETTINGS index_granularity = 8192 │</span><br><span class=\"line\">└──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘</span><br><span class=\"line\"></span><br><span class=\"line\">1 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span>. Elapsed: 0.003 sec.</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>插入一条新的数据</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 插入一条新的数据('2000-01-05', 4)</span></span><br><span class=\"line\">clickhouse-server_1 :) <span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> partitioned_by_week (d, x) <span class=\"keyword\">values</span>(<span class=\"string\">'2000-01-05'</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> partitioned_by_week (d, x) <span class=\"keyword\">VALUES</span></span><br><span class=\"line\"></span><br><span class=\"line\">Ok.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> set. Elapsed: <span class=\"number\">0.004</span> sec.</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>数据内容及数据目录如下</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查询数据情况</span></span><br><span class=\"line\">clickhouse-server_1 :) select * from partitioned_by_week</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT *</span><br><span class=\"line\">FROM partitioned_by_week</span><br><span class=\"line\"></span><br><span class=\"line\">┌──────────d─┬─x─┐</span><br><span class=\"line\">│ 2000-01-03 │ 3 │</span><br><span class=\"line\">└────────────┴───┘</span><br><span class=\"line\">┌──────────d─┬─x─┐</span><br><span class=\"line\">│ 2000-01-01 │ 1 │</span><br><span class=\"line\">│ 2000-01-02 │ 2 │</span><br><span class=\"line\">└────────────┴───┘</span><br><span class=\"line\">┌──────────d─┬─x─┐</span><br><span class=\"line\">│ 2000-01-05 │ 4 │</span><br><span class=\"line\">└────────────┴───┘</span><br><span class=\"line\"></span><br><span class=\"line\">4 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span>. Elapsed: 0.009 sec.</span><br><span class=\"line\"><span class=\"comment\"># 查询数据分区情况，active = 1表示启用中</span></span><br><span class=\"line\">clickhouse-server_1 :) SELECT partition,name,active FROM system.parts WHERE table = <span class=\"string\">'partitioned_by_week'</span></span><br><span class=\"line\"></span><br><span class=\"line\">SELECT </span><br><span class=\"line\">    partition, </span><br><span class=\"line\">    name, </span><br><span class=\"line\">    active</span><br><span class=\"line\">FROM system.parts</span><br><span class=\"line\">WHERE table = <span class=\"string\">'partitioned_by_week'</span></span><br><span class=\"line\"></span><br><span class=\"line\">┌─partition──┬─name───────────┬─active─┐</span><br><span class=\"line\">│ 1999-12-27 │ 19991227_1_1_0 │      1 │</span><br><span class=\"line\">│ 2000-01-03 │ 20000103_2_2_0 │      1 │</span><br><span class=\"line\">│ 2000-01-03 │ 20000103_3_3_0 │      1 │</span><br><span class=\"line\">└────────────┴────────────────┴────────┘</span><br><span class=\"line\"></span><br><span class=\"line\">3 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span>. Elapsed: 0.012 sec. </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 数据目录情况</span></span><br><span class=\"line\">[root(host/tjtx148-16-25.58os.org)@tjtx162-17-78 partitioned_by_week]<span class=\"comment\"># ll</span></span><br><span class=\"line\">total 4</span><br><span class=\"line\">drwxr-x--- 2 101 101 221 Jun 13 17:18 19991227_1_1_0</span><br><span class=\"line\">drwxr-x--- 2 101 101 221 Jun 13 17:18 20000103_2_2_0</span><br><span class=\"line\">drwxr-x--- 2 101 101 221 Jun 27 10:20 20000103_3_3_0</span><br><span class=\"line\">drwxr-x--- 2 101 101  10 Jun 13 17:15 detached</span><br><span class=\"line\">-rw-r----- 1 101 101   1 Jun 13 17:15 format_version.txt</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>查询并查看执行计划</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 查询一条数据</span></span><br><span class=\"line\">clickhouse-server_1 :) <span class=\"keyword\">select</span> x <span class=\"keyword\">from</span> partitioned_by_week <span class=\"keyword\">where</span> d = <span class=\"string\">'2000-01-05'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> x</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> partitioned_by_week</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> d = <span class=\"string\">'2000-01-05'</span></span><br><span class=\"line\"></span><br><span class=\"line\">┌─x─┐</span><br><span class=\"line\">│ <span class=\"number\">4</span> │</span><br><span class=\"line\">└───┘</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> set. Elapsed: <span class=\"number\">0.002</span> sec.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2020.06</span><span class=\"number\">.27</span> <span class=\"number\">10</span>:<span class=\"number\">29</span>:<span class=\"number\">58.383307</span> [ <span class=\"number\">81</span> ] &#123;f0a4f689<span class=\"number\">-76</span>f3<span class=\"number\">-4342</span>-ab8f<span class=\"number\">-2e8349</span>ca5970&#125; &lt;Debug&gt; executeQuery: (<span class=\"keyword\">from</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">58492</span>) <span class=\"keyword\">SELECT</span> x <span class=\"keyword\">FROM</span> partitioned_by_week <span class=\"keyword\">WHERE</span> d = <span class=\"string\">'2000-01-05'</span></span><br><span class=\"line\"><span class=\"comment\">-- clickhouse将where条件自动优化为了PREWHERE，用来做数据过滤</span></span><br><span class=\"line\"><span class=\"number\">2020.06</span><span class=\"number\">.27</span> <span class=\"number\">10</span>:<span class=\"number\">29</span>:<span class=\"number\">58.383577</span> [ <span class=\"number\">81</span> ] &#123;f0a4f689<span class=\"number\">-76</span>f3<span class=\"number\">-4342</span>-ab8f<span class=\"number\">-2e8349</span>ca5970&#125; &lt;Debug&gt; InterpreterSelectQuery: MergeTreeWhereOptimizer: condition <span class=\"string\">\"d = '2000-01-05'\"</span> moved <span class=\"keyword\">to</span> PREWHERE</span><br><span class=\"line\"><span class=\"number\">2020.06</span><span class=\"number\">.27</span> <span class=\"number\">10</span>:<span class=\"number\">29</span>:<span class=\"number\">58.383734</span> [ <span class=\"number\">81</span> ] &#123;f0a4f689<span class=\"number\">-76</span>f3<span class=\"number\">-4342</span>-ab8f<span class=\"number\">-2e8349</span>ca5970&#125; &lt;<span class=\"keyword\">Trace</span>&gt; AccessRightsContext (<span class=\"keyword\">default</span>): <span class=\"keyword\">Access</span> granted: <span class=\"keyword\">SELECT</span>(d, x) <span class=\"keyword\">ON</span> test.partitioned_by_week</span><br><span class=\"line\"><span class=\"comment\">-- 没有使用主键索引</span></span><br><span class=\"line\"><span class=\"number\">2020.06</span><span class=\"number\">.27</span> <span class=\"number\">10</span>:<span class=\"number\">29</span>:<span class=\"number\">58.383836</span> [ <span class=\"number\">81</span> ] &#123;f0a4f689<span class=\"number\">-76</span>f3<span class=\"number\">-4342</span>-ab8f<span class=\"number\">-2e8349</span>ca5970&#125; &lt;Debug&gt; test.partitioned_by_week (SelectExecutor): <span class=\"keyword\">Key</span> condition: <span class=\"literal\">unknown</span></span><br><span class=\"line\"><span class=\"comment\">-- 分区索引被启动</span></span><br><span class=\"line\"><span class=\"number\">2020.06</span><span class=\"number\">.27</span> <span class=\"number\">10</span>:<span class=\"number\">29</span>:<span class=\"number\">58.383859</span> [ <span class=\"number\">81</span> ] &#123;f0a4f689<span class=\"number\">-76</span>f3<span class=\"number\">-4342</span>-ab8f<span class=\"number\">-2e8349</span>ca5970&#125; &lt;Debug&gt; test.partitioned_by_week (SelectExecutor): MinMax <span class=\"keyword\">index</span> condition: (<span class=\"keyword\">column</span> <span class=\"number\">0</span> <span class=\"keyword\">in</span> [<span class=\"number\">10961</span>, <span class=\"number\">10961</span>])</span><br><span class=\"line\"><span class=\"comment\">-- 借助date类型的分区索引，本次查询仅扫描了一个分区目录</span></span><br><span class=\"line\"><span class=\"number\">2020.06</span><span class=\"number\">.27</span> <span class=\"number\">10</span>:<span class=\"number\">29</span>:<span class=\"number\">58.383878</span> [ <span class=\"number\">81</span> ] &#123;f0a4f689<span class=\"number\">-76</span>f3<span class=\"number\">-4342</span>-ab8f<span class=\"number\">-2e8349</span>ca5970&#125; &lt;Debug&gt; test.partitioned_by_week (SelectExecutor): Selected <span class=\"number\">1</span> parts <span class=\"keyword\">by</span> <span class=\"built_in\">date</span>, <span class=\"number\">1</span> parts <span class=\"keyword\">by</span> <span class=\"keyword\">key</span>, <span class=\"number\">1</span> marks <span class=\"keyword\">to</span> <span class=\"keyword\">read</span> <span class=\"keyword\">from</span> <span class=\"number\">1</span> ranges</span><br><span class=\"line\"><span class=\"comment\">-- 最终需要读取到内存的预估数据量是1行</span></span><br><span class=\"line\"><span class=\"number\">2020.06</span><span class=\"number\">.27</span> <span class=\"number\">10</span>:<span class=\"number\">29</span>:<span class=\"number\">58.383924</span> [ <span class=\"number\">81</span> ] &#123;f0a4f689<span class=\"number\">-76</span>f3<span class=\"number\">-4342</span>-ab8f<span class=\"number\">-2e8349</span>ca5970&#125; &lt;<span class=\"keyword\">Trace</span>&gt; test.partitioned_by_week (SelectExecutor): Reading approx. <span class=\"number\">8192</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">with</span> <span class=\"number\">1</span> streams</span><br><span class=\"line\"><span class=\"number\">2020.06</span><span class=\"number\">.27</span> <span class=\"number\">10</span>:<span class=\"number\">29</span>:<span class=\"number\">58.383968</span> [ <span class=\"number\">81</span> ] &#123;f0a4f689<span class=\"number\">-76</span>f3<span class=\"number\">-4342</span>-ab8f<span class=\"number\">-2e8349</span>ca5970&#125; &lt;<span class=\"keyword\">Trace</span>&gt; InterpreterSelectQuery: FetchColumns -&gt; <span class=\"keyword\">Complete</span></span><br><span class=\"line\"><span class=\"number\">2020.06</span><span class=\"number\">.27</span> <span class=\"number\">10</span>:<span class=\"number\">29</span>:<span class=\"number\">58.384464</span> [ <span class=\"number\">81</span> ] &#123;f0a4f689<span class=\"number\">-76</span>f3<span class=\"number\">-4342</span>-ab8f<span class=\"number\">-2e8349</span>ca5970&#125; &lt;Information&gt; executeQuery: <span class=\"keyword\">Read</span> <span class=\"number\">1</span> <span class=\"keyword\">rows</span>, <span class=\"number\">3.00</span> B <span class=\"keyword\">in</span> <span class=\"number\">0.001</span> sec., <span class=\"number\">915</span> <span class=\"keyword\">rows</span>/sec., <span class=\"number\">2.68</span> KiB/sec.</span><br><span class=\"line\"><span class=\"number\">2020.06</span><span class=\"number\">.27</span> <span class=\"number\">10</span>:<span class=\"number\">29</span>:<span class=\"number\">58.384501</span> [ <span class=\"number\">81</span> ] &#123;f0a4f689<span class=\"number\">-76</span>f3<span class=\"number\">-4342</span>-ab8f<span class=\"number\">-2e8349</span>ca5970&#125; &lt;Debug&gt; MemoryTracker: Peak <span class=\"keyword\">memory</span> <span class=\"keyword\">usage</span> (<span class=\"keyword\">for</span> <span class=\"keyword\">query</span>): <span class=\"number\">0.00</span> B.</span><br><span class=\"line\"><span class=\"number\">2020.06</span><span class=\"number\">.27</span> <span class=\"number\">10</span>:<span class=\"number\">29</span>:<span class=\"number\">58.384574</span> [ <span class=\"number\">81</span> ] &#123;&#125; &lt;Debug&gt; MemoryTracker: Peak <span class=\"keyword\">memory</span> <span class=\"keyword\">usage</span> (total): <span class=\"number\">0.00</span> B.</span><br><span class=\"line\"><span class=\"number\">2020.06</span><span class=\"number\">.27</span> <span class=\"number\">10</span>:<span class=\"number\">29</span>:<span class=\"number\">58.384595</span> [ <span class=\"number\">81</span> ] &#123;&#125; &lt;Information&gt; TCPHandler: Processed <span class=\"keyword\">in</span> <span class=\"number\">0.002</span> sec.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、MergeTree数据分区规则\"><a href=\"#2、MergeTree数据分区规则\" class=\"headerlink\" title=\"2、MergeTree数据分区规则\"></a>2、MergeTree数据分区规则</h3><p>​    从插入数据过程中，数据分区目录的变化可以看出，MergeTree的分区目录不是在表创建的时候就存在的，而是在写入数据的过程中被创建出来，也就是说如果仅创建了表结构，没有任何数据的时候，是不会有分区目录存在的。</p>\n<ul>\n<li><p>MergeTree数据分区目录命名规则</p>\n<p>利用上面的示例数据，我们可以看到数据目录都是类似于<code>19991227_1_1_0</code>的格式，它们是由MergeTree自己的规则来命名的，规则为<code>PartitionID_MinBlockNum_MaxBlockNum_Level</code></p>\n<p>示例数据中19991227 表示分区目录的ID，1_1 分别表示最小的数据块编号和最大的数据块编号，最后的_0 表示目前分区合并的层级</p>\n</li>\n</ul>\n<hr>\n<p>​    各部分的含义及命名规则如下：</p>\n<ul>\n<li><p><code>PartitionID</code>：MergeTree数据分区的规则是由分区ID来决定，分区ID的值则是由插入数据时分区键的取值来决定的。分区键支持使用任何一个或一组字段表达式来声明，针对取值数据类型的不同，分区ID的生成逻辑目前有四种规则</p>\n<ul>\n<li><p>不指定分区键：如果建表时未指定分区键，则分区ID默认使用all，所有数据都被写入all分区中</p>\n</li>\n<li><p>整型字段：如果分区键取值是整型字段，并且无法转换为YYYYMMDD的格式，则会按照该整型字段的字符形式输出，作为分区ID取值</p>\n</li>\n<li><p>日期类型：如果分区键属于日期格式，或可以转换为YYYYMMDD格式的整型，则按照YYYYMMDD格式化后的字符形式输出，作为分区ID取值</p>\n</li>\n<li><p>其他类型：如果使用其他类似Float、String等类型作为分区键，会通过对其插入数据的128位Hash值作为分区ID的取值  </p>\n</li>\n<li><p><img src=\"/2020/06/27/clickhouse/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/ClickHouse%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B9%8BMergeTree%E5%BC%95%E6%93%8E%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%88%86%E5%8C%BA/fenqu_1.png\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p><code>MinBlockNum</code>和<code>MaxBlockNum</code>：BlockNum是一个整型的自增长型编号，该编号在单张MergeTree表中从1开始全局累加，当有新的分区目录创建后，该值就加1，对新的分区目录来讲，MinBlockNum和MaxBlockNum取值相同。例如上面示例数据为<code>19991227_1_1_0</code>和<code>20000103_2_2_0</code>，但当分区目录进行合并后，取值规则会发生变化</p>\n</li>\n<li><p><code>Level</code>：表示合并的层级。相当于某个分区被合并的次数，它不是以表全局累加，而是以分区为单位，初始创建的分区，初始值为0，相同分区ID发生合并动作时，在相应分区内累计加1</p>\n</li>\n</ul>\n<h2 id=\"二、MergeTree数据分区合并规则\"><a href=\"#二、MergeTree数据分区合并规则\" class=\"headerlink\" title=\"二、MergeTree数据分区合并规则\"></a>二、MergeTree数据分区合并规则</h2><p>​    示例数据以周为分区，可以看出<code>2000-01-02, 2</code>和<code>2000-01-03, 3</code>两条数据最终产生了两个相同分区ID的数据目录<code>20000103_2_2_0</code>和<code>20000103_3_3_0</code>，由于它们是通过两条不同的sql插入进去的数据，所以，在ClickHouse中，即使数据属于相同分区，不同批次写入的数据，MergeTree都会生成不同的分区目录，对于同一个分区而言，会存在多个分区目录的情况。</p>\n<p>​    MergeTree可以通过分区合并将属于相同分区的多个目录合并为一个新的目录(官方描述在10到15分钟内会进行合并&lt;控制该值的参数目前还未找到&gt;，也可直接执行optimize语句)，已经存在的就目录在之后某个时刻通过后台任务被删除(默认8分钟之后，暂未找到控制该值的参数)。</p>\n<h3 id=\"1、合并分区后的命名规则\"><a href=\"#1、合并分区后的命名规则\" class=\"headerlink\" title=\"1、合并分区后的命名规则\"></a>1、合并分区后的命名规则</h3><p>​    同个分区的数据目录合并后会产生一个新的目录，目录中的索引和数据文件也会进行合并，新目录的命名规则如下：</p>\n<ul>\n<li>PartitionID：分区ID保持不变</li>\n<li>MinBlockNum：取同一个分区内所有目录中最小的MinBlockNum值</li>\n<li>MaxBlockNUm：取同一个分区内所有目录中最大的MaxBlockNum值</li>\n<li>Level：取同一个分区内最大Level值并加1</li>\n</ul>\n<h3 id=\"2、示例\"><a href=\"#2、示例\" class=\"headerlink\" title=\"2、示例\"></a>2、示例</h3><p>​    按照示例的两个数据目录以及合并的命名规则，可以得到新的数据目录中PartitionID仍然为<code>20000103</code>，MinBlockNum取两个目录中该值的最小值为2，MaxBlockNum取该值的最大值为3，Level原目录都为0加1等于1，故合并后的目录名称为<code>20000103_2_3_1</code>。</p>\n<img src=\"/2020/06/27/clickhouse/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/ClickHouse%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B9%8BMergeTree%E5%BC%95%E6%93%8E%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%88%86%E5%8C%BA/fenqu_2.png\" style=\"zoom:50%;\">\n\n<p>​    再次插入一个20000103分区的数据进行合并后的目录名称会为<code>20000103_2_4_2</code>，过程如下：</p>\n<ol>\n<li>插入数据</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 插入一条新的数据</span></span><br><span class=\"line\">clickhouse-server_1 :) <span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> partitioned_by_week(d, x) <span class=\"keyword\">values</span>(<span class=\"string\">'2000-01-04'</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> partitioned_by_week (d, x) <span class=\"keyword\">VALUES</span></span><br><span class=\"line\"></span><br><span class=\"line\">Ok.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> set. Elapsed: <span class=\"number\">0.002</span> sec. </span><br><span class=\"line\"></span><br><span class=\"line\">clickhouse-server_1 :) <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> partitioned_by_week</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> *</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> partitioned_by_week</span><br><span class=\"line\"></span><br><span class=\"line\">┌──────────d─┬─x─┐</span><br><span class=\"line\">│ <span class=\"number\">2000</span><span class=\"number\">-01</span><span class=\"number\">-03</span> │ <span class=\"number\">3</span> │</span><br><span class=\"line\">│ <span class=\"number\">2000</span><span class=\"number\">-01</span><span class=\"number\">-05</span> │ <span class=\"number\">4</span> │</span><br><span class=\"line\">└────────────┴───┘</span><br><span class=\"line\">┌──────────d─┬─x─┐</span><br><span class=\"line\">│ <span class=\"number\">2000</span><span class=\"number\">-01</span><span class=\"number\">-01</span> │ <span class=\"number\">1</span> │</span><br><span class=\"line\">│ <span class=\"number\">2000</span><span class=\"number\">-01</span><span class=\"number\">-02</span> │ <span class=\"number\">2</span> │</span><br><span class=\"line\">└────────────┴───┘</span><br><span class=\"line\">┌──────────d─┬─x─┐</span><br><span class=\"line\">│ <span class=\"number\">2000</span><span class=\"number\">-01</span><span class=\"number\">-04</span> │ <span class=\"number\">4</span> │</span><br><span class=\"line\">└────────────┴───┘</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> set. Elapsed: <span class=\"number\">0.002</span> sec.</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>产生新的数据目录</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@xxxx <span class=\"built_in\">test</span>]<span class=\"comment\"># ll partitioned_by_week/</span></span><br><span class=\"line\">total 4</span><br><span class=\"line\">drwxr-x--- 2 101 101 221 Jun 13 17:18 19991227_1_1_0</span><br><span class=\"line\">drwxr-x--- 2 101 101 221 Jun 27 11:26 20000103_2_3_1</span><br><span class=\"line\">drwxr-x--- 2 101 101 221 Jun 27 12:12 20000103_4_4_0</span><br><span class=\"line\">drwxr-x--- 2 101 101  10 Jun 13 17:15 detached</span><br><span class=\"line\">-rw-r----- 1 101 101   1 Jun 13 17:15 format_version.txt</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>进行合并</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">clickhouse-server_1 :) <span class=\"keyword\">optimize</span> <span class=\"keyword\">table</span> partitioned_by_week</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">OPTIMIZE</span> <span class=\"keyword\">TABLE</span> partitioned_by_week</span><br><span class=\"line\"></span><br><span class=\"line\">Ok.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> set. Elapsed: <span class=\"number\">0.002</span> sec.</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>合并后数据目录发生变化</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 旧数据目录20000103_2_3_1和20000103_4_4_0会在一段时间后被后台删除</span></span><br><span class=\"line\">[root@xxxx <span class=\"built_in\">test</span>]<span class=\"comment\"># ll partitioned_by_week/</span></span><br><span class=\"line\">total 4</span><br><span class=\"line\">drwxr-x--- 2 101 101 221 Jun 13 17:18 19991227_1_1_0</span><br><span class=\"line\">drwxr-x--- 2 101 101 221 Jun 27 11:26 20000103_2_3_1</span><br><span class=\"line\">drwxr-x--- 2 101 101 221 Jun 27 12:14 20000103_2_4_2</span><br><span class=\"line\">drwxr-x--- 2 101 101 221 Jun 27 12:12 20000103_4_4_0</span><br><span class=\"line\">drwxr-x--- 2 101 101  10 Jun 13 17:15 detached</span><br><span class=\"line\">-rw-r----- 1 101 101   1 Jun 13 17:15 format_version.txt</span><br></pre></td></tr></table></figure>\n\n<p>​    可以看到，分区目录发生合并之后，旧分区目录不会被立即删除，此时旧分区目录在<code>system.parts</code>分区详情表中状态会处于未激活状态(active=0)，故查询数据时，这部分分区的数据会被自动过滤。</p>\n","categories":["clickhouse"],"tags":["clickhouse","engine","MergeTree"]},{"title":"ClickHouse存储引擎之MergeTree引擎——概述","url":"/2020/06/11/clickhouse/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/ClickHouse%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B9%8BMergeTree%E5%BC%95%E6%93%8E%E2%80%94%E2%80%94%E6%A6%82%E8%BF%B0/","content":"<h2 id=\"一、MergeTree系列引擎概述\"><a href=\"#一、MergeTree系列引擎概述\" class=\"headerlink\" title=\"一、MergeTree系列引擎概述\"></a>一、MergeTree系列引擎概述</h2><p>​    在ClickHouse中，存储引擎决定了一张表拥有哪些特性以及读写数据的方式等。在所有的存储引擎中，MergeTree及其*MergeTree系列是最强大的表引擎，它适用于一些高负载任务，可以快速插入数据并在后台进行数据处理，还支持了主键索引、分区、数据复制等一些其他引擎不支持的功能。</p>\n<p>​    该类型的引擎包括：</p>\n<ul>\n<li><p>MergeTree</p>\n</li>\n<li><p>Replacing MergeTree</p>\n</li>\n<li><p>Summing MergeTree</p>\n</li>\n<li><p>Aggregating MergeTree</p>\n</li>\n<li><p>Collapsing MergeTree</p>\n</li>\n<li><p>Versioned Collapsing MergeTree</p>\n</li>\n<li><p>Graphite MergeTree</p>\n<p>其中，MergeTree引擎具备了这一系列引擎的基本特征，是<em>MergeTree系列引擎的基础，需要注意的是**</em>MergeTree引擎并不属于*MergeTree系列**</p>\n</li>\n</ul>\n<h2 id=\"二、MergeTree-合并树-引擎\"><a href=\"#二、MergeTree-合并树-引擎\" class=\"headerlink\" title=\"二、MergeTree(合并树)引擎\"></a>二、MergeTree(合并树)引擎</h2><p>​    MergeTree插入的数据会直接写入文件系统，故它仅适用于批量插入数据，而不适合频繁插入单行数据的情况，MergeTree在写入一批数据时，数据会以不可修改的数据片段形式写入到磁盘中，同时为了避免数据片段过多，ClickHouse会通过后台线程，定期合并数据片段，属于相同分区的数据片段会被合并为一个新的片段。</p>\n<h3 id=\"1、创建方式\"><a href=\"#1、创建方式\" class=\"headerlink\" title=\"1、创建方式\"></a>1、创建方式</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- MergeTree引擎表的创建格式为</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> [<span class=\"keyword\">IF</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span>] [db.]table_name [<span class=\"keyword\">ON</span> CLUSTER cluster]</span><br><span class=\"line\">(</span><br><span class=\"line\">    name1 [type1] [<span class=\"keyword\">DEFAULT</span>|<span class=\"keyword\">MATERIALIZED</span>|<span class=\"keyword\">ALIAS</span> expr1] [TTL expr1],</span><br><span class=\"line\">    name2 [type2] [<span class=\"keyword\">DEFAULT</span>|<span class=\"keyword\">MATERIALIZED</span>|<span class=\"keyword\">ALIAS</span> expr2] [TTL expr2],</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">INDEX</span> index_name1 expr1 <span class=\"keyword\">TYPE</span> type1(...) GRANULARITY value1,</span><br><span class=\"line\">    <span class=\"keyword\">INDEX</span> index_name2 expr2 <span class=\"keyword\">TYPE</span> type2(...) GRANULARITY value2</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span> = MergeTree()</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> expr</span><br><span class=\"line\">[<span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> expr]</span><br><span class=\"line\">[PRIMARY <span class=\"keyword\">KEY</span> expr]</span><br><span class=\"line\">[<span class=\"keyword\">SAMPLE</span> <span class=\"keyword\">BY</span> expr]</span><br><span class=\"line\">[TTL expr [<span class=\"keyword\">DELETE</span>|<span class=\"keyword\">TO</span> DISK <span class=\"string\">'xxx'</span>|<span class=\"keyword\">TO</span> VOLUME <span class=\"string\">'xxx'</span>], ...]</span><br><span class=\"line\">[<span class=\"keyword\">SETTINGS</span> <span class=\"keyword\">name</span>=<span class=\"keyword\">value</span>, ...]</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"2、配置参数介绍\"><a href=\"#2、配置参数介绍\" class=\"headerlink\" title=\"2、配置参数介绍\"></a>2、配置参数介绍</h3><ol>\n<li>必填项：</li>\n</ol>\n<ul>\n<li><code>ENGINE</code>：指定使用的引擎。</li>\n<li><code>ORDER BY</code>：排序键，用于指定在一个数据片段内，使用的排序方式。<ul>\n<li>当未指定排序键时，默认会使用主键排序，同样的，当未指定主键时，默认会使用排序键作为主键</li>\n<li>可以是单列名称或多列字段的元组格式。例如：<code>ORDER BY (CounterId)</code>或``ORDER BY (CounterID, EventDate)`</li>\n<li>当使用多列字段排序，例如<code>ORDER BY (CounterID, EventDate)</code>，在单个数据片段内，会先根据CounterID字段排序，CounterID相同的数据再按照EventDate排序</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>可选项：</li>\n</ol>\n<ul>\n<li><code>PARITION BY</code>：分区键</li>\n<li><code>PRIMARY KEY</code>：主键，指定后会按照主键字段生成一级索引，用于加速表查询。默认情况下与<code>ORDER BY</code>子句相同，否则的话主键表达式必须为排序表达式元组的前缀。主键声明后，单个数据片段内会按照主键字段升序排序。<strong>MergeTree主键允许数据重复。</strong></li>\n<li><code>SAMPLE BY</code>：抽样表达式。若指定了该选项，则主键也必须包含它。例如：<code>...ENGINE = MergeTree() ORDER BY (CounterID, EventDate, intHash32(UserID)) SAMPLE BY intHash32(UserID)</code></li>\n<li><code>TTL</code>：数据生存期，用于指定数据的存储时间。<ul>\n<li>表达式中必须包含一个<code>Date</code>或<code>DateTime</code>类型的列，例如：<code>TTL date + INTERVAL 1 DAY</code>，默认当表中数据达到这个时间时，会删除对应的数据信息</li>\n<li>也可对满足该表达式的数据进行对应操作，例如：<code>TTL date + INTERVAL 1 MONTH DELETE|TO DISK &#39;xxx&#39;</code>，对满足表达式的数据，表中删除过期的行并移动到指定的磁盘上</li>\n<li>可以指定多个规则的操作，但只能有一个<code>DELETE</code>操作</li>\n</ul>\n</li>\n<li><code>SETTING</code>：控制MergeTree的其他可选参数<ul>\n<li><code>index_granularity</code>：索引粒度，默认值为8192。表示在默认情况下，clickhouse每间隔8192条数据生成一条索引</li>\n<li><code>index_granularity_bytes</code>：索引粒度，早期版本只允许<code>index_granularity</code>参数按照间隔数据条数设置索引粒度，后续版本支持该参数设置数据量大小限制索引粒度，默认值为10M，设置为0表示不启动根据数据量自适应功能</li>\n<li><code>enable_mixed_granularity_parts</code>：表示是否开启自适应限制索引粒度的功能，默认开启</li>\n<li><code>merge_with_ttl_timeout</code>：TTL合并频率的最小时间间隔，默认值为86400(1天)</li>\n<li><code>use_minimalistic_part_header_in_zookeeper</code>：设置数据片段头部在zookeeper中的存储方式</li>\n<li><code>min_merge_bytes_to_use_direct_io</code>：当数据量大于这个值时，使用直接I/O来读取数据并进行合并操作，默认值为10G，设置为0时表示禁用直接I/O</li>\n<li><code>storage_policy</code>：设置存储策略</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"三、MergeTree存储结构\"><a href=\"#三、MergeTree存储结构\" class=\"headerlink\" title=\"三、MergeTree存储结构\"></a>三、MergeTree存储结构</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建测试数据库</span></span><br><span class=\"line\">clickhouse-server_1 :) <span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> test.partitioned_by_week(d <span class=\"built_in\">Date</span>, x UInt8) <span class=\"keyword\">ENGINE</span> = MergeTree <span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> toMonday(d) <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> x;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> test.partitioned_by_week</span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"string\">`d`</span> <span class=\"built_in\">Date</span>, </span><br><span class=\"line\">    <span class=\"string\">`x`</span> UInt8</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">ENGINE</span> = MergeTree</span><br><span class=\"line\"><span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> toMonday(d)</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> x</span><br><span class=\"line\"></span><br><span class=\"line\">Ok.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> set. Elapsed: <span class=\"number\">0.002</span> sec. </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 插入两条测试数据</span></span><br><span class=\"line\">clickhouse-server_1 :) <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> test.partitioned_by_week <span class=\"keyword\">VALUES</span> (<span class=\"string\">'2000-01-01'</span>, <span class=\"number\">1</span>), (<span class=\"string\">'2000-01-02'</span>, <span class=\"number\">2</span>), (<span class=\"string\">'2000-01-03'</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> test.partitioned_by_week <span class=\"keyword\">VALUES</span></span><br><span class=\"line\"></span><br><span class=\"line\">Ok.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> set. Elapsed: <span class=\"number\">0.070</span> sec. </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- test库下的表</span></span><br><span class=\"line\">clickhouse-server_1 :) <span class=\"keyword\">show</span> <span class=\"keyword\">tables</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">TABLES</span></span><br><span class=\"line\"></span><br><span class=\"line\">┌─<span class=\"keyword\">name</span>────────────────┐</span><br><span class=\"line\">│ partitioned_by_week │</span><br><span class=\"line\">└─────────────────────┘</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> set. Elapsed: <span class=\"number\">0.007</span> sec.</span><br></pre></td></tr></table></figure>\n\n<p>​    执行上述操作后，查看clickhouse中test库下的数据目录如下：</p>\n<img src=\"/2020/06/11/clickhouse/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/ClickHouse%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B9%8BMergeTree%E5%BC%95%E6%93%8E%E2%80%94%E2%80%94%E6%A6%82%E8%BF%B0/mergetree1.png\" style=\"zoom:45%;\">\n\n<p>​    可以看出，一张表完整的物理结构由表目录、分区目录、数据文件作为层级组成，他们各自的作用如下：</p>\n<ul>\n<li><p>partition：分区目录</p>\n<ul>\n<li>测试数据中分区目录为<code>19991227_1_1_0</code>和<code>20000103_2_2_0</code>，属于相同分区的数据，会被合并到同一个分区目录中</li>\n</ul>\n</li>\n<li><p>checksums.txt：校验文件</p>\n<ul>\n<li>按二进制格式存储，保存了剩余数据文件的大小及其哈希值，用于快速校验数据文件的完整性和准确性</li>\n</ul>\n</li>\n<li><p>columns.txt：列信息文件</p>\n<ul>\n<li>使用明文存储，用于保存该分区目录下的列字段信息。例如：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@xxxx <span class=\"built_in\">test</span>]<span class=\"comment\"># cat partitioned_by_week/19991227_1_1_0/columns.txt </span></span><br><span class=\"line\">columns format version: 1</span><br><span class=\"line\">2 columns:</span><br><span class=\"line\">`d` Date</span><br><span class=\"line\">`x` UInt8</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>count.txt：计数文件</p>\n<ul>\n<li>使用明文存储，记录保存了当前数据分区目录下的数据行数。例如：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@xxxx <span class=\"built_in\">test</span>]<span class=\"comment\"># cat partitioned_by_week/19991227_1_1_0/count.txt </span></span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>primary.idx：一级索引文件</p>\n<ul>\n<li>使用二进制格式存储。用于存放稀疏索引，一张MergeTree通过ORDER BY或PRIMARY KEY只能声明一个一级索引</li>\n</ul>\n</li>\n<li><p>[column].bin：数据文件</p>\n<ul>\n<li>默认使用LZ4压缩格式存储。用来存放该数据分区的某列的数据。MergeTree采用了列式存储，故每列字段都有独立的bin数据文件，以列名命名。</li>\n</ul>\n</li>\n<li><p>[column].mrk或[column].mrk2：列字段标记文件</p>\n<ul>\n<li>使用二进制格式存储。保存了[column].bin文件的偏移量信息，MergeTree通过该文件建立了primary.idx稀疏索引与[column].bin文件之间的映射关系。它会先通过primary.idx找到对应数据的偏移量信息column.mrk，再通过偏移量直接从[column].bin文件中读取数据。该文件与[column].bin文件一一对应，也是每列字段都有独立的mrk文件，如果使用了自适应大小的索引间隔，会以.mrk2命名</li>\n</ul>\n</li>\n<li><p>partition.dat和minmax_d.idx：分区索引文件</p>\n<ul>\n<li>当使用了分区键，例如<code>PARTITION BY toMonday(d)</code>，便会生成partition.dat和minmax_d.idx索引文件，均适用二进制格式存储。</li>\n<li>partition.dat用于保存当前分区下，分区表达式最终生成的值</li>\n<li>minmax_d.idx用于记录当前分区下，分区字段对应原始数据的最小和最大值</li>\n</ul>\n</li>\n</ul>\n","categories":["clickhouse"],"tags":["clickhouse","engine","MergeTree"]},{"title":"ClickHouse存储引擎之MySQL引擎","url":"/2020/06/09/clickhouse/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/ClickHouse%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B9%8BMySQL%E5%BC%95%E6%93%8E/","content":"<h2 id=\"一、介绍\"><a href=\"#一、介绍\" class=\"headerlink\" title=\"一、介绍\"></a>一、介绍</h2><p>​    ClickHouse提供了MySQL库引擎可以将MySQL中的表映射到ClickHouse中，并允许用户通过clickhouse对数据进行insert和update操作。实际的操作其实都在<strong>MySQL服务器上完成</strong>，MySQL引擎会将查询转换为MySQL语法并发送到MySQL服务器上面并实现数据交互，但无法通过clickhouse对MySQL数据执行rename、create table、alter等操作。</p>\n<h2 id=\"二、使用\"><a href=\"#二、使用\" class=\"headerlink\" title=\"二、使用\"></a>二、使用</h2><h3 id=\"1、ClickHouse建库语法\"><a href=\"#1、ClickHouse建库语法\" class=\"headerlink\" title=\"1、ClickHouse建库语法\"></a>1、ClickHouse建库语法</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">DATABASE</span> [<span class=\"keyword\">IF</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span>] db_name [<span class=\"keyword\">ON</span> CLUSTER cluster]</span><br><span class=\"line\"><span class=\"keyword\">ENGINE</span> = MySQL(<span class=\"string\">'host:port'</span>, <span class=\"string\">'database'</span>, <span class=\"string\">'user'</span>, <span class=\"string\">'password'</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>MySQL引擎参数：</strong></p>\n<ol>\n<li><code>host:port</code>:MySQL地址</li>\n<li><code>database</code>:MySQL数据库名，不指定则表示全部映射</li>\n<li><code>user</code>:使用的用户名</li>\n<li><code>password</code>:用户密码</li>\n</ol>\n<h3 id=\"2、使用示例\"><a href=\"#2、使用示例\" class=\"headerlink\" title=\"2、使用示例\"></a>2、使用示例</h3><h4 id=\"2-1-环境准备\"><a href=\"#2-1-环境准备\" class=\"headerlink\" title=\"2.1 环境准备\"></a>2.1 环境准备</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建映射库，本次使用的clickhouse是由docker启动的，故使用以下命令进入clickhouse客户端</span></span><br><span class=\"line\">[root@xxxx docker_compose]<span class=\"comment\"># docker exec -it 817eeb4e2569 clickhouse-client</span></span><br><span class=\"line\"><span class=\"comment\">-- 用户需有对应操作的权限</span></span><br><span class=\"line\">clickhouse-server_1 :) <span class=\"keyword\">create</span> <span class=\"keyword\">database</span> test_4098 \\</span><br><span class=\"line\">:-] <span class=\"keyword\">ENGINE</span> = MySQL(<span class=\"string\">'x.x.x.x:4098'</span>, <span class=\"string\">'dbzz_dbreport'</span>, \\</span><br><span class=\"line\">:-] <span class=\"string\">'dba'</span>, <span class=\"string\">'xxxxxx'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">DATABASE</span> test_4098</span><br><span class=\"line\"><span class=\"keyword\">ENGINE</span> = MySQL(<span class=\"string\">'x.x.x.x:4098'</span>, <span class=\"string\">'dbzz_dbreport'</span>, <span class=\"string\">'dba'</span>, <span class=\"string\">'xxxxxx'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Ok.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> set. Elapsed: <span class=\"number\">0.030</span> sec. </span><br><span class=\"line\"></span><br><span class=\"line\">clickhouse-server_1 :) <span class=\"keyword\">show</span> <span class=\"keyword\">databases</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">DATABASES</span></span><br><span class=\"line\"></span><br><span class=\"line\">┌─<span class=\"keyword\">name</span>──────┐</span><br><span class=\"line\">│ datasets  │</span><br><span class=\"line\">│ <span class=\"keyword\">default</span>   │</span><br><span class=\"line\">│ <span class=\"keyword\">system</span>    │</span><br><span class=\"line\">│ <span class=\"keyword\">test</span>      │</span><br><span class=\"line\">│ test_4098 │</span><br><span class=\"line\">└───────────┘</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> set. Elapsed: <span class=\"number\">0.002</span> sec. </span><br><span class=\"line\"><span class=\"comment\">-- 创建成功之后在MySQL数据库中执行 show processlist; 可以看到成功创建的连接</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 在对应MySQL库上面创建一个测试表，并插入一条数据</span></span><br><span class=\"line\">(dba:<span class=\"number\">4098</span>)@[dbzz_dbreport]&gt;<span class=\"keyword\">create</span> <span class=\"keyword\">table</span> clickhouse_test_table (</span><br><span class=\"line\">    -&gt; <span class=\"string\">`int_id`</span> <span class=\"built_in\">INT</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">    -&gt; <span class=\"string\">`float`</span> <span class=\"built_in\">FLOAT</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    -&gt; PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"string\">`int_id`</span>));</span><br><span class=\"line\">Query OK, 0 rows affected (0.09 sec)</span><br><span class=\"line\">(dba:4098)@[dbzz_dbreport]&gt;insert into clickhouse_test_table values(1, 2); </span><br><span class=\"line\">Query OK, 1 row affected (0.04 sec)</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2020/06/09/clickhouse/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/ClickHouse%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B9%8BMySQL%E5%BC%95%E6%93%8E/MySQL_engine1.png\" style=\"zoom:33%;\">\n\n<p>​    上图所在的metadata目录是clickhouse的元数据目录，里面记录了所有建库、建表的语句，可以看出本次测试的test_4098库仅有建库语句，表并不是通过clickhouse创建的；上一级的data目录记录了所有库具体的数据文件信息，可看出并没有test_4098和test_4098_ro库相关数据信息。</p>\n<h4 id=\"2-2-clickhouse测试\"><a href=\"#2-2-clickhouse测试\" class=\"headerlink\" title=\"2.2 clickhouse测试\"></a>2.2 clickhouse测试</h4><ul>\n<li>在clickhouse上执行show tables</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># clickhouse对应日志如下，可以看到将show tables语句转换为了SELECT name FROM system.tables WHERE database = 'test_4098'语句</span></span><br><span class=\"line\">2020.06.10 16:10:12.871697 [ 81 ] &#123;3c0db0d4-5f48-4896-8418-6d1e0211a3c8&#125; &lt;Debug&gt; executeQuery: (from 127.0.0.1:55258) SHOW TABLES</span><br><span class=\"line\">2020.06.10 16:10:12.871899 [ 81 ] &#123;3c0db0d4-5f48-4896-8418-6d1e0211a3c8&#125; &lt;Debug&gt; executeQuery: (internal) SELECT name FROM system.tables WHERE database = <span class=\"string\">'test_4098'</span></span><br><span class=\"line\">2020.06.10 16:10:12.872213 [ 81 ] &#123;3c0db0d4-5f48-4896-8418-6d1e0211a3c8&#125; &lt;Trace&gt; AccessRightsContext (default): Access granted: SELECT(database, name) ON system.tables</span><br><span class=\"line\">2020.06.10 16:10:12.872344 [ 81 ] &#123;3c0db0d4-5f48-4896-8418-6d1e0211a3c8&#125; &lt;Trace&gt; InterpreterSelectQuery: FetchColumns -&gt; Complete</span><br><span class=\"line\">2020.06.10 16:10:12.872580 [ 99 ] &#123;3c0db0d4-5f48-4896-8418-6d1e0211a3c8&#125; &lt;Trace&gt; AccessRightsContext (default): Access granted: SHOW ON *.*</span><br><span class=\"line\">2020.06.10 16:10:12.876803 [ 81 ] &#123;3c0db0d4-5f48-4896-8418-6d1e0211a3c8&#125; &lt;Information&gt; executeQuery: Read 27 rows, 1.36 KiB <span class=\"keyword\">in</span> 0.005 sec., 5360 rows/sec., 269.67 KiB/sec.</span><br><span class=\"line\">2020.06.10 16:10:12.876840 [ 81 ] &#123;3c0db0d4-5f48-4896-8418-6d1e0211a3c8&#125; &lt;Debug&gt; MemoryTracker: Peak memory usage (<span class=\"keyword\">for</span> query): 0.00 B.</span><br><span class=\"line\">2020.06.10 16:10:12.876934 [ 81 ] &#123;&#125; &lt;Debug&gt; MemoryTracker: Peak memory usage (total): 0.00 B.</span><br><span class=\"line\">2020.06.10 16:10:12.876956 [ 81 ] &#123;&#125; &lt;Information&gt; TCPHandler: Processed <span class=\"keyword\">in</span> 0.005 sec.</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>clickhouse上查询表中信息</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 执行对应表查询</span></span><br><span class=\"line\">clickhouse-server_1 :) <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> clickhouse_test_table;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> *</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> clickhouse_test_table</span><br><span class=\"line\"></span><br><span class=\"line\">┌─int_id─┬─<span class=\"built_in\">float</span>─┐</span><br><span class=\"line\">│      <span class=\"number\">1</span> │     <span class=\"number\">2</span> │</span><br><span class=\"line\">└────────┴───────┘</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> set. Elapsed: <span class=\"number\">0.034</span> sec. </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- clickhouse日志显示，可以看到会先和对应的MySQL实例建立连接</span></span><br><span class=\"line\"><span class=\"comment\">-- 查询语句被转换为了 SELECT(int_id, float) ON test_4098.clickhouse_test_table </span></span><br><span class=\"line\"><span class=\"number\">2020.06</span><span class=\"number\">.10</span> <span class=\"number\">16</span>:<span class=\"number\">13</span>:<span class=\"number\">14.851866</span> [ <span class=\"number\">81</span> ] &#123;<span class=\"number\">54864811</span><span class=\"number\">-5</span>b01<span class=\"number\">-4</span>f41<span class=\"number\">-9</span>abf-b4280e7c277b&#125; &lt;Debug&gt; executeQuery: (<span class=\"keyword\">from</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">55258</span>) <span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> clickhouse_test_table</span><br><span class=\"line\"><span class=\"number\">2020.06</span><span class=\"number\">.10</span> <span class=\"number\">16</span>:<span class=\"number\">13</span>:<span class=\"number\">14.864183</span> [ <span class=\"number\">81</span> ] &#123;<span class=\"number\">54864811</span><span class=\"number\">-5</span>b01<span class=\"number\">-4</span>f41<span class=\"number\">-9</span>abf-b4280e7c277b&#125; &lt;<span class=\"keyword\">Trace</span>&gt; AccessRightsContext (<span class=\"keyword\">default</span>): <span class=\"keyword\">Access</span> granted: <span class=\"keyword\">SELECT</span>(int_id, <span class=\"built_in\">float</span>) <span class=\"keyword\">ON</span> test_4098.clickhouse_test_table</span><br><span class=\"line\"><span class=\"number\">2020.06</span><span class=\"number\">.10</span> <span class=\"number\">16</span>:<span class=\"number\">13</span>:<span class=\"number\">14.868456</span> [ <span class=\"number\">81</span> ] &#123;<span class=\"number\">54864811</span><span class=\"number\">-5</span>b01<span class=\"number\">-4</span>f41<span class=\"number\">-9</span>abf-b4280e7c277b&#125; &lt;Information&gt; Application: MYSQL: Connecting <span class=\"keyword\">to</span> dbzz_dbreport@<span class=\"number\">10.148</span><span class=\"number\">.16</span><span class=\"number\">.25</span>:<span class=\"number\">4098</span> <span class=\"keyword\">as</span> <span class=\"keyword\">user</span> dba</span><br><span class=\"line\"><span class=\"number\">2020.06</span><span class=\"number\">.10</span> <span class=\"number\">16</span>:<span class=\"number\">13</span>:<span class=\"number\">14.880487</span> [ <span class=\"number\">81</span> ] &#123;<span class=\"number\">54864811</span><span class=\"number\">-5</span>b01<span class=\"number\">-4</span>f41<span class=\"number\">-9</span>abf-b4280e7c277b&#125; &lt;<span class=\"keyword\">Trace</span>&gt; InterpreterSelectQuery: FetchColumns -&gt; <span class=\"keyword\">Complete</span></span><br><span class=\"line\"><span class=\"number\">2020.06</span><span class=\"number\">.10</span> <span class=\"number\">16</span>:<span class=\"number\">13</span>:<span class=\"number\">14.882556</span> [ <span class=\"number\">81</span> ] &#123;<span class=\"number\">54864811</span><span class=\"number\">-5</span>b01<span class=\"number\">-4</span>f41<span class=\"number\">-9</span>abf-b4280e7c277b&#125; &lt;Information&gt; executeQuery: <span class=\"keyword\">Read</span> <span class=\"number\">1</span> <span class=\"keyword\">rows</span>, <span class=\"number\">8.00</span> B <span class=\"keyword\">in</span> <span class=\"number\">0.031</span> sec., <span class=\"number\">32</span> <span class=\"keyword\">rows</span>/sec., <span class=\"number\">261.44</span> B/sec.</span><br><span class=\"line\"><span class=\"number\">2020.06</span><span class=\"number\">.10</span> <span class=\"number\">16</span>:<span class=\"number\">13</span>:<span class=\"number\">14.882602</span> [ <span class=\"number\">81</span> ] &#123;<span class=\"number\">54864811</span><span class=\"number\">-5</span>b01<span class=\"number\">-4</span>f41<span class=\"number\">-9</span>abf-b4280e7c277b&#125; &lt;Debug&gt; MemoryTracker: Peak <span class=\"keyword\">memory</span> <span class=\"keyword\">usage</span> (<span class=\"keyword\">for</span> <span class=\"keyword\">query</span>): <span class=\"number\">0.00</span> B.</span><br><span class=\"line\"><span class=\"number\">2020.06</span><span class=\"number\">.10</span> <span class=\"number\">16</span>:<span class=\"number\">13</span>:<span class=\"number\">14.884205</span> [ <span class=\"number\">81</span> ] &#123;&#125; &lt;Debug&gt; MemoryTracker: Peak <span class=\"keyword\">memory</span> <span class=\"keyword\">usage</span> (total): <span class=\"number\">0.00</span> B.</span><br><span class=\"line\"><span class=\"number\">2020.06</span><span class=\"number\">.10</span> <span class=\"number\">16</span>:<span class=\"number\">13</span>:<span class=\"number\">14.884845</span> [ <span class=\"number\">81</span> ] &#123;&#125; &lt;Information&gt; TCPHandler: Processed <span class=\"keyword\">in</span> <span class=\"number\">0.033</span> sec.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 打开MySQL全日志后，看到所有操作均在MySQL上执行</span></span><br><span class=\"line\"><span class=\"number\">2020</span><span class=\"number\">-06</span><span class=\"number\">-10</span>T08:<span class=\"number\">54</span>:<span class=\"number\">11.541873</span>Z <span class=\"number\">74904749</span> <span class=\"keyword\">Query</span>  <span class=\"keyword\">SELECT</span> TABLE_NAME <span class=\"keyword\">AS</span> table_name,  CREATE_TIME <span class=\"keyword\">AS</span> modification_time  <span class=\"keyword\">FROM</span> INFORMATION_SCHEMA.TABLES  <span class=\"keyword\">WHERE</span> TABLE_SCHEMA = <span class=\"string\">'dbzz_dbreport'</span></span><br><span class=\"line\"><span class=\"number\">2020</span><span class=\"number\">-06</span><span class=\"number\">-10</span>T08:<span class=\"number\">54</span>:<span class=\"number\">11.545698</span>Z <span class=\"number\">74904749</span> <span class=\"keyword\">Query</span>  <span class=\"keyword\">SELECT</span> TABLE_NAME <span class=\"keyword\">AS</span> table_name,  CREATE_TIME <span class=\"keyword\">AS</span> modification_time  <span class=\"keyword\">FROM</span> INFORMATION_SCHEMA.TABLES  <span class=\"keyword\">WHERE</span> TABLE_SCHEMA = <span class=\"string\">'dbzz_dbreport'</span></span><br><span class=\"line\"><span class=\"number\">2020</span><span class=\"number\">-06</span><span class=\"number\">-10</span>T08:<span class=\"number\">54</span>:<span class=\"number\">11.549140</span>Z <span class=\"number\">74904749</span> <span class=\"keyword\">Query</span>  <span class=\"keyword\">SELECT</span> TABLE_NAME <span class=\"keyword\">AS</span> table_name,  CREATE_TIME <span class=\"keyword\">AS</span> modification_time  <span class=\"keyword\">FROM</span> INFORMATION_SCHEMA.TABLES  <span class=\"keyword\">WHERE</span> TABLE_SCHEMA = <span class=\"string\">'dbzz_dbreport'</span></span><br><span class=\"line\"><span class=\"number\">2020</span><span class=\"number\">-06</span><span class=\"number\">-10</span>T08:<span class=\"number\">54</span>:<span class=\"number\">11.552753</span>Z <span class=\"number\">74904749</span> <span class=\"keyword\">Query</span>  <span class=\"keyword\">SELECT</span> TABLE_NAME <span class=\"keyword\">AS</span> table_name,  CREATE_TIME <span class=\"keyword\">AS</span> modification_time  <span class=\"keyword\">FROM</span> INFORMATION_SCHEMA.TABLES  <span class=\"keyword\">WHERE</span> TABLE_SCHEMA = <span class=\"string\">'dbzz_dbreport'</span></span><br><span class=\"line\"><span class=\"number\">2020</span><span class=\"number\">-06</span><span class=\"number\">-10</span>T08:<span class=\"number\">54</span>:<span class=\"number\">11.556415</span>Z <span class=\"number\">75644195</span> <span class=\"keyword\">Query</span>  <span class=\"keyword\">SELECT</span> <span class=\"string\">`int_id`</span>, <span class=\"string\">`float`</span> <span class=\"keyword\">FROM</span> <span class=\"string\">`dbzz_dbreport`</span>.<span class=\"string\">`clickhouse_test_table`</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在clickhouse上插入数据</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 执行对应插入数据操作</span></span><br><span class=\"line\">clickhouse-server_1 :) <span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> clickhouse_test_table <span class=\"keyword\">values</span>(<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> clickhouse_test_table <span class=\"keyword\">VALUES</span></span><br><span class=\"line\"></span><br><span class=\"line\">Ok.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> set. Elapsed: <span class=\"number\">0.042</span> sec.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- clickhouse日志显示：在连接已经存在的情况下，可以看到进行权限检查后执行了insert操作</span></span><br><span class=\"line\"><span class=\"number\">2020.06</span><span class=\"number\">.10</span> <span class=\"number\">16</span>:<span class=\"number\">18</span>:<span class=\"number\">51.172346</span> [ <span class=\"number\">81</span> ] &#123;<span class=\"number\">2</span>a1b1d66-dfed<span class=\"number\">-460e-89</span>fe-e7cc9ae3cfa6&#125; &lt;Debug&gt; executeQuery: (<span class=\"keyword\">from</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">55258</span>) <span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> clickhouse_test_table <span class=\"keyword\">values</span></span><br><span class=\"line\"><span class=\"number\">2020.06</span><span class=\"number\">.10</span> <span class=\"number\">16</span>:<span class=\"number\">18</span>:<span class=\"number\">51.177580</span> [ <span class=\"number\">81</span> ] &#123;<span class=\"number\">2</span>a1b1d66-dfed<span class=\"number\">-460e-89</span>fe-e7cc9ae3cfa6&#125; &lt;<span class=\"keyword\">Trace</span>&gt; AccessRightsContext (<span class=\"keyword\">default</span>): <span class=\"keyword\">Access</span> granted: <span class=\"keyword\">INSERT</span>(int_id, <span class=\"built_in\">float</span>) <span class=\"keyword\">ON</span> test_4098.clickhouse_test_table</span><br><span class=\"line\"><span class=\"number\">2020.06</span><span class=\"number\">.10</span> <span class=\"number\">16</span>:<span class=\"number\">18</span>:<span class=\"number\">51.209389</span> [ <span class=\"number\">81</span> ] &#123;<span class=\"number\">2</span>a1b1d66-dfed<span class=\"number\">-460e-89</span>fe-e7cc9ae3cfa6&#125; &lt;Debug&gt; MemoryTracker: Peak <span class=\"keyword\">memory</span> <span class=\"keyword\">usage</span> (<span class=\"keyword\">for</span> <span class=\"keyword\">query</span>): <span class=\"number\">0.00</span> B.</span><br><span class=\"line\"><span class=\"number\">2020.06</span><span class=\"number\">.10</span> <span class=\"number\">16</span>:<span class=\"number\">18</span>:<span class=\"number\">51.209481</span> [ <span class=\"number\">81</span> ] &#123;&#125; &lt;Debug&gt; MemoryTracker: Peak <span class=\"keyword\">memory</span> <span class=\"keyword\">usage</span> (total): <span class=\"number\">0.00</span> B.</span><br><span class=\"line\"><span class=\"number\">2020.06</span><span class=\"number\">.10</span> <span class=\"number\">16</span>:<span class=\"number\">18</span>:<span class=\"number\">51.209545</span> [ <span class=\"number\">81</span> ] &#123;&#125; &lt;Information&gt; TCPHandler: Processed <span class=\"keyword\">in</span> <span class=\"number\">0.037</span> sec.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 解析MySQL二进制日志，可看出写入操作在MySQL上进行</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\"><span class=\"comment\">/*!*/</span>;</span><br><span class=\"line\"><span class=\"comment\"># at 340</span></span><br><span class=\"line\"><span class=\"comment\">#200610 16:18:51 server id 210894098  end_log_pos 415 CRC32 0x46a5ba76  Table_map: `dbzz_dbreport`.`clickhouse_test_table` mapped to number 2067</span></span><br><span class=\"line\"><span class=\"comment\"># at 415</span></span><br><span class=\"line\"><span class=\"comment\">#200610 16:18:51 server id 210894098  end_log_pos 459 CRC32 0xd8f0a3ac  Write_rows: table id 2067 flags: STMT_END_F</span></span><br><span class=\"line\"><span class=\"comment\">### INSERT INTO `dbzz_dbreport`.`clickhouse_test_table`</span></span><br><span class=\"line\"><span class=\"comment\">### SET</span></span><br><span class=\"line\"><span class=\"comment\">###   @1=3</span></span><br><span class=\"line\"><span class=\"comment\">###   @2=4                   </span></span><br><span class=\"line\"><span class=\"comment\"># at 459</span></span><br><span class=\"line\"><span class=\"comment\">#200610 16:18:51 server id 210894098  end_log_pos 490 CRC32 0xcb88aafc  Xid = 36747174953</span></span><br><span class=\"line\"><span class=\"keyword\">COMMIT</span><span class=\"comment\">/*!*/</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n","categories":["clickhouse"],"tags":["clickhouse","engine"]},{"title":"ClickHouse存储引擎概述","url":"/2020/05/23/clickhouse/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/clickhouse%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E6%A6%82%E8%BF%B0/","content":"<p>本篇内容参考：<a href=\"https://clickhouse.tech/docs/zh/engines/table-engines/\" target=\"_blank\" rel=\"noopener\">clickhouse官方文档</a></p>\n<h2 id=\"一、ClickHouse引擎的作用\"><a href=\"#一、ClickHouse引擎的作用\" class=\"headerlink\" title=\"一、ClickHouse引擎的作用\"></a>一、ClickHouse引擎的作用</h2><p>​    ClickHouse引擎可分为库引擎和表引擎。ClickHouse引擎的作用基本如下：</p>\n<ul>\n<li>数据的存储方式和位置：例如log系列引擎将数据写入在磁盘上，而Special系列的引擎将数据写入在内存上，但Distributed引擎并不存储书籍，仅作为中间件转发</li>\n<li>支持的哪些查询方式：例如log系列引擎不支持update和delete操作</li>\n<li>是否支持并发访问数据，是否可以执行多线程的请求：例如TinyLog引擎不支持并发读取，而Log引擎支持并发读取</li>\n<li>是否可以使用索引：例如log系列引擎并不支持使用索引</li>\n<li>数据如何进行复制：不同的存储引擎进行数据复制的参数完全不同</li>\n</ul>\n<h2 id=\"二、ClickHouse库引擎分类\"><a href=\"#二、ClickHouse库引擎分类\" class=\"headerlink\" title=\"二、ClickHouse库引擎分类\"></a>二、ClickHouse库引擎分类</h2><p>ClickHouse目前支持5种库引擎：</p>\n<ul>\n<li>Ordinary：默认引擎。在该引擎下可以使用任何类型的表引擎</li>\n<li>Dictionary：字典引擎。这种引擎的数据库会自动为所有的数据字典创建它们的数据表</li>\n<li>Memory：内存引擎。用于存放临时数据，这种引擎的数据库下的表只会停留在内存中，不涉及任何磁盘操作，服务重启后数据会被清除</li>\n<li>Lazy：日志引擎。该类数据库只能只用Log系列的表引擎</li>\n<li>MySQL引擎。该类数据库会自动拉取远端MySQL中的数据，并创建MySQL表引擎的数据表。</li>\n</ul>\n<h2 id=\"三、ClickHouse表引擎分类\"><a href=\"#三、ClickHouse表引擎分类\" class=\"headerlink\" title=\"三、ClickHouse表引擎分类\"></a>三、ClickHouse表引擎分类</h2><p>​    ClickHouse提供了大概27种适用于不同情况的表引擎，其中整体大概分为4类，分类大致如下图所示：</p>\n<img src=\"/2020/05/23/clickhouse/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/clickhouse%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E6%A6%82%E8%BF%B0/%E8%A1%A8%E5%BC%95%E6%93%8E.jpeg\" style=\"zoom:30%;\">\n\n<p>​    ClickHouse主要将表引擎分为了四类：</p>\n<ul>\n<li>MergeTree系列是主要适用的存储引擎，几乎可以支持clickhouse的所有功能使用</li>\n<li>Log系列主要适用于快速小表写入，全部读出的场景，但之间仍存在查询性能的区别</li>\n<li>Integration系列主要用于将外部数据导入到clickhosue中，或直接在clickhouse中处理其他的数据。例如之前使用过MySQL表引擎在clickhouse中连接到MySQL数据库，直接针对其数据进行查询</li>\n<li>Special系列大多数是为了一些特殊的场景来进行的处理：例如Distributed本身不存储数据，一般作为中间件执行数据聚合等操作返回给用户；Memory将数据写入到内存中，服务重启数据丢失，一般用来做临时表；Null直接将写入数据丢弃，读取时为空，但适合用来作为视图使用等。</li>\n</ul>\n<p>​    具体每类表引擎中各个引擎的区别及使用方法会在后续文档中分别进行描述，重点会在于MergeTree和log系列。其余引擎会简单描述其适用场景。</p>\n","categories":["clickhouse"],"tags":["clickhouse","engine"]},{"title":"行存与列存的简单对比","url":"/2020/04/25/DB/%E8%A1%8C%E5%AD%98%E4%B8%8E%E5%88%97%E5%AD%98%E7%9A%84%E7%AE%80%E5%8D%95%E5%AF%B9%E6%AF%94/","content":"<h2 id=\"一、行式存储\"><a href=\"#一、行式存储\" class=\"headerlink\" title=\"一、行式存储\"></a>一、行式存储</h2><p>​        一般的事务型数据库(OLTP)基本会增删改查同一行数据，故大多使用了行式存储，所有数据按列名排成一行，可通过主键快速找到对应的那行数据，基本数据存储情况如下表。</p>\n<table>\n<thead>\n<tr>\n<th>编号</th>\n<th>姓名</th>\n<th>年龄</th>\n<th>居住地</th>\n<th>学位</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>张三</td>\n<td>20</td>\n<td>北京</td>\n<td>本科</td>\n</tr>\n<tr>\n<td>2</td>\n<td>李四</td>\n<td>21</td>\n<td>上海</td>\n<td>硕士</td>\n</tr>\n<tr>\n<td>3</td>\n<td>王五</td>\n<td>22</td>\n<td>广州</td>\n<td>博士</td>\n</tr>\n</tbody></table>\n<p>​        物理存储格式基本如下：</p>\n<img src=\"/2020/04/25/DB/%E8%A1%8C%E5%AD%98%E4%B8%8E%E5%88%97%E5%AD%98%E7%9A%84%E7%AE%80%E5%8D%95%E5%AF%B9%E6%AF%94/1.png\" style=\"zoom:50%;\">\n\n<h2 id=\"二、列式存储\"><a href=\"#二、列式存储\" class=\"headerlink\" title=\"二、列式存储\"></a>二、列式存储</h2><p>​        一般OLAP系统需要查询大量的数据，但仅需要关注其中几个列的数据，基于使用情况，一般会使用列式存储。同样的数据按列存储，基本数据存储情况为：</p>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>张三</td>\n<td>李四</td>\n<td>王五</td>\n</tr>\n<tr>\n<td>20</td>\n<td>21</td>\n<td>22</td>\n</tr>\n<tr>\n<td>北京</td>\n<td>上海</td>\n<td>广州</td>\n</tr>\n<tr>\n<td>本科</td>\n<td>硕士</td>\n<td>博士</td>\n</tr>\n</tbody></table>\n<p>​        物理存储格式基本如下：</p>\n<img src=\"/2020/04/25/DB/%E8%A1%8C%E5%AD%98%E4%B8%8E%E5%88%97%E5%AD%98%E7%9A%84%E7%AE%80%E5%8D%95%E5%AF%B9%E6%AF%94/2.png\" style=\"zoom:50%;\">\n\n<h2 id=\"三、读写对比\"><a href=\"#三、读写对比\" class=\"headerlink\" title=\"三、读写对比\"></a>三、读写对比</h2><h3 id=\"1、数据写入\"><a href=\"#1、数据写入\" class=\"headerlink\" title=\"1、数据写入\"></a>1、数据写入</h3><ol>\n<li>按照上述示例结构，行存储写入一条数据仅需一次便可直接完成，并且可以保证数据完整性</li>\n<li>列存储上述示例数据写入一条数据，需要拆成五列进行保存，写入次数比行存储翻了五倍，实际写入时间会更长</li>\n</ol>\n<h3 id=\"2、数据修改\"><a href=\"#2、数据修改\" class=\"headerlink\" title=\"2、数据修改\"></a>2、数据修改</h3><ol>\n<li>若需要修改一条数据，行存储到指定位置写入一次即可，列存储需要定位到多个位置进行写入，按上述示例数据，列存储所需次数仍是行存储的5倍</li>\n</ol>\n<h3 id=\"3、数据读取\"><a href=\"#3、数据读取\" class=\"headerlink\" title=\"3、数据读取\"></a>3、数据读取</h3><ol>\n<li>读取某行数据时，行存储会将该条记录的所有数据读出，若仅需要其中某列的数据，则存在了数据冗余，通常会消耗内存来消除这些冗余列数据</li>\n<li>列存储读取的均为所需要的某一段数据，不存在冗余列的数据</li>\n<li>由于行存储读取的数据包含了多种类型，可能存在数据类型之间的转换从而对数据进行解析，列存储读出的每一段数据的类型均相同，不需要对数据进行类型转换，可以使用不同方法对不同类型进行数据压缩，列存储更有利于对大数据进行分析</li>\n</ol>\n<h2 id=\"四、适用场景\"><a href=\"#四、适用场景\" class=\"headerlink\" title=\"四、适用场景\"></a>四、适用场景</h2><p>​    简单来讲，行存储更适合于OLAP场景，列存储更适合于OLTP场景。</p>\n<p>​    当经常需要对某些行进行增删改，无法进行批处理操作，经常关注整张表的结构和数据而不只是某几列的数据，对获取到的数据也并没有很大二次计算处理的需求，此时更适合使用行存储。</p>\n<p>​    若写数据的操作可以进行批量处理，并且经常需要对读取的数据进行聚合运算分析场景时，更适合使用列存储，这是由于列式存储可以对字段数据进行向量化处理，可以将一个列的一整个字段连续读入CPU cache中，可以利用CPU的向量化处理并进行一些常用的计算等操作。</p>\n<h2 id=\"五、ClickHouse查询写入测试\"><a href=\"#五、ClickHouse查询写入测试\" class=\"headerlink\" title=\"五、ClickHouse查询写入测试\"></a>五、ClickHouse查询写入测试</h2><h3 id=\"1、测试数据导入\"><a href=\"#1、测试数据导入\" class=\"headerlink\" title=\"1、测试数据导入\"></a>1、测试数据导入</h3><p>​        本次ClickHouse使用官方提供的Yandex.Metrica Data测试数据来进行测试，其中包含两张表visit_v1(访问数据)和hits_v1(Yandex.Metrica提供的查询匹配数据)，安装流程可参考<a href=\"https://clickhouse.tech/docs/en/getting_started/example_datasets/metrica/\" target=\"_blank\" rel=\"noopener\">ClickHouse测试数据导入</a>，由于官方提供的导入方式前提为直接安装了clickhouse服务，而之前一直使用docker方式来进行安装，所以这里简单描述docker环境下如何导入测试数据。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用了docker-compose打包了clickhouse镜像</span></span><br><span class=\"line\"><span class=\"comment\">## 1. 下载并解压测试数据</span></span><br><span class=\"line\">[root@xxxx clickhouse]<span class=\"comment\"># curl https://clickhouse-datasets.s3.yandex.net/hits/tsv/hits_v1.tsv.xz | unxz --threads=`nproc` &gt; hits_v1.tsv</span></span><br><span class=\"line\">[root@xxxx clickhouse]<span class=\"comment\"># curl https://clickhouse-datasets.s3.yandex.net/visits/tsv/visits_v1.tsv.xz | unxz --threads=`nproc` &gt; visits_v1.tsv</span></span><br><span class=\"line\"><span class=\"comment\">## 2. 在docker-compose配置文件中volume中添加一个地址和镜像中的对应</span></span><br><span class=\"line\">[root@xxxx docker_compose]<span class=\"comment\"># ll</span></span><br><span class=\"line\">total 28</span><br><span class=\"line\">-rw-r--r--  1 root root 14907 Apr 30 15:49 config.xml</span><br><span class=\"line\">drwxr-xr-x 10  101  101   204 Apr 26 18:56 data</span><br><span class=\"line\">-rw-r--r--  1 root root   733 Apr 26 18:46 docker-compose.yml</span><br><span class=\"line\">drwxr-xr-x  2 root root    80 Apr 30 15:53 <span class=\"built_in\">log</span></span><br><span class=\"line\">drwxr-xr-x  2  101  101    58 Apr 30 15:41 tmp</span><br><span class=\"line\">-rw-r--r--  1 root root  4532 Mar 30 17:43 users.xml</span><br><span class=\"line\">[root@xxxx docker_compose]<span class=\"comment\"># vim docker-compose.yml</span></span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      ... </span><br><span class=\"line\">      - ./tmp:/var/lib/clickhouse/tmp</span><br><span class=\"line\"><span class=\"comment\"># 这里使用tmp目录存放下载的测试数据，映射到镜像中的/var/lib/clickhouse/tmp目录</span></span><br><span class=\"line\">[root@xxxx docker_compose]<span class=\"comment\"># ll tmp/</span></span><br><span class=\"line\">total 10197044</span><br><span class=\"line\">-rw-r--r-- 1  101  101 7784351125 Apr 26 18:32 hits_v1.tsv</span><br><span class=\"line\">-rw-r--r-- 1 root root 2657415178 Apr 30 15:41 visits_v1.tsv</span><br><span class=\"line\"><span class=\"comment\"># docker clickhouse已经启动，进入docker环境导入数据即可</span></span><br><span class=\"line\">[root(host/tjtx148-16-25.58os.org)@tjtx162-17-78 docker_compose]<span class=\"comment\"># docker ps</span></span><br><span class=\"line\">CONTAINER ID        IMAGE                                                     COMMAND                  CREATED             STATUS                 PORTS                                                                              NAMES</span><br><span class=\"line\">968b926da80b        clickhouse-server-demo:1.0                                <span class=\"string\">\"/entrypoint.sh\"</span>         3 days ago          Up 3 days              0.0.0.0:8123-&gt;8123/tcp, 0.0.0.0:9000-&gt;9000/tcp, 0.0.0.0:9004-&gt;9004/tcp, 9009/tcp   clickhouse-server_1</span><br><span class=\"line\"><span class=\"comment\">## 3. 导入测试数据</span></span><br><span class=\"line\">[root@xxxx docker_compose]<span class=\"comment\"># docker exec -it clickhouse-server_1 /bin/bash</span></span><br><span class=\"line\">root@clickhouse-server_1:/<span class=\"comment\"># ll /var/lib/clickhouse/tmp/</span></span><br><span class=\"line\">total 10197044</span><br><span class=\"line\">drwxr-xr-x  2 clickhouse clickhouse         58 Apr 30 07:41 ./</span><br><span class=\"line\">drwxr-xr-x 10 clickhouse clickhouse        204 Apr 26 10:56 ../</span><br><span class=\"line\">-rw-r--r--  1 clickhouse clickhouse 7784351125 Apr 26 10:32 hits_v1.tsv</span><br><span class=\"line\">-rw-r--r--  1 root       root       2657415178 Apr 30 07:41 visits_v1.tsv</span><br><span class=\"line\">root@clickhouse-server_1:/<span class=\"comment\"># clickhouse-client --query \"CREATE DATABASE IF NOT EXISTS datasets\"</span></span><br><span class=\"line\">... <span class=\"comment\"># 建表语句参考官方文档即可</span></span><br><span class=\"line\"><span class=\"comment\">## 将visiit_v1.tsv测试数据导入，另外一张表hists_v1采用同样方法导入</span></span><br><span class=\"line\">root@clickhouse-server_1:/<span class=\"comment\"># cat visits_v1.tsv | clickhouse-client --query \"INSERT INTO datasets.visits_v1 FORMAT TSV\" --max_insert_block_size=100000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 4. 检验测试数据量</span></span><br><span class=\"line\">root@clickhouse-server_1:/<span class=\"comment\"># clickhouse-client </span></span><br><span class=\"line\">ClickHouse client version 20.3.4.10 (official build).</span><br><span class=\"line\">Connecting to localhost:9000 as user default.</span><br><span class=\"line\">Connected to ClickHouse server version 20.3.4 revision 54433.</span><br><span class=\"line\"></span><br><span class=\"line\">clickhouse-server_1 :) use datasets</span><br><span class=\"line\"></span><br><span class=\"line\">USE datasets</span><br><span class=\"line\"></span><br><span class=\"line\">Ok.</span><br><span class=\"line\"></span><br><span class=\"line\">0 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span>. Elapsed: 0.002 sec. </span><br><span class=\"line\"></span><br><span class=\"line\">clickhouse-server_1 :) select count() from hits_v1;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT count()</span><br><span class=\"line\">FROM hits_v1</span><br><span class=\"line\"></span><br><span class=\"line\">┌─count()─┐</span><br><span class=\"line\">│ 8873898 │</span><br><span class=\"line\">└─────────┘</span><br><span class=\"line\"></span><br><span class=\"line\">1 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span>. Elapsed: 0.008 sec. </span><br><span class=\"line\"></span><br><span class=\"line\">clickhouse-server_1 :) select count() from visits_v1;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT count()</span><br><span class=\"line\">FROM visits_v1</span><br><span class=\"line\"></span><br><span class=\"line\">┌─count()─┐</span><br><span class=\"line\">│ 1676861 │</span><br><span class=\"line\">└─────────┘</span><br><span class=\"line\"></span><br><span class=\"line\">1 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span>. Elapsed: 0.002 sec.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、查询语句测试\"><a href=\"#2、查询语句测试\" class=\"headerlink\" title=\"2、查询语句测试\"></a>2、查询语句测试</h3><p>​        由于clickhouse本身并没有提供查看执行计划的命令，所以只能通过查看日志变相看到SQL语句的执行过程，下面将基于hits_v1表以及官方提供的SQL测试语句结合记录的日志来进行查询语句的测试，并且之后针对clickhouse会基于这两张表持续测试。</p>\n<h4 id=\"1-hits-v1表结构简单介绍\"><a href=\"#1-hits-v1表结构简单介绍\" class=\"headerlink\" title=\"1. hits_v1表结构简单介绍\"></a>1. hits_v1表结构简单介绍</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 这里为了后面的测试，简单介绍hits_v1的表结构，具体关于clickhouse的SQL描述在后面的文章中写出</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> datasets.hits_v1 (<span class=\"string\">`WatchID`</span> UInt64, ...<span class=\"string\">`RequestNum`</span> UInt32, <span class=\"string\">`RequestTry`</span> UInt8) <span class=\"keyword\">ENGINE</span> = MergeTree() <span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> toYYYYMM(EventDate) <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> (CounterID, EventDate, intHash32(UserID)) <span class=\"keyword\">SAMPLE</span> <span class=\"keyword\">BY</span> intHash32(UserID) <span class=\"keyword\">SETTINGS</span> index_granularity = <span class=\"number\">8192</span></span><br></pre></td></tr></table></figure>\n\n<p>clickhouse中create table的基础语法为：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> [<span class=\"keyword\">IF</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span>] [db.]table_name <span class=\"keyword\">ON</span> CLUSTER cluster</span><br><span class=\"line\">(</span><br><span class=\"line\">    name1 [type1] [<span class=\"keyword\">DEFAULT</span>|<span class=\"keyword\">MATERIALIZED</span>|<span class=\"keyword\">ALIAS</span> expr1],</span><br><span class=\"line\">    name2 [type2] [<span class=\"keyword\">DEFAULT</span>|<span class=\"keyword\">MATERIALIZED</span>|<span class=\"keyword\">ALIAS</span> expr2],</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">INDEX</span> index_name1 expr1 <span class=\"keyword\">TYPE</span> type1(...) GRANULARITY value1,</span><br><span class=\"line\">    <span class=\"keyword\">INDEX</span> index_name2 expr2 <span class=\"keyword\">TYPE</span> type2(...) GRANULARITY value2</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span> = engine_name()</span><br><span class=\"line\">[<span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> expr]</span><br><span class=\"line\">[<span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> expr]</span><br><span class=\"line\">[PRIMARY <span class=\"keyword\">KEY</span> expr]</span><br><span class=\"line\">[<span class=\"keyword\">SAMPLE</span> <span class=\"keyword\">BY</span> expr]</span><br><span class=\"line\">[<span class=\"keyword\">SETTINGS</span> <span class=\"keyword\">name</span>=<span class=\"keyword\">value</span>, ...];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 选项描述</span></span><br><span class=\"line\">- db:指定数据库名称，若未指定，默认使用当前数据库</span><br><span class=\"line\">- cluster: clickhouse中包含集群的概念，可对每个集群进行数据分片，创建分布式表，ON CLUSTER表示将在每个分片上都创建这个本地表，默认为default</span><br><span class=\"line\">- type: 该列类型，例如UInt32，clickhouse大小写敏感，类型必须遵守严格的大小写格式</span><br><span class=\"line\">- MATERIALIZED: 表示该列不能被修改，是通过其他列计算出来的数据并保存在表中，查询时并不需要即时计算，所以<span class=\"keyword\">insert</span>时不需要插入该列数据，<span class=\"keyword\">select</span> *查询时该列数据也不会显示</span><br><span class=\"line\">- <span class=\"keyword\">ALIAS</span>: 类似于<span class=\"keyword\">MATERIALIZED</span>参数，但该列数据并不会保存在表中，每次需要时才会进行计算，同样的<span class=\"keyword\">insert</span>不能修改该列数据，<span class=\"keyword\">select</span> *时该列数据也不会显示</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 由于hits_v1测试表使用的是MergeTree引擎，这里剩余参数针对MergeTree进行简单描述，其余引擎未必全部支持，关于各个引擎的描述及适用场景会在之后的文档中分开进行详细描述</span></span><br><span class=\"line\">- <span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span>: 指定分区键，该测试表使用日期进行分区(EventDate)</span><br><span class=\"line\">- <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span>: 指定排序键</span><br><span class=\"line\">- PRIMARY <span class=\"keyword\">KEY</span>: 指定主键，默认与<span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span>相同</span><br><span class=\"line\">- <span class=\"keyword\">SAMPLE</span> <span class=\"keyword\">BY</span>: 抽样表达式</span><br><span class=\"line\">- SETTING: 其他一些参数</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-分组排序查询\"><a href=\"#2-分组排序查询\" class=\"headerlink\" title=\"2. 分组排序查询\"></a>2. 分组排序查询</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># SQL：</span></span><br><span class=\"line\">clickhouse-server_1 :) select CounterID, count() AS c from hits_v1 group by CounterID order by c desc <span class=\"built_in\">limit</span> 10</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT </span><br><span class=\"line\">    CounterID, </span><br><span class=\"line\">    count() AS c</span><br><span class=\"line\">FROM hits_v1</span><br><span class=\"line\">GROUP BY CounterID</span><br><span class=\"line\">ORDER BY c DESC</span><br><span class=\"line\">LIMIT 10</span><br><span class=\"line\"></span><br><span class=\"line\">┌─CounterID─┬──────c─┐</span><br><span class=\"line\">│   1704509 │ 523264 │</span><br><span class=\"line\">│    732797 │ 475698 │</span><br><span class=\"line\">│    598875 │ 337212 │</span><br><span class=\"line\">│    792887 │ 252197 │</span><br><span class=\"line\">│   3807842 │ 196036 │</span><br><span class=\"line\">│  25703952 │ 147211 │</span><br><span class=\"line\">│    716829 │  90109 │</span><br><span class=\"line\">│     59183 │  85379 │</span><br><span class=\"line\">│  33010362 │  77807 │</span><br><span class=\"line\">│    800784 │  77492 │</span><br><span class=\"line\">└───────────┴────────┘</span><br><span class=\"line\"></span><br><span class=\"line\">10 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span>. Elapsed: 0.026 sec. Processed 8.87 million rows, 35.50 MB (339.77 million rows/s., 1.36 GB/s.) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># log</span></span><br><span class=\"line\"><span class=\"comment\">## 1. 查询语句</span></span><br><span class=\"line\">2020.05.03 22:31:49.042192 [ 81 ] &#123;d06708d7-2f0c-489f-96fe-e42012f641f0&#125; &lt;Debug&gt; executeQuery: (from 127.0.0.1:59736) SELECT CounterID, count() AS c FROM hits_v1 GROUP BY CounterID ORDER BY c DESC LIMIT 10</span><br><span class=\"line\"><span class=\"comment\">## 2. 用户权限验证</span></span><br><span class=\"line\">2020.05.03 22:31:49.042790 [ 81 ] &#123;d06708d7-2f0c-489f-96fe-e42012f641f0&#125; &lt;Trace&gt; AccessRightsContext (default): Access granted: SELECT(CounterID) ON datasets.hits_v1</span><br><span class=\"line\"><span class=\"comment\">## 3. 该SQL查询未使用主键索引</span></span><br><span class=\"line\">2020.05.03 22:31:49.042971 [ 81 ] &#123;d06708d7-2f0c-489f-96fe-e42012f641f0&#125; &lt;Debug&gt; datasets.hits_v1 (SelectExecutor): Key condition: unknown</span><br><span class=\"line\"><span class=\"comment\">## 4. 该SQL查询未使用分区索引</span></span><br><span class=\"line\">2020.05.03 22:31:49.042986 [ 81 ] &#123;d06708d7-2f0c-489f-96fe-e42012f641f0&#125; &lt;Debug&gt; datasets.hits_v1 (SelectExecutor): MinMax index condition: unknown</span><br><span class=\"line\"><span class=\"comment\">## 5. 该查询扫描了1个分区目录，共1092个MarkRange（分区目录和MarkRange在MergeTree中的意义还在理解中，后续在MergeTree引擎中详细描述）</span></span><br><span class=\"line\">2020.05.03 22:31:49.043021 [ 81 ] &#123;d06708d7-2f0c-489f-96fe-e42012f641f0&#125; &lt;Debug&gt; datasets.hits_v1 (SelectExecutor): Selected 1 parts by date, 1 parts by key, 1092 marks to <span class=\"built_in\">read</span> from 1 ranges</span><br><span class=\"line\"><span class=\"comment\">## 6. 全表扫描，共8873898条数据，共使用20个stream来进行查询处理数据</span></span><br><span class=\"line\">2020.05.03 22:31:49.043381 [ 81 ] &#123;d06708d7-2f0c-489f-96fe-e42012f641f0&#125; &lt;Trace&gt; datasets.hits_v1 (SelectExecutor): Reading approx. 8873898 rows with 20 streams</span><br><span class=\"line\">2020.05.03 22:31:49.044209 [ 81 ] &#123;d06708d7-2f0c-489f-96fe-e42012f641f0&#125; &lt;Trace&gt; InterpreterSelectQuery: FetchColumns -&gt; Complete</span><br><span class=\"line\">2020.05.03 22:31:49.045627 [ 100 ] &#123;d06708d7-2f0c-489f-96fe-e42012f641f0&#125; &lt;Trace&gt; AggregatingTransform: Aggregating</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">## 7. 每个stream查询的行数，使用时间等信息</span></span><br><span class=\"line\">2020.05.03 22:31:49.050780 [ 100 ] &#123;d06708d7-2f0c-489f-96fe-e42012f641f0&#125; &lt;Trace&gt; AggregatingTransform: Aggregated. 572078 to 5872 rows (from 2.182 MiB) <span class=\"keyword\">in</span> 0.006 sec. (88841051.020 rows/sec., 338.902 MiB/sec.)</span><br><span class=\"line\">2020.05.03 22:31:49.050814 [ 193 ] &#123;d06708d7-2f0c-489f-96fe-e42012f641f0&#125; &lt;Trace&gt; AggregatingTransform: Aggregated. 516096 to 7617 rows (from 1.969 MiB) <span class=\"keyword\">in</span> 0.006 sec. (80547357.953 rows/sec., 307.264 MiB/sec.)</span><br><span class=\"line\">2020.05.03 22:31:49.051022 [ 191 ] &#123;d06708d7-2f0c-489f-96fe-e42012f641f0&#125; &lt;Trace&gt; AggregatingTransform: Aggregated. 450560 to 8195 rows (from 1.719 MiB) <span class=\"keyword\">in</span> 0.007 sec. (68053391.462 rows/sec., 259.603 MiB/sec.)</span><br><span class=\"line\"><span class=\"comment\">## 8. 某一个stream进行数据merge操作</span></span><br><span class=\"line\">2020.05.03 22:31:49.051046 [ 191 ] &#123;d06708d7-2f0c-489f-96fe-e42012f641f0&#125; &lt;Trace&gt; Aggregator: Merging aggregated data</span><br><span class=\"line\"><span class=\"comment\">## 9. 共读取了8873898条数据，共33.85M</span></span><br><span class=\"line\">2020.05.03 22:31:49.066350 [ 81 ] &#123;d06708d7-2f0c-489f-96fe-e42012f641f0&#125; &lt;Information&gt; executeQuery: Read 8873898 rows, 33.85 MiB <span class=\"keyword\">in</span> 0.024 sec., 368641453 rows/sec., 1.37 GiB/sec.</span><br><span class=\"line\">2020.05.03 22:31:49.066415 [ 81 ] &#123;d06708d7-2f0c-489f-96fe-e42012f641f0&#125; &lt;Debug&gt; MemoryTracker: Peak memory usage (<span class=\"keyword\">for</span> query): 0.00 B.</span><br><span class=\"line\"><span class=\"comment\">## 10. 查询共消耗了0.00B内存</span></span><br><span class=\"line\">2020.05.03 22:31:49.066786 [ 81 ] &#123;&#125; &lt;Debug&gt; MemoryTracker: Peak memory usage (total): 0.00 B.</span><br><span class=\"line\"><span class=\"comment\">## 11. 查询共使用了0.025s</span></span><br><span class=\"line\">2020.05.03 22:31:49.066814 [ 81 ] &#123;&#125; &lt;Information&gt; TCPHandler: Processed <span class=\"keyword\">in</span> 0.025 sec.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-使用主键索引\"><a href=\"#3-使用主键索引\" class=\"headerlink\" title=\"3. 使用主键索引\"></a>3. 使用主键索引</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># SQL:</span></span><br><span class=\"line\">clickhouse-server_1 :) SELECT WatchID FROM hits_v1 WHERE CounterID = 67141</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT WatchID</span><br><span class=\"line\">FROM hits_v1</span><br><span class=\"line\">WHERE CounterID = 67141</span><br><span class=\"line\"></span><br><span class=\"line\">┌─────────────WatchID─┐</span><br><span class=\"line\">│ 9092821867385297764 │</span><br><span class=\"line\">│ 6698385316098085730 │</span><br><span class=\"line\">│ 8281386980251669809 │</span><br><span class=\"line\">│ 7804373457861079090 │</span><br><span class=\"line\">│ 5352419935083292124 │</span><br><span class=\"line\">│ 7522442961486322437 │</span><br><span class=\"line\">│ 4926733399374529578 │</span><br><span class=\"line\">│ 8651569660825010330 │</span><br><span class=\"line\">│ 7777215115402859170 │</span><br><span class=\"line\">│ 5488491440763342147 │</span><br><span class=\"line\">│ 7016898938173798841 │</span><br><span class=\"line\">│ 7512073271455311672 │</span><br><span class=\"line\">│ 7675183452718991621 │</span><br><span class=\"line\">│ 7698094942612287474 │</span><br><span class=\"line\">│ 7229580476946423672 │</span><br><span class=\"line\">│ 8265472689024610766 │</span><br><span class=\"line\">│ 7397061429050334296 │</span><br><span class=\"line\">│ 5642502882079177996 │</span><br><span class=\"line\">│ 5521967617262710331 │</span><br><span class=\"line\">│ 6045376808846148744 │</span><br><span class=\"line\">│ 5223813301270698276 │</span><br><span class=\"line\">│ 5891294304736742075 │</span><br><span class=\"line\">│ 7473702977877450342 │</span><br><span class=\"line\">│ 7131227524298036078 │</span><br><span class=\"line\">│ 6397036526472438783 │</span><br><span class=\"line\">│ 5452801867475832050 │</span><br><span class=\"line\">│ 8203620973862900075 │</span><br><span class=\"line\">│ 8228211160680219393 │</span><br><span class=\"line\">│ 5669672267661574263 │</span><br><span class=\"line\">│ 6447542723619820343 │</span><br><span class=\"line\">│ 5609776647750491151 │</span><br><span class=\"line\">│ 5937976217944527938 │</span><br><span class=\"line\">│ 8559139126342788142 │</span><br><span class=\"line\">│ 6731577587255153490 │</span><br><span class=\"line\">│ 7541590813574755789 │</span><br><span class=\"line\">│ 6736741087826610411 │</span><br><span class=\"line\">│ 5750208933466385975 │</span><br><span class=\"line\">│ 6501641543222310031 │</span><br><span class=\"line\">│ 6817897199087131799 │</span><br><span class=\"line\">│ 8775895600472212626 │</span><br><span class=\"line\">│ 7276707177012917444 │</span><br><span class=\"line\">│ 7841417239216625313 │</span><br><span class=\"line\">│ 6708893161493789316 │</span><br><span class=\"line\">│ 5161987475887808662 │</span><br><span class=\"line\">│ 5167052428932424884 │</span><br><span class=\"line\">│ 8512404755681004329 │</span><br><span class=\"line\">│ 5407707620324494582 │</span><br><span class=\"line\">│ 7664508369041326595 │</span><br><span class=\"line\">│ 6437220034025745400 │</span><br><span class=\"line\">│ 5074053444698312956 │</span><br><span class=\"line\">│ 5698931552063656743 │</span><br><span class=\"line\">│ 8826145146896127905 │</span><br><span class=\"line\">└─────────────────────┘</span><br><span class=\"line\"></span><br><span class=\"line\">52 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span>. Elapsed: 0.003 sec. Processed 8.19 thousand rows, 98.30 KB (2.77 million rows/s., 33.19 MB/s.) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># log</span></span><br><span class=\"line\">2020.05.03 22:58:53.011895 [ 82 ] &#123;55122f0e-83a7-454f-abed-870934d0f0a4&#125; &lt;Debug&gt; executeQuery: (from 127.0.0.1:50236) SELECT WatchID FROM hits_v1 WHERE CounterID = 67141</span><br><span class=\"line\">2020.05.03 22:58:53.012824 [ 82 ] &#123;55122f0e-83a7-454f-abed-870934d0f0a4&#125; &lt;Trace&gt; AccessRightsContext (default): Access granted: SELECT(WatchID, CounterID) ON datasets.hits_v1</span><br><span class=\"line\"><span class=\"comment\">## 可以看到该条查询使用了主键索引</span></span><br><span class=\"line\">2020.05.03 22:58:53.012985 [ 82 ] &#123;55122f0e-83a7-454f-abed-870934d0f0a4&#125; &lt;Debug&gt; datasets.hits_v1 (SelectExecutor): Key condition: (column 0 <span class=\"keyword\">in</span> [67141, 67141])</span><br><span class=\"line\">2020.05.03 22:58:53.013000 [ 82 ] &#123;55122f0e-83a7-454f-abed-870934d0f0a4&#125; &lt;Debug&gt; datasets.hits_v1 (SelectExecutor): MinMax index condition: unknown</span><br><span class=\"line\">2020.05.03 22:58:53.013032 [ 82 ] &#123;55122f0e-83a7-454f-abed-870934d0f0a4&#125; &lt;Debug&gt; datasets.hits_v1 (SelectExecutor): Selected 1 parts by date, 1 parts by key, 1 marks to <span class=\"built_in\">read</span> from 1 ranges</span><br><span class=\"line\">2020.05.03 22:58:53.013210 [ 82 ] &#123;55122f0e-83a7-454f-abed-870934d0f0a4&#125; &lt;Trace&gt; datasets.hits_v1 (SelectExecutor): Reading approx. 8192 rows with 1 streams</span><br><span class=\"line\">2020.05.03 22:58:53.013291 [ 82 ] &#123;55122f0e-83a7-454f-abed-870934d0f0a4&#125; &lt;Trace&gt; InterpreterSelectQuery: FetchColumns -&gt; Complete</span><br><span class=\"line\"><span class=\"comment\">## 一共查询了8192行，共96KB</span></span><br><span class=\"line\">2020.05.03 22:58:53.013902 [ 82 ] &#123;55122f0e-83a7-454f-abed-870934d0f0a4&#125; &lt;Information&gt; executeQuery: Read 8192 rows, 96.00 KiB <span class=\"keyword\">in</span> 0.002 sec., 4226200 rows/sec., 48.37 MiB/sec.</span><br><span class=\"line\">2020.05.03 22:58:53.013964 [ 82 ] &#123;55122f0e-83a7-454f-abed-870934d0f0a4&#125; &lt;Debug&gt; MemoryTracker: Peak memory usage (<span class=\"keyword\">for</span> query): 0.00 B.</span><br><span class=\"line\">2020.05.03 22:58:53.014059 [ 82 ] &#123;&#125; &lt;Debug&gt; MemoryTracker: Peak memory usage (total): 0.00 B.</span><br><span class=\"line\"><span class=\"comment\">## 查询一共花费了0.002s</span></span><br><span class=\"line\">2020.05.03 22:58:53.014082 [ 82 ] &#123;&#125; &lt;Information&gt; TCPHandler: Processed <span class=\"keyword\">in</span> 0.002 sec.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、写入语句测试\"><a href=\"#3、写入语句测试\" class=\"headerlink\" title=\"3、写入语句测试\"></a>3、写入语句测试</h3><p>​        这里建立一张临时表，并插入一部分数据，结合log查看列数据库的写入逻辑，clickhouse官方目前未提供SQL查询及写入逻辑流程，并且基于不同的引擎，其写入逻辑有所不同，之后会在不同引擎的测试中对写入逻辑及日志进行详细描述。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 建立临时表：</span></span><br><span class=\"line\"><span class=\"comment\">## SQL:</span></span><br><span class=\"line\">clickhouse-server_1 :) CREATE TABLE mixed_granularity_table (`WatchID` UInt64, `JavaEnable` UInt8, `Title` String, `GoodEvent` Int16, `EventTime` DateTime, `EventDate` Date, `CounterID` UInt32, `ClientIP` UInt32, `ClientIP6` FixedString(16), `RegionID` UInt32, `UserID` UInt64, `CounterClass` Int8, `OS` UInt8, `UserAgent` UInt8, `URL` String, `Referer` String, `URLDomain` String, `RefererDomain` String, `Refresh` UInt8, `IsRobot` UInt8, `RefererCategories` Array(UInt16), `URLCategories` Array(UInt16), `URLRegions` Array(UInt32), `RefererRegions` Array(UInt32), `ResolutionWidth` UInt16, `ResolutionHeight` UInt16, `ResolutionDepth` UInt8, `FlashMajor` UInt8, `FlashMinor` UInt8, `FlashMinor2` String, `NetMajor` UInt8, `NetMinor` UInt8, `UserAgentMajor` UInt16, `UserAgentMinor` FixedString(2), `CookieEnable` UInt8, `JavascriptEnable` UInt8, `IsMobile` UInt8, `MobilePhone` UInt8, `MobilePhoneModel` String, `Params` String, `IPNetworkID` UInt32, `TraficSourceID` Int8, `SearchEngineID` UInt16, `SearchPhrase` String, `AdvEngineID` UInt8, `IsArtifical` UInt8, `WindowClientWidth` UInt16, `WindowClientHeight` UInt16, `ClientTimeZone` Int16, `ClientEventTime` DateTime, `SilverlightVersion1` UInt8, `SilverlightVersion2` UInt8, `SilverlightVersion3` UInt32, `SilverlightVersion4` UInt16, `PageCharset` String, `CodeVersion` UInt32, `IsLink` UInt8, `IsDownload` UInt8, `IsNotBounce` UInt8, `FUniqID` UInt64, `HID` UInt32, `IsOldCounter` UInt8, `IsEvent` UInt8, `IsParameter` UInt8, `DontCountHits` UInt8, `WithHash` UInt8, `HitColor` FixedString(1), `UTCEventTime` DateTime, `Age` UInt8, `Sex` UInt8, `Income` UInt8, `Interests` UInt16, `Robotness` UInt8, `GeneralInterests` Array(UInt16), `RemoteIP` UInt32, `RemoteIP6` FixedString(16), `WindowName` Int32, `OpenerName` Int32, `HistoryLength` Int16, `BrowserLanguage` FixedString(2), `BrowserCountry` FixedString(2), `SocialNetwork` String, `SocialAction` String, `HTTPError` UInt16, `SendTiming` Int32, `DNSTiming` Int32, `ConnectTiming` Int32, `ResponseStartTiming` Int32, `ResponseEndTiming` Int32, `FetchTiming` Int32, `RedirectTiming` Int32, `DOMInteractiveTiming` Int32, `DOMContentLoadedTiming` Int32, `DOMCompleteTiming` Int32, `LoadEventStartTiming` Int32, `LoadEventEndTiming` Int32, `NSToDOMContentLoadedTiming` Int32, `FirstPaintTiming` Int32, `RedirectCount` Int8, `SocialSourceNetworkID` UInt8, `SocialSourcePage` String, `ParamPrice` Int64, `ParamOrderID` String, `ParamCurrency` FixedString(3), `ParamCurrencyID` UInt16, `GoalsReached` Array(UInt32), `OpenstatServiceName` String, `OpenstatCampaignID` String, `OpenstatAdID` String, `OpenstatSourceID` String, `UTMSource` String, `UTMMedium` String, `UTMCampaign` String, `UTMContent` String, `UTMTerm` String, `FromTag` String, `HasGCLID` UInt8, `RefererHash` UInt64, `URLHash` UInt64, `CLID` UInt32, `YCLID` UInt64, `ShareService` String, `ShareURL` String, `ShareTitle` String, `ParsedParams.Key1` Array(String), `ParsedParams.Key2` Array(String), `ParsedParams.Key3` Array(String), `ParsedParams.Key4` Array(String), `ParsedParams.Key5` Array(String), `ParsedParams.ValueDouble` Array(Float64), `IslandID` FixedString(16), `RequestNum` UInt32, `RequestTry` UInt8) ENGINE = MergeTree() PARTITION BY toYYYYMM(EventDate) ORDER BY (CounterID, EventDate, intHash32(UserID)) SAMPLE BY intHash32(UserID) SETTINGS index_granularity=8192, enable_mixed_granularity_parts=1; -- same with hits, but enabled mixed granularity</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">Ok.</span><br><span class=\"line\"></span><br><span class=\"line\">0 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span>. Elapsed: 0.008 sec. </span><br><span class=\"line\"><span class=\"comment\">## log</span></span><br><span class=\"line\"><span class=\"comment\">### 1. 检查建表语句</span></span><br><span class=\"line\">2020.05.03 23:06:08.921921 [ 82 ] &#123;0db543f9-58b2-4765-af63-a5f881246d41&#125; &lt;Debug&gt; executeQuery: (from 127.0.0.1:50236) CREATE TABLE mixed_granularity_table (`WatchID` UInt64, `JavaEnable` UInt8, `Title` String, `GoodEvent` Int16, `EventTime` DateTime, `EventDate` Date, `CounterID` UInt32, `ClientIP` UInt32, `ClientIP6` FixedString(16), `RegionID` UInt32, `UserID` UInt64, `CounterClass` Int8, `OS` UInt8, `UserAgent` UInt8, `URL` String, `Referer` String, `URLDomain` String, `RefererDomain` String, `Refresh` UInt8, `IsRobot` UInt8, `RefererCategories` Array(UInt16), `URLCategories` Array(UInt16), `URLRegions` Array(UInt32), `RefererRegions` Array(UInt32), `ResolutionWidth` UInt16, `ResolutionHeight` UInt16, `ResolutionDepth` UInt8, `FlashMajor` UInt8, `FlashMinor` UInt8, `FlashMinor2` String, `NetMajor` UInt8, `NetMinor` UInt8, `UserAgentMajor` UInt16, `UserAgentMinor` FixedString(2), `CookieEnable` UInt8, `JavascriptEnable` UInt8, `IsMobile` UInt8, `MobilePhone` UInt8, `MobilePhoneModel` String, `Params` String, `IPNetworkID` UInt32, `TraficSourceID` Int8, `SearchEngineID` UInt16, `SearchPhrase` String, `AdvEngineID` UInt8, `IsArtifical` UInt8, `WindowClientWidth` UInt16, `WindowClientHeight` UInt16, `ClientTimeZone` Int16, `ClientEventTime` DateTime, `SilverlightVersion1` UInt8, `SilverlightVersion2` UInt8, `SilverlightVersion3` UInt32, `SilverlightVersion4` UInt16, `PageCharset` String, `CodeVersion` UInt32, `IsLink` UInt8, `IsDownload` UInt8, `IsNotBounce` UInt8, `FUniqID` UInt64, `HID` UInt32, `IsOldCounter` UInt8, `IsEvent` UInt8, `IsParameter` UInt8, `DontCountHits` UInt8, `WithHash` UInt8, `HitColor` FixedString(1), `UTCEventTime` DateTime, `Age` UInt8, `Sex` UInt8, `Income` UInt8, `Interests` UInt16, `Robotness` UInt8, `GeneralInterests` Array(UInt16), `RemoteIP` UInt32, `RemoteIP6` FixedString(16), `WindowName` Int32, `OpenerName` Int32, `HistoryLength` Int16, `BrowserLanguage` FixedString(2), `BrowserCountry` FixedString(2), `SocialNetwork` String, `SocialAction` String, `HTTPError` UInt16, `SendTiming` Int32, `DNSTiming` Int32, `ConnectTiming` Int32, `ResponseStartTiming` Int32, `ResponseEndTiming` Int32, `FetchTiming` Int32, `RedirectTiming` Int32, `DOMInteractiveTiming` Int32, `DOMContentLoadedTiming` Int32, `DOMCompleteTiming` Int32, `LoadEventStartTiming` Int32, `LoadEventEndTiming` Int32, `NSToDOMContentLoadedTiming` Int32, `FirstPaintTiming` Int32, `RedirectCount` Int8, `SocialSourceNetworkID` UInt8, `SocialSourcePage` String, `ParamPrice` Int64, `ParamOrderID` String, `ParamCurrency` FixedString(3), `ParamCurrencyID` UInt16, `GoalsReached` Array(UInt32), `OpenstatServiceName` String, `OpenstatCampaignID` String, `OpenstatAdID` String, `OpenstatSourceID` String, `UTMSource` String, `UTMMedium` String, `UTMCampaign` String, `UTMContent` String, `UTMTerm` String, `FromTag` String, `HasGCLID` UInt8, `RefererHash` UInt64, `URLHash` UInt64, `CLID` UInt32, `YCLID` UInt64, `ShareService` String, `ShareURL` String, `ShareTitle` String, `ParsedParams.Key1` Array(String), `ParsedParams.Key2` Array(String), `ParsedParams.Key3` Array(String), `ParsedParams.Key4` Array(String), `ParsedParams.Key5` Array(String), `ParsedParams.ValueDouble` Array(Float64), `IslandID` FixedString(16), `RequestNum` UInt32, `RequestTry` UInt8) ENGINE = MergeTree() PARTITION BY toYYYYMM(EventDate) ORDER BY (CounterID, EventDate, intHash32(UserID)) SAMPLE BY intHash32(UserID) SETTINGS index_granularity = 8192, enable_mixed_granularity_parts = 1</span><br><span class=\"line\"><span class=\"comment\">### 2. 权限检查</span></span><br><span class=\"line\">2020.05.03 23:06:08.922323 [ 82 ] &#123;0db543f9-58b2-4765-af63-a5f881246d41&#125; &lt;Trace&gt; AccessRightsContext (default): Access granted: CREATE TABLE ON datasets.mixed_granularity_table</span><br><span class=\"line\">2020.05.03 23:06:08.925036 [ 82 ] &#123;0db543f9-58b2-4765-af63-a5f881246d41&#125; &lt;Debug&gt; datasets.mixed_granularity_table: Loading data parts</span><br><span class=\"line\">2020.05.03 23:06:08.925135 [ 82 ] &#123;0db543f9-58b2-4765-af63-a5f881246d41&#125; &lt;Debug&gt; datasets.mixed_granularity_table: Loaded data parts (0 items)</span><br><span class=\"line\">2020.05.03 23:06:08.925992 [ 82 ] &#123;0db543f9-58b2-4765-af63-a5f881246d41&#125; &lt;Debug&gt; MemoryTracker: Peak memory usage (<span class=\"keyword\">for</span> query): 0.00 B.</span><br><span class=\"line\">2020.05.03 23:06:08.926057 [ 82 ] &#123;&#125; &lt;Debug&gt; MemoryTracker: Peak memory usage (total): 0.00 B.</span><br><span class=\"line\">2020.05.03 23:06:08.926089 [ 82 ] &#123;&#125; &lt;Information&gt; TCPHandler: Processed <span class=\"keyword\">in</span> 0.006 sec.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 插入数据：</span></span><br><span class=\"line\"><span class=\"comment\">## SQL:</span></span><br><span class=\"line\">clickhouse-server_1 :) INSERT INTO mixed_granularity_table SELECT * FROM hits_v1 LIMIT 10;</span><br><span class=\"line\"></span><br><span class=\"line\">INSERT INTO mixed_granularity_table SELECT *</span><br><span class=\"line\">FROM hits_v1</span><br><span class=\"line\">LIMIT 10</span><br><span class=\"line\"></span><br><span class=\"line\">↖ Progress: 10.00 rows, 10.85 KB (23.92 rows/s., 25.95 KB/s.)  0%Ok.</span><br><span class=\"line\"></span><br><span class=\"line\">0 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span>. Elapsed: 0.418 sec. </span><br><span class=\"line\"><span class=\"comment\">## log:</span></span><br><span class=\"line\">2020.05.03 23:09:53.387837 [ 82 ] &#123;321f3cb7-467a-4744-8371-29d536f78908&#125; &lt;Debug&gt; executeQuery: (from 127.0.0.1:50236) INSERT INTO mixed_granularity_table SELECT * FROM hits_v1 LIMIT 10</span><br><span class=\"line\"><span class=\"comment\">### 需要进行两次权限检查，对新表mixed_granularity_table的insert权限以及对hits_v1的select权限</span></span><br><span class=\"line\">2020.05.03 23:09:53.388113 [ 82 ] &#123;321f3cb7-467a-4744-8371-29d536f78908&#125; &lt;Trace&gt; AccessRightsContext (default): Access granted: INSERT(WatchID, JavaEnable, ..., RequestTry) ON datasets.mixed_granularity_table</span><br><span class=\"line\">2020.05.03 23:09:53.389910 [ 82 ] &#123;321f3cb7-467a-4744-8371-29d536f78908&#125; &lt;Trace&gt; AccessRightsContext (default): Access granted: SELECT(WatchID, JavaEnable, ..., RequestTry) ON datasets.hits_v1</span><br><span class=\"line\">2020.05.03 23:09:53.390381 [ 82 ] &#123;321f3cb7-467a-4744-8371-29d536f78908&#125; &lt;Debug&gt; datasets.hits_v1 (SelectExecutor): Key condition: unknown</span><br><span class=\"line\">2020.05.03 23:09:53.390396 [ 82 ] &#123;321f3cb7-467a-4744-8371-29d536f78908&#125; &lt;Debug&gt; datasets.hits_v1 (SelectExecutor): MinMax index condition: unknown</span><br><span class=\"line\">2020.05.03 23:09:53.390421 [ 82 ] &#123;321f3cb7-467a-4744-8371-29d536f78908&#125; &lt;Debug&gt; datasets.hits_v1 (SelectExecutor): Selected 1 parts by date, 1 parts by key, 1092 marks to <span class=\"built_in\">read</span> from 1 ranges</span><br><span class=\"line\">2020.05.03 23:09:53.390615 [ 82 ] &#123;321f3cb7-467a-4744-8371-29d536f78908&#125; &lt;Trace&gt; MergeTreeSelectProcessor: Reading 1 ranges from part 201403_1_32_2, approx. 8873898 rows starting from 0</span><br><span class=\"line\">2020.05.03 23:09:53.390711 [ 82 ] &#123;321f3cb7-467a-4744-8371-29d536f78908&#125; &lt;Trace&gt; InterpreterSelectQuery: FetchColumns -&gt; Complete</span><br><span class=\"line\">2020.05.03 23:09:53.391523 [ 82 ] &#123;321f3cb7-467a-4744-8371-29d536f78908&#125; &lt;Debug&gt; executeQuery: Query pipeline:</span><br><span class=\"line\">NullAndDoCopy</span><br><span class=\"line\"> Converting</span><br><span class=\"line\">  Limit</span><br><span class=\"line\">   Expression</span><br><span class=\"line\">    Expression</span><br><span class=\"line\">     TreeExecutor</span><br><span class=\"line\"></span><br><span class=\"line\">2020.05.03 23:09:53.791641 [ 102 ] &#123;321f3cb7-467a-4744-8371-29d536f78908&#125; &lt;Debug&gt; DiskLocal: Reserving 1.00 MiB on disk `default`, having unreserved 3.44 TiB.</span><br><span class=\"line\">2020.05.03 23:09:53.804394 [ 102 ] &#123;321f3cb7-467a-4744-8371-29d536f78908&#125; &lt;Trace&gt; datasets.mixed_granularity_table: Renaming temporary part tmp_insert_201403_1_1_0 to 201403_1_1_0.</span><br><span class=\"line\">2020.05.03 23:09:53.804871 [ 82 ] &#123;321f3cb7-467a-4744-8371-29d536f78908&#125; &lt;Information&gt; executeQuery: Read 10 rows, 10.59 KiB <span class=\"keyword\">in</span> 0.417 sec., 23 rows/sec., 25.40 KiB/sec.</span><br><span class=\"line\">2020.05.03 23:09:53.804923 [ 82 ] &#123;321f3cb7-467a-4744-8371-29d536f78908&#125; &lt;Debug&gt; MemoryTracker: Peak memory usage (<span class=\"keyword\">for</span> query): 263.95 MiB.</span><br><span class=\"line\">2020.05.03 23:09:53.806135 [ 82 ] &#123;&#125; &lt;Debug&gt; MemoryTracker: Peak memory usage (total): 263.95 MiB.</span><br><span class=\"line\">2020.05.03 23:09:53.806169 [ 82 ] &#123;&#125; &lt;Information&gt; TCPHandler: Processed <span class=\"keyword\">in</span> 0.419 sec.</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","tags":["data"]},{"title":"harbor配置https","url":"/2020/04/20/harbor/harbor%E9%85%8D%E7%BD%AEhttps/","content":"<ul>\n<li>参考网页：<a href=\"https://goharbor.io/docs/1.10/install-config/configure-https/\" target=\"_blank\" rel=\"noopener\">harbor配置https官方文档</a></li>\n</ul>\n<p>​        在前面<a href=\"https://schnappi618.github.io/2020/03/28/harbor%E6%90%AD%E5%BB%BAdocker%E7%A7%81%E6%9C%89%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/\">harbor搭建docker私有镜像仓库</a>中使用了默认的http端口，但生产环境中并不提倡使用不安全的http服务，建议使用https保证安全性，这里根据官方推荐的openssl方法来自签证书，但浏览器并不认可自签证书的安全性，所以浏览器需要添加颁发的证书到浏览器中。同时，也可使用官方推荐的ACME获取免费的SSL证书。</p>\n<h2 id=\"一、自签证书\"><a href=\"#一、自签证书\" class=\"headerlink\" title=\"一、自签证书\"></a>一、自签证书</h2><h3 id=\"1、生成CA证书\"><a href=\"#1、生成CA证书\" class=\"headerlink\" title=\"1、生成CA证书\"></a>1、生成CA证书</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir /Users/bulubulu/docker/cert\t\t\t<span class=\"comment\"># 创建一个放置证书相关的目录，并使用cd进入该目录</span></span><br><span class=\"line\"><span class=\"comment\">## 1. 生成CA证书私钥</span></span><br><span class=\"line\">openssl genrsa -out ca.key 4096</span><br><span class=\"line\"><span class=\"comment\">## 2. 生成CA证书，可调整 -subj 选项来表明域名名称等信息</span></span><br><span class=\"line\">openssl req -x509 -new -nodes -sha512 -days 3650 \\</span><br><span class=\"line\"> -subj <span class=\"string\">\"/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=harbor.test.com\"</span> \\</span><br><span class=\"line\"> -key ca.key \\</span><br><span class=\"line\"> -out ca.crt</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、生成服务器证书\"><a href=\"#2、生成服务器证书\" class=\"headerlink\" title=\"2、生成服务器证书\"></a>2、生成服务器证书</h3><p>​        认证证书通常包含证书请求<code>.csr</code>文件、签名证书<code>.crt</code>文件及私钥<code>.key</code>文件，我这里harbor配置的hostname是harbor.test.com，所以最终需要生成<code>harbor.test.com.crt、harbor.test.com.csr、harbor.test.com.key</code>三个文件。</p>\n<ul>\n<li>key：证书私钥，一般利用rsa等算法生成</li>\n<li>csr：证书请求文件，利用证书私钥生成证书请求文件，该文件包含了服务器和地址等信息，申请人将该文件提交给CA机构，CA机构会根据该文件所携带的私钥信息来进行签名生成证书</li>\n<li>crt：证书文件</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 1. 生成私钥</span></span><br><span class=\"line\">openssl genrsa -out harbor.test.com.key 4096</span><br><span class=\"line\"><span class=\"comment\">## 2. 生成csr文件</span></span><br><span class=\"line\">openssl req -sha512 -new \\</span><br><span class=\"line\">    -subj <span class=\"string\">\"/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=harbor.test.com\"</span> \\</span><br><span class=\"line\">    -key harbor.test.com.key \\</span><br><span class=\"line\">    -out harbor.test.com.csr</span><br><span class=\"line\"><span class=\"comment\">## 3. 生成ssl匹配多域名文，例如既想使用域名又需要通过127.0.0.1本地地址登陆测试，可使用subjectAltName参数来进行配置</span></span><br><span class=\"line\">cat &gt; v3.ext &lt;&lt;-EOF</span><br><span class=\"line\">authorityKeyIdentifier=keyid,issuer</span><br><span class=\"line\">basicConstraints=CA:FALSE</span><br><span class=\"line\">keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment</span><br><span class=\"line\">extendedKeyUsage = serverAuth</span><br><span class=\"line\">subjectAltName = @alt_names</span><br><span class=\"line\"></span><br><span class=\"line\">[alt_names]</span><br><span class=\"line\">DNS.1=harbor.test.com</span><br><span class=\"line\">DNS.2=127.0.0.1</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"comment\">## 4. 根据v3.ext及csr文件请求生成crt证书文件</span></span><br><span class=\"line\">openssl x509 -req -sha512 -days 3650 \\</span><br><span class=\"line\">    -extfile v3.ext \\</span><br><span class=\"line\">    -CA ca.crt -CAkey ca.key -CAcreateserial \\</span><br><span class=\"line\">    -<span class=\"keyword\">in</span> harbor.test.com.csr \\</span><br><span class=\"line\">    -out harbor.test.com.crt</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、harbor配置修改\"><a href=\"#3、harbor配置修改\" class=\"headerlink\" title=\"3、harbor配置修改\"></a>3、harbor配置修改</h3><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">vim</span> <span class=\"string\">harbor.yml</span></span><br><span class=\"line\"><span class=\"attr\">hostname:</span> <span class=\"string\">harbor.test.com</span></span><br><span class=\"line\"><span class=\"comment\"># https related config</span></span><br><span class=\"line\"><span class=\"attr\">https:</span></span><br><span class=\"line\">  <span class=\"comment\"># https port for harbor, default is 443</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">443</span></span><br><span class=\"line\">  <span class=\"comment\"># The path of cert and key files for nginx</span></span><br><span class=\"line\">  <span class=\"attr\">certificate:</span> <span class=\"string\">/Users/bulubulu/docker/cert/harbor.test.com.crt</span></span><br><span class=\"line\">  <span class=\"attr\">private_key:</span> <span class=\"string\">/Users/bulubulu/docker/cert/harbor.test.com.key</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、harbor重新导入配置并启动\"><a href=\"#4、harbor重新导入配置并启动\" class=\"headerlink\" title=\"4、harbor重新导入配置并启动\"></a>4、harbor重新导入配置并启动</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 在harbor安装目录下执行以下命令重新启动</span></span><br><span class=\"line\">docker-compose down -v</span><br><span class=\"line\">./prepare</span><br><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、浏览器访问测试\"><a href=\"#5、浏览器访问测试\" class=\"headerlink\" title=\"5、浏览器访问测试\"></a>5、浏览器访问测试</h3><p>​        在浏览器通过所设置域名及ip分别进行测试</p>\n<p><img src=\"/2020/04/20/harbor/harbor%E9%85%8D%E7%BD%AEhttps/3.png\" alt=\"访问harbor.test.com\"></p>\n<p><img src=\"/2020/04/20/harbor/harbor%E9%85%8D%E7%BD%AEhttps/2.png\" alt=\"访问127.0.0.1\"></p>\n","categories":["harbor"],"tags":["harbor"]},{"title":"harbor配置nginx代理","url":"/2020/04/09/harbor/harbor%E9%85%8D%E7%BD%AEnginx%E4%BB%A3%E7%90%86/","content":"<p>​        从前面的文章<a href=\"https://schnappi618.github.io/2020/03/28/harbor%E6%90%AD%E5%BB%BAdocker%E7%A7%81%E6%9C%89%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/\">harbor搭建docker私有镜像仓库</a>可以看出harbor默认只能使用<code>harbor.yml</code>中hostname指定的ip或主机名作为web访问地址，但在实际使用过程中，一般不允许ip地址或者主机名直接暴露在外访问，故需要配置nginx代理，通过代理后指定的地址进行访问。</p>\n<hr>\n<h3 id=\"一、设置原理\"><a href=\"#一、设置原理\" class=\"headerlink\" title=\"一、设置原理\"></a>一、设置原理</h3><ul>\n<li>通过nginx为harbor后端暴露的地址及端口设置proxy地址，来源于harbor配置文件中的hostname及port</li>\n<li>修改harbor配置文件再次使用nginx设置的proxy地址</li>\n</ul>\n<hr>\n<h3 id=\"二、Nginx代理\"><a href=\"#二、Nginx代理\" class=\"headerlink\" title=\"二、Nginx代理\"></a>二、Nginx代理</h3><p>​        通过修改nginx的配置文件中server模块设置代理地址以及端口等信息，若harbor与nginx不在同一个服务器上或harbor不止一个服务器，还需要通过nginx的upstream模块来实现请求后端realserver及负载均衡，nginx配置文件修改处示例如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 设置upstream</span></span><br><span class=\"line\">upstream harbor&#123;</span><br><span class=\"line\">    server x.x.x.x:xx;\t\t\t<span class=\"comment\"># 后端harbor地址</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">## 设置代理后地址及监听端口等</span></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;\t\t<span class=\"comment\"># 代理后端口</span></span><br><span class=\"line\">    server_name xx.xx.com;\t\t<span class=\"comment\"># 代理后访问地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">    location /harbor &#123;</span><br><span class=\"line\">        proxy_pass http://harbor;\t\t\t<span class=\"comment\"># 这里对应的是上面upstream后指定的名称</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"三、Harbor设置\"><a href=\"#三、Harbor设置\" class=\"headerlink\" title=\"三、Harbor设置\"></a>三、Harbor设置</h3><p>​        通过nginx配置了代理之后，还需要修改harbor的配置文件设置proxy地址：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">[root@xxxx</span> <span class=\"string\">harbor]#</span> <span class=\"string\">vim</span> <span class=\"string\">harbor.yml</span></span><br><span class=\"line\"><span class=\"comment\"># Uncomment external_url if you want to enable external proxy</span></span><br><span class=\"line\"><span class=\"comment\"># And when it enabled the hostname will no longer used</span></span><br><span class=\"line\"><span class=\"comment\">## 打开该项配置，这里对应着nginx所设置的代理后访问地址</span></span><br><span class=\"line\"><span class=\"attr\">external_url:</span> <span class=\"string\">http://xx.xx.com</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"四、Web验证\"><a href=\"#四、Web验证\" class=\"headerlink\" title=\"四、Web验证\"></a>四、Web验证</h3><p>​        通过浏览器访问<code>http://xx.xx.com:port</code>访问代理后地址，这里因为nginx代理后使用了80端口，所以不需要写明端口。</p>\n<p>​                                            <img src=\"/2020/04/09/harbor/harbor%E9%85%8D%E7%BD%AEnginx%E4%BB%A3%E7%90%86/1.jpg\" style=\"zoom:70%;\"></p>\n<p>​        至此，harbor配置nginx代理设置成功！</p>\n","categories":["harbor"],"tags":["harbor"]},{"title":"harbor配置外部数据库","url":"/2020/04/08/harbor/harbor%E9%85%8D%E7%BD%AE%E5%A4%96%E9%83%A8%E6%95%B0%E6%8D%AE%E5%BA%93/","content":"<p>​        harbor默认安装会使用官方打包的PostgreSQL docker镜像goharbor/harbor-db，harbor启动之后的数据均存放在改数据库上，后续管理可能存在不便，故使用harbor配置外部数据库。</p>\n<h2 id=\"一、搭建PostgreSQL数据库\"><a href=\"#一、搭建PostgreSQL数据库\" class=\"headerlink\" title=\"一、搭建PostgreSQL数据库\"></a>一、搭建PostgreSQL数据库</h2><p>​        harbor从1.6版本之后仅支持PostgreSQL数据库作为外部数据库，故需要搭建PostgreSQL数据库使用。这里目前作为测试，故仅安装了单节点，未配置主从，搭建步骤如下：</p>\n<h3 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装\"></a>1. 安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">- 系统版本：CentOS7</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 1. 安装依赖包</span></span><br><span class=\"line\">yum install -y cmake gcc gcc-c++ perl readline readline-devel openssl openssl-devel zlib zlib-devel ncurses-devel readline readline-devel zlib zlib-devel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 2. 源码安装PostgreSQL</span></span><br><span class=\"line\">[postgres@xxxx dba]$ wget https://ftp.postgresql.org/pub/<span class=\"built_in\">source</span>/v12.2/postgresql-12.2.tar.gz</span><br><span class=\"line\">[postgres@xxxx dba]$ tar zxf postgresql-12.2.tar.gz </span><br><span class=\"line\">[postgres@xxxx dba]$ <span class=\"built_in\">cd</span> postgresql-12.2</span><br><span class=\"line\">[postgres@xxxx postgresql-12.2]$ ./configure --prefix=/usr/<span class=\"built_in\">local</span>/postgresql</span><br><span class=\"line\">[postgres@xxxx postgresql-12.2]$ make &amp;&amp; make install</span><br><span class=\"line\"><span class=\"comment\">### 这里configure的时候制定了安装目录，故需要将该目录下的bin目录写入到环境变量中去，以方便后面直接使用，也可不指定，安装到默认路径下</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-配置\"><a href=\"#2-配置\" class=\"headerlink\" title=\"2. 配置\"></a>2. 配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 创建数据目录</span></span><br><span class=\"line\">[postgres@xxxx data]$ mkdir -p /work/harbor-db/data</span><br><span class=\"line\"><span class=\"comment\"># 2. 创建日志目录</span></span><br><span class=\"line\">[postgres@xxxx data]$ mkdir -p /work/harbor-db/<span class=\"built_in\">log</span></span><br><span class=\"line\"><span class=\"comment\"># 3. 创建socket目录</span></span><br><span class=\"line\">[postgres@xxxx data]$ mkdir -p /work/harbor-db/tmp</span><br><span class=\"line\"><span class=\"comment\"># 4. 授权</span></span><br><span class=\"line\">[postgres@xxxx data]$ chown -R postgres.postgres /work/harbor-db/</span><br><span class=\"line\"><span class=\"comment\"># 5. 初始化pg实例</span></span><br><span class=\"line\">[postgres@xxxx data]$ initdb --username=postgres -D /work/harbor-db/data/</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">## 这里PostgreSQL数据库与harbor并未在同一台主机上，故除了修改配置文件postgresql.conf外还需要修改客户端认证配置pg_hba.conf文件，若在同一台主机上没有网络以及认证需求的话，可以不修改</span></span><br><span class=\"line\"><span class=\"comment\"># 6. 根据需要修改初始化的配置文件，修改位置如下：</span></span><br><span class=\"line\">[postgres@xxxx data]$ vim /work/harbor-db/data/postgresql.conf</span><br><span class=\"line\"> <span class=\"comment\"># 数据目录指定</span></span><br><span class=\"line\">data_directory = <span class=\"string\">'/work/harbor-db/data'</span></span><br><span class=\"line\"> <span class=\"comment\"># 客户端可连接ip，默认为localhost，若不需要可不修改，*为所有</span></span><br><span class=\"line\">listen_addresses = <span class=\"string\">'*'</span></span><br><span class=\"line\"> <span class=\"comment\"># 端口设置</span></span><br><span class=\"line\">port = 7002</span><br><span class=\"line\"> <span class=\"comment\"># 允许最大连接数</span></span><br><span class=\"line\">max_connections = 100</span><br><span class=\"line\"> <span class=\"comment\"># socket目录及权限设置</span></span><br><span class=\"line\">unix_socket_directories = <span class=\"string\">'/work/harbor-db/tmp'</span></span><br><span class=\"line\">unix_socket_group = <span class=\"string\">''</span></span><br><span class=\"line\">unix_socket_permissions = 0777</span><br><span class=\"line\"> <span class=\"comment\"># 内存大小</span></span><br><span class=\"line\">shared_buffers = 128MB</span><br><span class=\"line\"> <span class=\"comment\"># 时区修改</span></span><br><span class=\"line\">timezone = <span class=\"string\">'Asia/Shanghai'</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\"># 日志：</span></span><br><span class=\"line\"> <span class=\"comment\">## 是否开启日志</span></span><br><span class=\"line\">logging_collector = on</span><br><span class=\"line\"> <span class=\"comment\">## 日志存放目录</span></span><br><span class=\"line\">log_directory = <span class=\"string\">'/work/harbor-db/log'</span></span><br><span class=\"line\"> <span class=\"comment\">## 每个日志最大size</span></span><br><span class=\"line\">log_rotation_size = 1GB</span><br><span class=\"line\"> <span class=\"comment\">## 日志时区</span></span><br><span class=\"line\">log_timezone = <span class=\"string\">'Asia/Shanghai'</span></span><br><span class=\"line\"> <span class=\"comment\">## 记录执行时间大于100ms的sql及执行时间，相当于慢SQL日志</span></span><br><span class=\"line\">log_min_duration_statement = 100</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 由于这里需要远程可以连接，所以需要添加认证配置pg_hba.conf，根据自己需求配置，若不需要的话可不配置该文件</span></span><br><span class=\"line\">[postgres@xxxx data]$ vim pg_hba.conf </span><br><span class=\"line\"><span class=\"comment\"># 在文件末尾添加，以下配置表示，允许ADDRESS对应的主机，通过harbor用户访问该库的所有数据库</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE  DATABASE        USER            ADDRESS                 METHOD</span></span><br><span class=\"line\">host    all             harbor             x.x.x.x/x           trust</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-启动\"><a href=\"#3-启动\" class=\"headerlink\" title=\"3. 启动\"></a>3. 启动</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[postgres@xxxx data]$ su - postgres</span><br><span class=\"line\"><span class=\"comment\">## 启动方式使用以下1种即可</span></span><br><span class=\"line\">[postgres@xxxx data]$ pg_ctl -D /work/harbor-db/data/ -l /work/harbor-db/<span class=\"built_in\">log</span>/start.log start</span><br><span class=\"line\"></span><br><span class=\"line\">或使用 postgres -D /work/harbor-db/data &gt; /work/harbor-db/<span class=\"built_in\">log</span>/start.log 2&gt;&amp;1 &amp; 命令启动</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-登陆测试\"><a href=\"#4-登陆测试\" class=\"headerlink\" title=\"4. 登陆测试\"></a>4. 登陆测试</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 1. 本地测试</span></span><br><span class=\"line\"><span class=\"comment\"># 安装完成后会有postgres用户，相当于MySQL的root用户，默认没有密码</span></span><br><span class=\"line\">[postgres@xxxx data]$ psql -h 127.0.0.1 -p 7002 -U postgres</span><br><span class=\"line\">psql (12.2)</span><br><span class=\"line\">Type <span class=\"string\">\"help\"</span> <span class=\"keyword\">for</span> <span class=\"built_in\">help</span>.</span><br><span class=\"line\"><span class=\"comment\">### 修改postgres用户的密码</span></span><br><span class=\"line\">postgres=<span class=\"comment\"># \\password postgres</span></span><br><span class=\"line\">Enter new password: </span><br><span class=\"line\">Enter it again: </span><br><span class=\"line\"><span class=\"comment\">### 创建harbor用户，并创建harbor所涉及数据库及进行授权</span></span><br><span class=\"line\">postgres=<span class=\"comment\"># create user harbor with password 'harbor123';</span></span><br><span class=\"line\">CREATE ROLE</span><br><span class=\"line\">postgres=<span class=\"comment\"># CREATE DATABASE harbor;</span></span><br><span class=\"line\">CREATE DATABASE</span><br><span class=\"line\">postgres=<span class=\"comment\"># create database harbor_clair;</span></span><br><span class=\"line\">CREATE DATABASE</span><br><span class=\"line\">postgres=<span class=\"comment\"># create database harbor_notary_server;</span></span><br><span class=\"line\">CREATE DATABASE</span><br><span class=\"line\">postgres=<span class=\"comment\"># create database harbor_notary_signer; </span></span><br><span class=\"line\">CREATE DATABASE</span><br><span class=\"line\">postgres=<span class=\"comment\"># GRANT ALL PRIVILEGES ON DATABASE harbor to harbor;           </span></span><br><span class=\"line\">GRANT</span><br><span class=\"line\">postgres=<span class=\"comment\"># GRANT ALL PRIVILEGES ON DATABASE harbor_clair to harbor;           </span></span><br><span class=\"line\">GRANT</span><br><span class=\"line\">postgres=<span class=\"comment\"># GRANT ALL PRIVILEGES ON DATABASE harbor_notary_server to harbor;            </span></span><br><span class=\"line\">GRANT</span><br><span class=\"line\">postgres=<span class=\"comment\"># GRANT ALL PRIVILEGES ON DATABASE harbor_notary_signer to harbor;                    </span></span><br><span class=\"line\">GRANT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 2. 远程主机harbor用户测试</span></span><br><span class=\"line\">[root@remote harbor]<span class=\"comment\"># psql -h x.x.x.x -p 7002 -U harbor -W </span></span><br><span class=\"line\">Password: </span><br><span class=\"line\">psql (12.2)</span><br><span class=\"line\">Type <span class=\"string\">\"help\"</span> <span class=\"keyword\">for</span> <span class=\"built_in\">help</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">harbor=&gt;</span><br></pre></td></tr></table></figure>\n\n<p>​        至此，PostgreSQL数据库及基础配置设置完毕。</p>\n<h2 id=\"二、Harbor配置\"><a href=\"#二、Harbor配置\" class=\"headerlink\" title=\"二、Harbor配置\"></a>二、Harbor配置</h2><h3 id=\"1-配置文件修改\"><a href=\"#1-配置文件修改\" class=\"headerlink\" title=\"1. 配置文件修改\"></a>1. 配置文件修改</h3><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">[root@remote</span> <span class=\"string\">harbor]#</span> <span class=\"string\">vim</span> <span class=\"string\">harbor.yml</span></span><br><span class=\"line\"><span class=\"comment\"># Uncomment external_database if using external database.</span></span><br><span class=\"line\"><span class=\"attr\">external_database:</span></span><br><span class=\"line\">  <span class=\"attr\">harbor:</span></span><br><span class=\"line\">    <span class=\"attr\">host:</span> <span class=\"string\">x.x.x.x</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">7002</span></span><br><span class=\"line\">    <span class=\"attr\">db_name:</span> <span class=\"string\">harbor</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">harbor</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">xxxxxxxx</span></span><br><span class=\"line\">    <span class=\"attr\">ssl_mode:</span> <span class=\"string\">disable</span></span><br><span class=\"line\">    <span class=\"attr\">max_idle_conns:</span> <span class=\"number\">50</span></span><br><span class=\"line\">    <span class=\"attr\">max_open_conns:</span> <span class=\"number\">100</span></span><br><span class=\"line\">  <span class=\"attr\">clair:</span></span><br><span class=\"line\">    <span class=\"attr\">host:</span> <span class=\"string\">x.x.x.x</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">7002</span></span><br><span class=\"line\">    <span class=\"attr\">db_name:</span> <span class=\"string\">harbor_clair</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">harbor</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">xxxxxxxx</span></span><br><span class=\"line\">    <span class=\"attr\">ssl_mode:</span> <span class=\"string\">disable</span></span><br><span class=\"line\">  <span class=\"attr\">notary_signer:</span></span><br><span class=\"line\">    <span class=\"attr\">host:</span> <span class=\"string\">x.x.x.x</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">7002</span></span><br><span class=\"line\">    <span class=\"attr\">db_name:</span> <span class=\"string\">harbor_notary_signer</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">harbor</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">xxxxxxxx</span></span><br><span class=\"line\">    <span class=\"attr\">ssl_mode:</span> <span class=\"string\">disable</span></span><br><span class=\"line\">  <span class=\"attr\">notary_server:</span></span><br><span class=\"line\">    <span class=\"attr\">host:</span> <span class=\"string\">x.x.x.x</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">7002</span></span><br><span class=\"line\">    <span class=\"attr\">db_name:</span> <span class=\"string\">harbor_notary_server</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">harbor</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">xxxxxxxx</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-docker-compose文件修改\"><a href=\"#2-docker-compose文件修改\" class=\"headerlink\" title=\"2. docker-compose文件修改\"></a>2. docker-compose文件修改</h3><p>​        设置了外部数据库之后，便不再需要harbor本身的harbor-db镜像来支持，由安装重启文件<code>install.sh</code>可看出最终的安装等操作都由<code>docker-compose.yml</code>文件来完成，故需要在docker-compose文件中删除或注释掉harbor-db相关，修改完成后执行<code>sh install.sh</code>文件重启harbor服务即可。</p>\n<h2 id=\"三、测试验证\"><a href=\"#三、测试验证\" class=\"headerlink\" title=\"三、测试验证\"></a>三、测试验证</h2><h3 id=\"1-数据库验证\"><a href=\"#1-数据库验证\" class=\"headerlink\" title=\"1. 数据库验证\"></a>1. 数据库验证</h3><p>​        当harbor服务重启完成后，进入外部数据库中会发现刚才配置的库里面有了harbor的一些相关表。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@remote harbor]<span class=\"comment\"># psql -h x.x.x.x -p 7002 -U harbor -W </span></span><br><span class=\"line\">Password: </span><br><span class=\"line\">psql (12.2)</span><br><span class=\"line\">Type <span class=\"string\">\"help\"</span> <span class=\"keyword\">for</span> <span class=\"built_in\">help</span>.</span><br><span class=\"line\"><span class=\"comment\"># 查看有哪些库</span></span><br><span class=\"line\">harbor=&gt; \\l</span><br><span class=\"line\">                                       List of databases</span><br><span class=\"line\">         Name         |  Owner   | Encoding |   Collate   |    Ctype    |   Access privileges   </span><br><span class=\"line\">----------------------+----------+----------+-------------+-------------+-----------------------</span><br><span class=\"line\"> harbor               | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =Tc/postgres         +</span><br><span class=\"line\">                      |          |          |             |             | postgres=CTc/postgres+</span><br><span class=\"line\">                      |          |          |             |             | harbor=CTc/postgres</span><br><span class=\"line\"> harbor_clair         | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =Tc/postgres         +</span><br><span class=\"line\">                      |          |          |             |             | postgres=CTc/postgres+</span><br><span class=\"line\">                      |          |          |             |             | harbor=CTc/postgres</span><br><span class=\"line\"> harbor_notary_server | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =Tc/postgres         +</span><br><span class=\"line\">                      |          |          |             |             | postgres=CTc/postgres+</span><br><span class=\"line\">                      |          |          |             |             | harbor=CTc/postgres</span><br><span class=\"line\"> harbor_notary_signer | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =Tc/postgres         +</span><br><span class=\"line\">                      |          |          |             |             | postgres=CTc/postgres+</span><br><span class=\"line\">                      |          |          |             |             | harbor=CTc/postgres</span><br><span class=\"line\"> postgres             | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | </span><br><span class=\"line\"> template0            | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +</span><br><span class=\"line\">                      |          |          |             |             | postgres=CTc/postgres</span><br><span class=\"line\"> template1            | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +</span><br><span class=\"line\">                      |          |          |             |             | postgres=CTc/postgres</span><br><span class=\"line\">(7 rows)</span><br><span class=\"line\"><span class=\"comment\"># 进入harbor库中</span></span><br><span class=\"line\">harbor=&gt; \\c harbor</span><br><span class=\"line\">Password <span class=\"keyword\">for</span> user harbor: </span><br><span class=\"line\">You are now connected to database <span class=\"string\">\"harbor\"</span> as user <span class=\"string\">\"harbor\"</span>.</span><br><span class=\"line\"><span class=\"comment\"># 查看该库有哪些表</span></span><br><span class=\"line\">harbor=&gt; \\dt</span><br><span class=\"line\">                 List of relations</span><br><span class=\"line\"> Schema |           Name           | Type  | Owner  </span><br><span class=\"line\">--------+--------------------------+-------+--------</span><br><span class=\"line\"> public | access                   | table | harbor</span><br><span class=\"line\"> public | access_log               | table | harbor</span><br><span class=\"line\"> public | admin_job                | table | harbor</span><br><span class=\"line\"> public | alembic_version          | table | harbor</span><br><span class=\"line\"> public | artifact                 | table | harbor</span><br><span class=\"line\"> public | artifact_blob            | table | harbor</span><br><span class=\"line\"> public | blob                     | table | harbor</span><br><span class=\"line\"> public | cve_whitelist            | table | harbor</span><br><span class=\"line\"> public | harbor_label             | table | harbor</span><br><span class=\"line\"> public | harbor_resource_label    | table | harbor</span><br><span class=\"line\"> public | harbor_user              | table | harbor</span><br><span class=\"line\"> public | immutable_tag_rule       | table | harbor</span><br><span class=\"line\"> public | job_log                  | table | harbor</span><br><span class=\"line\"> public | notification_job         | table | harbor</span><br><span class=\"line\"> public | notification_policy      | table | harbor</span><br><span class=\"line\"> public | oidc_user                | table | harbor</span><br><span class=\"line\"> public | project                  | table | harbor</span><br><span class=\"line\"> public | project_blob             | table | harbor</span><br><span class=\"line\"> public | project_member           | table | harbor</span><br><span class=\"line\"> public | project_metadata         | table | harbor</span><br><span class=\"line\"> public | properties               | table | harbor</span><br><span class=\"line\"> public | quota                    | table | harbor</span><br><span class=\"line\"> public | quota_usage              | table | harbor</span><br><span class=\"line\"> public | registry                 | table | harbor</span><br><span class=\"line\"> public | replication_execution    | table | harbor</span><br><span class=\"line\"> public | replication_policy       | table | harbor</span><br><span class=\"line\"> public | replication_schedule_job | table | harbor</span><br><span class=\"line\"> public | replication_task         | table | harbor</span><br><span class=\"line\"> public | repository               | table | harbor</span><br><span class=\"line\"> public | retention_execution      | table | harbor</span><br><span class=\"line\"> public | retention_policy         | table | harbor</span><br><span class=\"line\"> public | retention_task           | table | harbor</span><br><span class=\"line\"> public | robot                    | table | harbor</span><br><span class=\"line\"> public | role                     | table | harbor</span><br><span class=\"line\"> public | scan_report              | table | harbor</span><br><span class=\"line\"> public | scanner_registration     | table | harbor</span><br><span class=\"line\"> public | schedule                 | table | harbor</span><br><span class=\"line\"> public | schema_migrations        | table | harbor</span><br><span class=\"line\"> public | user_group               | table | harbor</span><br><span class=\"line\">(39 rows)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 由于并没有开启其他三个组件的功能，所以其他三个库里面没有表，当harbor库中有表存在后，则外部数据库配置成功</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-Web页面测试\"><a href=\"#2-Web页面测试\" class=\"headerlink\" title=\"2. Web页面测试\"></a>2. Web页面测试</h3><p>​        根据之前的<a href=\"%5Bhttps://schnappi618.github.io/2020/03/28/harbor%E6%90%AD%E5%BB%BAdocker%E7%A7%81%E6%9C%89%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/%5D(https://schnappi618.github.io/2020/03/28/harbor%E6%90%AD%E5%BB%BAdocker%E7%A7%81%E6%9C%89%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/)\">harbor搭建</a>中最后的web页面创建镜像仓库的演示，可新创建一个镜像仓库，并上传一个镜像，完成后，在数据库中可看到记录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">harbor_notary_signer=&gt; \\c harbor</span><br><span class=\"line\">Password <span class=\"keyword\">for</span> user harbor: </span><br><span class=\"line\">You are now connected to database <span class=\"string\">\"harbor\"</span> as user <span class=\"string\">\"harbor\"</span>.</span><br><span class=\"line\"><span class=\"comment\"># 查看操作日志，创建了一个pingcap仓库，并上传了一个tikv:v3.0.12的镜像到pingcap仓库中，所有的操作均为admin用户执行</span></span><br><span class=\"line\">harbor=&gt; select * from access_log;</span><br><span class=\"line\"> log_id | username | project_id |  repo_name   | repo_tag | guid | operation |          op_time           </span><br><span class=\"line\">--------+----------+------------+--------------+----------+------+-----------+----------------------------</span><br><span class=\"line\">      1 | admin    |          2 | pingcap/     | N/A      |      | create    | 2020-04-08 18:02:50.369493</span><br><span class=\"line\">      2 | admin    |          2 | pingcap/tikv | v3.0.12  |      | push      | 2020-04-08 18:03:48.824079</span><br><span class=\"line\">(2 rows)</span><br><span class=\"line\"><span class=\"comment\"># 查看目前有哪些仓库，即project</span></span><br><span class=\"line\">harbor=&gt; select * from project;   </span><br><span class=\"line\"> project_id | owner_id |  name   |       creation_time        |        update_time         | deleted </span><br><span class=\"line\">------------+----------+---------+----------------------------+----------------------------+---------</span><br><span class=\"line\">          1 |        1 | library | 2020-04-08 17:48:10.024358 | 2020-04-08 17:48:10.024358 | f</span><br><span class=\"line\">          2 |        1 | pingcap | 2020-04-08 18:02:50        | 2020-04-08 18:02:50        | f</span><br><span class=\"line\">(2 rows)</span><br><span class=\"line\"><span class=\"comment\"># 查看目前有哪些镜像</span></span><br><span class=\"line\">harbor=&gt; select * from repository;</span><br><span class=\"line\"> repository_id |     name     | project_id | description | pull_count | star_count |       creation_time        |        update_t</span><br><span class=\"line\">ime         </span><br><span class=\"line\">---------------+--------------+------------+-------------+------------+------------+----------------------------+----------------</span><br><span class=\"line\">------------</span><br><span class=\"line\">             1 | pingcap/tikv |          2 |             |          0 |          0 | 2020-04-08 18:03:48.824717 | 2020-04-08 18:0</span><br><span class=\"line\">3:48.824717</span><br><span class=\"line\">(1 row)</span><br></pre></td></tr></table></figure>\n\n<p>​        可以看到，所有的结果均符合预期，harbor配置外部数据库及测试完成。^_^</p>\n","categories":["harbor"],"tags":["harbor","PostgreSQL"]},{"title":"clickhouse用户配置详解","url":"/2020/03/28/clickhouse/clickhouse%E7%94%A8%E6%88%B7%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/","content":"<p><strong>参考网页：</strong></p>\n<ul>\n<li><a href=\"https://clickhouse.tech/docs/zh/\" target=\"_blank\" rel=\"noopener\">clickhouse官方文档</a></li>\n<li><a href=\"https://clickhouse.tech/docs/zh/operations/settings/settings/\" target=\"_blank\" rel=\"noopener\">clickhouse配置文件参数</a></li>\n</ul>\n<p>​        ClickHouse的用户及访问权限控制均可由配置文件直接进行标准化配置，一般由<code>users.xml</code>文件设置，该文件名在/etc/clickhouse-server/config.xml中修改，详情可参考<a href=\"%5Bhttps://schnappi618.github.io/2020/03/28/clickhouse-server%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/%5D(https://schnappi618.github.io/2020/03/28/clickhouse-server%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/)\">clickhouse-server配置文件详解</a>，若需要对某一个用户单独设置例如dba用户，可放入<code>/etc/clickhouse-server/users.d/dba.xml</code>，下面会描述该文件的配置示例。</p>\n<h2 id=\"一、users-xml文件示例\"><a href=\"#一、users-xml文件示例\" class=\"headerlink\" title=\"一、users.xml文件示例\"></a>一、users.xml文件示例</h2><p>​        以下是一个标准默认的<code>users.xml</code>用户配置示例，可直接测试使用，对用户的权限管理将会单独使用一篇文章来进行说明，后面将会对该文件分开描述。</p>\n<p>​        有文件中可以看出users.xml主要由以下三部分设置组成：</p>\n<ul>\n<li>profile：类似于用户角色，可以实现最大内存、负载方式等配置的服用</li>\n<li>users：设置包括用户名、密码、权限等</li>\n<li>quotas：限制一段时间内的资源使用等</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">yandex</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">default</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">max_memory_usage</span>&gt;</span>10000000000<span class=\"tag\">&lt;/<span class=\"name\">max_memory_usage</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">load_balancing</span>&gt;</span>random<span class=\"tag\">&lt;/<span class=\"name\">load_balancing</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">constraints</span>&gt;</span><span class=\"comment\">&lt;!-- 配置约束--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">max_memory_usage</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">min</span>&gt;</span>5000000000<span class=\"tag\">&lt;/<span class=\"name\">min</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">max</span>&gt;</span>20000000000<span class=\"tag\">&lt;/<span class=\"name\">max</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">max_memory_usage</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">load_balancing</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">readonly</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">load_balancing</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">constraints</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">default</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">default</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">readonly</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">readonly</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">readonly</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">readonly</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">users</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">default</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">networks</span> <span class=\"attr\">incl</span>=<span class=\"string\">\"networks\"</span> <span class=\"attr\">replace</span>=<span class=\"string\">\"replace\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">ip</span>&gt;</span>::1<span class=\"tag\">&lt;/<span class=\"name\">ip</span>&gt;</span></span><br><span class=\"line\">        \t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">ip</span>&gt;</span>127.0.0.1<span class=\"tag\">&lt;/<span class=\"name\">ip</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">networks</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">quota</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">quota</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">default</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--下面两个用户为测试用户，可以不配置--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">seluser</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>meiyoumima<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">networks</span> <span class=\"attr\">incl</span>=<span class=\"string\">\"networks\"</span> <span class=\"attr\">replace</span>=<span class=\"string\">\"replace\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">ip</span>&gt;</span>::/0<span class=\"tag\">&lt;/<span class=\"name\">ip</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">networks</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span>readonly<span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">quota</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">quota</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">seluser</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">inuser</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>meiyoumima<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">networks</span> <span class=\"attr\">incl</span>=<span class=\"string\">\"networks\"</span> <span class=\"attr\">replace</span>=<span class=\"string\">\"replace\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">ip</span>&gt;</span>::/0<span class=\"tag\">&lt;/<span class=\"name\">ip</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">networks</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">quota</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">quota</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">inuser</span>&gt;</span></span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">users</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Quotas. --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">quotas</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">default</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">interval</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">duration</span>&gt;</span>3600<span class=\"tag\">&lt;/<span class=\"name\">duration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">queries</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">queries</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">errors</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">errors</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">result_rows</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">result_rows</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">read_rows</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">read_rows</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">execution_time</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">execution_time</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">interval</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">default</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">quotas</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">yandex</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、profile设置详解\"><a href=\"#二、profile设置详解\" class=\"headerlink\" title=\"二、profile设置详解\"></a>二、profile设置详解</h2><p>​        <code>users.xml</code>用户配置文件中<code>profiles</code>部分定义了一些可复用的配置，他的作用类似于用户角色，可定义多个profile，并为不同的profile定义不同的配置，其中每个参数的含义可参考前面的参考网页二，并在后续使用中不断完善，以下面配置为例：</p>\n<h3 id=\"1、profile配置详情\"><a href=\"#1、profile配置详情\" class=\"headerlink\" title=\"1、profile配置详情\"></a>1、profile配置详情</h3><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">yandex</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--定义profiles--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">profiles</span>&gt;</span>    </span><br><span class=\"line\">        <span class=\"comment\">&lt;!--可自定义名称，default是默认存在的角色名称--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">default</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">max_memory_usage</span>&gt;</span>10000000000<span class=\"tag\">&lt;/<span class=\"name\">max_memory_usage</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">load_balancing</span>&gt;</span>random<span class=\"tag\">&lt;/<span class=\"name\">load_balancing</span>&gt;</span></span><br><span class=\"line\">          </span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">constraints</span>&gt;</span><span class=\"comment\">&lt;!-- 配置约束--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">max_memory_usage</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">min</span>&gt;</span>5000000000<span class=\"tag\">&lt;/<span class=\"name\">min</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">max</span>&gt;</span>20000000000<span class=\"tag\">&lt;/<span class=\"name\">max</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">max_memory_usage</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">load_balancing</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">readonly</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">load_balancing</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">constraints</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">default</span>&gt;</span></span><br><span class=\"line\">      </span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">&lt;!--自定义readonly角色--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">readonly</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">readonly</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">readonly</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">readonly</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、profile配置约束\"><a href=\"#2、profile配置约束\" class=\"headerlink\" title=\"2、profile配置约束\"></a>2、profile配置约束</h3><p>profile中有约束条件，从而限制其中的参数值被任意修改，约束条件有三种规则：</p>\n<ol>\n<li><p>Min：最小值约束，对应参数取值不能小于该值</p>\n</li>\n<li><p>Max：最大值约束，对应参数取值不能大雨该值</p>\n</li>\n<li><p>Readonly：只读约束，对应参数禁止修改</p>\n</li>\n</ol>\n<p>   <strong>profile中default的constraints配置约束会作为全局约束，自动被其他profile继承。</strong></p>\n<hr>\n<p>​        以上述配置示例，将default用户角色中的<code>max_memory_usage</code>设置了默认值以及最大最小阈值，<code>load_balancing</code>设置为了只读，对其配置进行测试</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@xxxx docker_compose]<span class=\"comment\"># docker exec -it 92b25e101be0 /bin/bash</span></span><br><span class=\"line\"><span class=\"comment\"># 所有的profile设置中，default是默认配置，必须存在，利用docker-compose配置后容器会无法启动</span></span><br><span class=\"line\">root@clickhouse-server_1:/<span class=\"comment\"># clickhouse-client</span></span><br><span class=\"line\">ClickHouse client version 20.3.4.10 (official build).</span><br><span class=\"line\">Connecting to localhost:9000 as user default.</span><br><span class=\"line\">Connected to ClickHouse server version 20.3.4 revision 54433.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置max_memory_usage为50，他的最小值约束起了作用，禁止修改为该值</span></span><br><span class=\"line\">clickhouse-server_1 :) <span class=\"built_in\">set</span> max_memory_usage = 50</span><br><span class=\"line\"></span><br><span class=\"line\">SET max_memory_usage = 50</span><br><span class=\"line\"></span><br><span class=\"line\">Received exception from server (version 20.3.4):</span><br><span class=\"line\">Code: 452. DB::Exception: Received from localhost:9000. DB::Exception: Setting max_memory_usage shouldn<span class=\"string\">'t be less than 5000000000. </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">0 rows in set. Elapsed: 0.058 sec.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">## 修改load_balancing，禁止修改该值</span></span><br><span class=\"line\"><span class=\"string\">clickhouse-server_1 :) set load_balancing = '</span>nearest_hostname<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">SET load_balancing = '</span>nearest_hostname<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Received exception from server (version 20.3.4):</span></span><br><span class=\"line\"><span class=\"string\">Code: 452. DB::Exception: Received from localhost:9000. DB::Exception: Setting load_balancing should not be changed. </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">0 rows in set. Elapsed: 0.001 sec.</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、profile切换和继承\"><a href=\"#3、profile切换和继承\" class=\"headerlink\" title=\"3、profile切换和继承\"></a>3、profile切换和继承</h3><p>1、profile切换</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 根据上面的配置文件，可以看到这次profile中包含default和readonly，clickhouse默认登陆用户为default，profile为default，可切换到readonly，切换后会获得相应的配置</span></span><br><span class=\"line\">clickhouse-server_1 :) <span class=\"built_in\">set</span> profile = <span class=\"string\">'readonly'</span></span><br><span class=\"line\"></span><br><span class=\"line\">SET profile = <span class=\"string\">'readonly'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Ok.</span><br><span class=\"line\"></span><br><span class=\"line\">0 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span>. Elapsed: 0.001 sec.</span><br><span class=\"line\"><span class=\"comment\"># 从上面配置可以看到，设置的max_memory_usage符合约束条件，但由于目前是readonly的profile，所有参数都不能修改</span></span><br><span class=\"line\">clickhouse-server_1 :) <span class=\"built_in\">set</span> max_memory_usage = 10000000001</span><br><span class=\"line\"></span><br><span class=\"line\">SET max_memory_usage = 10000000001</span><br><span class=\"line\"></span><br><span class=\"line\">Received exception from server (version 20.3.4):</span><br><span class=\"line\">Code: 164. DB::Exception: Received from localhost:9000. DB::Exception: Cannot modify <span class=\"string\">'max_memory_usage'</span> setting <span class=\"keyword\">in</span> <span class=\"built_in\">readonly</span> mode. </span><br><span class=\"line\"></span><br><span class=\"line\">0 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span>. Elapsed: 0.001 sec.</span><br></pre></td></tr></table></figure>\n\n<p>2、profile继承</p>\n<p>​        profile配置支持继承，实现继承的方式是在profile配置中先引入其他的profile名称，但若有冲突，后面的配置会覆盖之前继承的配置，示例如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">test1</span>&gt;</span></span><br><span class=\"line\">   \t<span class=\"tag\">&lt;<span class=\"name\">allow_experimental_live_view</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">allow_experimental_live_view</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">distributed_product_mode</span>&gt;</span>allow<span class=\"tag\">&lt;/<span class=\"name\">distributed_product_mode</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">test1</span>&gt;</span></span><br><span class=\"line\">   <span class=\"comment\">&lt;!--normal_inherit profile会继承test1里面的两个参数配置，但它自身也设置了distributed_product_mode和test1的冲突，后面自己设置的deny会覆盖掉test1的allow设置--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">normal_inherit</span>&gt;</span> </span><br><span class=\"line\">   \t<span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span>test1<span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">distributed_product_mode</span>&gt;</span>deny<span class=\"tag\">&lt;/<span class=\"name\">distributed_product_mode</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">normal_inherit</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、users配置详解\"><a href=\"#三、users配置详解\" class=\"headerlink\" title=\"三、users配置详解\"></a>三、users配置详解</h2><p>​        <code>users.xml</code>用户配置文件中users模块可以自定义配置用户属性，例如用户名、密码、权限等，用官网默认配置会发现<code>users.xml</code>文件中会默认创建default用户，使用<code>clickhouse-client</code>无参数登陆会通过该用户登陆，将以下面的示例进行说明：</p>\n<h3 id=\"1、users配置详情\"><a href=\"#1、users配置详情\" class=\"headerlink\" title=\"1、users配置详情\"></a>1、users配置详情</h3><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">users</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--default用户会默认存在--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">default</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">networks</span> <span class=\"attr\">incl</span>=<span class=\"string\">\"networks\"</span> <span class=\"attr\">replace</span>=<span class=\"string\">\"replace\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ip</span>&gt;</span>::1<span class=\"tag\">&lt;/<span class=\"name\">ip</span>&gt;</span></span><br><span class=\"line\">    \t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">ip</span>&gt;</span>127.0.0.1<span class=\"tag\">&lt;/<span class=\"name\">ip</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">networks</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">quota</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">quota</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">default</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--下面两个用户为测试用户，可以不配置--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">seluser</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>meiyoumima<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">networks</span> <span class=\"attr\">incl</span>=<span class=\"string\">\"networks\"</span> <span class=\"attr\">replace</span>=<span class=\"string\">\"replace\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ip</span>&gt;</span>::/0<span class=\"tag\">&lt;/<span class=\"name\">ip</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">networks</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span>readonly<span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">quota</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">quota</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">seluser</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">inuser</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>meiyoumima<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">networks</span> <span class=\"attr\">incl</span>=<span class=\"string\">\"networks\"</span> <span class=\"attr\">replace</span>=<span class=\"string\">\"replace\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ip</span>&gt;</span>::/0<span class=\"tag\">&lt;/<span class=\"name\">ip</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">networks</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">quota</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">quota</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">inuser</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">users</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、users属性详解\"><a href=\"#2、users属性详解\" class=\"headerlink\" title=\"2、users属性详解\"></a>2、users属性详解</h3><p>​        一个完整的用户设置，需要包含下面的属性</p>\n<ul>\n<li>username：用户名</li>\n<li>password：密码设置</li>\n<li>networks：网络设置，一般用来限制可登陆的客户端地址</li>\n<li>profile：该用户所使用的profile</li>\n<li>quota</li>\n</ul>\n<hr>\n<p><strong>1. username</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">users</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"comment\">&lt;!--用户的第一行设置为其username--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">default</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">networks</span> <span class=\"attr\">incl</span>=<span class=\"string\">\"networks\"</span> <span class=\"attr\">replace</span>=<span class=\"string\">\"replace\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ip</span>&gt;</span>::1<span class=\"tag\">&lt;/<span class=\"name\">ip</span>&gt;</span></span><br><span class=\"line\">    \t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">ip</span>&gt;</span>127.0.0.1<span class=\"tag\">&lt;/<span class=\"name\">ip</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">networks</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">quota</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">quota</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">default</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>2. password</strong></p>\n<p>​        登陆密码，clickhouse支持<strong>明文、SHA256加密、double_sha1</strong>三种设置方式，但SHA256和sha1都是散列算法，明文和密文一一对应，也可通过密文很容易进行解密…</p>\n<ul>\n<li>明文登陆</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--直接在用户中通过password标签定义，中间字符即为登陆密码--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>meiyoumima<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--类似上述default用户，中间为空即代表没有密码--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>SHA256加密登陆</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 官方推荐生成密码方式，RSZ4QZMc为随机的明文密码，21d076f...为最终密文</span></span><br><span class=\"line\">[root@xxxx docker_compose]<span class=\"comment\">#   PASSWORD=$(base64 &lt; /dev/urandom | head -c8); echo \"$PASSWORD\"; echo -n \"$PASSWORD\" | sha256sum | tr -d '-'</span></span><br><span class=\"line\">RSZ4QZMc</span><br><span class=\"line\">21d076f8340b5d836769a35c4d658d7b3091e7e1ccb18d66e9e1a7b6eef823df </span><br><span class=\"line\"><span class=\"comment\">### 也可通过openssl生成密文，明文为123，输出为密文</span></span><br><span class=\"line\">[root@xxxx docker_compose]<span class=\"comment\"># echo -n 123 | openssl dgst -sha256</span></span><br><span class=\"line\">(stdin)= a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--设置方式--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">password_sha256_hex</span>&gt;</span>21d076f8340b5d836769a35c4d658d7b3091e7e1ccb18d66e9e1a7b6eef823df<span class=\"tag\">&lt;/<span class=\"name\">password_sha256_hex</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>double_sha1加密登陆</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 官方推荐生成密码方式，+0agrMRX为urandom生成的明文，407732...为最终密文</span></span><br><span class=\"line\">[root@xxxx docker_compose]<span class=\"comment\">#   PASSWORD=$(base64 &lt; /dev/urandom | head -c8); echo \"$PASSWORD\"; echo -n \"$PASSWORD\" | sha1sum | tr -d '-' | xxd -r -p | sha1sum | tr -d '-'</span></span><br><span class=\"line\">+0agrMRX</span><br><span class=\"line\">407732ce14cdea57dc0a2ff9c64773472f8cd666</span><br><span class=\"line\"><span class=\"comment\">### 通过openssl生成密文，明文为123，输出为密文</span></span><br><span class=\"line\">[root@xxxx docker_compose]<span class=\"comment\"># echo -n 123 | openssl dgst -sha1 -binary | openssl dgst -sha1</span></span><br><span class=\"line\">(stdin)= 23ae809ddacaf96af0fd78ed04b6a265e05aa257</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--设置方式--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">password_double_sha1_hex</span>&gt;</span>407732ce14cdea57dc0a2ff9c64773472f8cd666<span class=\"tag\">&lt;/<span class=\"name\">password_double_sha1_hex</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>3. networks</strong></p>\n<p>​        networks表示允许被登陆clickhouse服务器的客户端列表，支持通过ip、host、host_regexp方式设置</p>\n<ul>\n<li>ip设置</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--通过ip直接设置--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ip</span>&gt;</span>1.1.1.1<span class=\"tag\">&lt;/<span class=\"name\">ip</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ip</span>&gt;</span>10.0.0.1/8<span class=\"tag\">&lt;/<span class=\"name\">ip</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--为所有客户端打开权限--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ip</span>&gt;</span>::/0<span class=\"tag\">&lt;/<span class=\"name\">ip</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--仅允许本地登陆--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ip</span>&gt;</span>::1<span class=\"tag\">&lt;/<span class=\"name\">ip</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ip</span>&gt;</span>127.0.0.1<span class=\"tag\">&lt;/<span class=\"name\">ip</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>host设置</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>example1.host.com<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>host_regexp设置</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--通过主机名的正则表达式设置--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">host_regexp</span>&gt;</span>^example\\d\\d-\\d\\d-\\d\\.host\\.ru$<span class=\"tag\">&lt;/<span class=\"name\">host_regexp</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>4. profile设置</strong></p>\n<p>​        该用户所使用的profile设置，直接写入即可</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">default</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">default</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>5. quota设置</strong></p>\n<p>​        该用户单位时间内的资源限制，直接使用quotas设置的名称即可</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">quota</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">quota</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>6. database设置</strong></p>\n<p>​        该设置可以限制当前用户select时返回的行，以完成简单的行数据安全，示例如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--以下配置强制用户user1只能看到database_name.table1表中id为1000的行，其中filter支持UInt8类型的值，并支持比较和逻辑运算符--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">user1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">databases</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">database_name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">table1</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span>id = 1000<span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">table1</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">database_name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">databases</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">user1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、quotas配置详解\"><a href=\"#四、quotas配置详解\" class=\"headerlink\" title=\"四、quotas配置详解\"></a>四、quotas配置详解</h2><h3 id=\"1、quotas配置详情\"><a href=\"#1、quotas配置详情\" class=\"headerlink\" title=\"1、quotas配置详情\"></a>1、quotas配置详情</h3><p>​        <code>users.xml</code>配置文件中的quotas标签是限制了单位时间内的系统资源使用量，而不是限制单个查询的系统资源使用量**(server的配置可以设置限制单个查询的系统资源的使用量)<strong>，值为0表示不限制，如下面示例所示，表示</strong>仅跟踪每小时的资源消耗，而不限制使用情况**，当设置阈值之后，对应资源达到阈值，正在进行的操作也会中断。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">quotas</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">default</span>&gt;</span>\t\t<span class=\"comment\">&lt;!--自定义名称--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">interval</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">duration</span>&gt;</span>3600<span class=\"tag\">&lt;/<span class=\"name\">duration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">queries</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">queries</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">errors</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">errors</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">result_rows</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">result_rows</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">read_rows</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">read_rows</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">execution_time</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">execution_time</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">interval</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">default</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">quotas</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、quotas属性详解\"><a href=\"#2、quotas属性详解\" class=\"headerlink\" title=\"2、quotas属性详解\"></a>2、quotas属性详解</h3><p><strong>1. duration设置</strong></p>\n<p>​        duration表示累计的时间周期，单位为秒，达到该时间周期后，清除所有收集的值，接下来的周期，将重新开始计算，当服务重启时，也会清除所有的值，重新开始新的周期。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">duration</span>&gt;</span>3600<span class=\"tag\">&lt;/<span class=\"name\">duration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>2. queris设置</strong></p>\n<p>​        queris表示在该周期内，允许执行的查询次数，0为不限制。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--在duration设置周期时间内只允许查询1000次--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">queries</span>&gt;</span>1000<span class=\"tag\">&lt;/<span class=\"name\">queries</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>3. errors设置</strong></p>\n<p>​        errors表示在该周期内，允许引发异常的查询次数，0为不限制。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">errors</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">errors</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>4. result_rows设置</strong></p>\n<p>​        result_rows表示在周期内，允许查询返回的结果行数，0为不限制。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">result_rows</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">result_rows</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>5. read_rows设置</strong></p>\n<p>​        read_rows表示在周期内，允许远程节点读取的数据行数，0为不限制。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">read_rows</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">read_rows</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>6. execution_time设置</strong></p>\n<p>​        execution_time表示允许查询的总执行时间(又叫wall time)，单位为秒，0为不限制。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">execution_time</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">execution_time</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n","categories":["clickhouse"],"tags":["clickhouse"]},{"title":"clickhouse-server配置文件详解","url":"/2020/03/28/clickhouse/clickhouse-server%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/","content":""},{"title":"harbor搭建docker私有镜像仓库","url":"/2020/03/28/harbor/harbor%E6%90%AD%E5%BB%BAdocker%E7%A7%81%E6%9C%89%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/","content":"<p>参考文档：</p>\n<ul>\n<li><a href=\"https://goharbor.io/docs/1.10/\" target=\"_blank\" rel=\"noopener\">Harbor官方文档</a></li>\n</ul>\n<h2 id=\"一、Harbor简介\"><a href=\"#一、Harbor简介\" class=\"headerlink\" title=\"一、Harbor简介\"></a>一、Harbor简介</h2><p>​        Harbor是VMWare开源的企业级容器镜像仓库，在Docker Registry基础上增加了Web UI、基于角色的访问控制、日志审计、扫描镜像漏洞等功能从而使其应用更加广泛。</p>\n<p>​        其中大致包括以下组件，对其组件的功能及修改在之后使用过程中了解：</p>\n<ul>\n<li>harbor-jobservice</li>\n<li>nginx</li>\n<li>harbor-ui</li>\n<li>harbor-db</li>\n<li>registry</li>\n<li>harbor-adminserver</li>\n<li>harbor-log</li>\n</ul>\n<h2 id=\"二、Harbor私有镜像仓库搭建\"><a href=\"#二、Harbor私有镜像仓库搭建\" class=\"headerlink\" title=\"二、Harbor私有镜像仓库搭建\"></a>二、Harbor私有镜像仓库搭建</h2><h2 id=\"1、环境准备\"><a href=\"#1、环境准备\" class=\"headerlink\" title=\"1、环境准备\"></a>1、环境准备</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker 版本17.06.0+</span><br><span class=\"line\">docker-compose  版本高于1.6.0</span><br></pre></td></tr></table></figure>\n\n<p>​        本次环境配置如下：</p>\n<img src=\"/2020/03/28/harbor/harbor%E6%90%AD%E5%BB%BAdocker%E7%A7%81%E6%9C%89%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/1.png\" style=\"zoom:50%;\">\n\n<ul>\n<li><a href=\"https://schnappi618.github.io/2020/03/07/%E5%88%A9%E7%94%A8docker%E5%AE%89%E8%A3%85%E5%90%AF%E5%8A%A8ClickHouse/\">docker安装参考</a></li>\n<li><a href=\"https://schnappi618.github.io/2020/03/28/docker-compose%E5%AE%9A%E5%88%B6clickhouse%E9%85%8D%E7%BD%AE%E5%90%AF%E5%8A%A8/\">docker-compose安装参考</a></li>\n</ul>\n<h2 id=\"2、搭建过程\"><a href=\"#2、搭建过程\" class=\"headerlink\" title=\"2、搭建过程\"></a>2、搭建过程</h2><p>​        目前Harbor最新版本为1.10.1，<a href=\"https://github.com/goharbor/harbor/releases/download/v1.10.1/harbor-offline-installer-v1.10.1.tgz\" target=\"_blank\" rel=\"noopener\">可点击此处下载该版本安装包</a></p>\n<h4 id=\"1、下载解压\"><a href=\"#1、下载解压\" class=\"headerlink\" title=\"1、下载解压\"></a>1、下载解压</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@xxxx harbor]<span class=\"comment\"># ll -h</span></span><br><span class=\"line\">total 643M</span><br><span class=\"line\">-rw-r--r-- 1 root root 643M Mar 26 00:24 harbor-offline-installer-v1.10.1.tgz</span><br><span class=\"line\"><span class=\"comment\"># 解压该安装包</span></span><br><span class=\"line\">[root@xxxx harbor]<span class=\"comment\"># tar zxvf harbor-offline-installer-v1.10.1.tgz </span></span><br><span class=\"line\">harbor/harbor.v1.10.1.tar.gz</span><br><span class=\"line\">harbor/prepare\t\t\t\t<span class=\"comment\"># 执行一些创建目录等准备工作的脚本</span></span><br><span class=\"line\">harbor/LICENSE</span><br><span class=\"line\">harbor/install.sh\t\t\t<span class=\"comment\"># harbor安装脚本，配置文件修改完成后直接执行该脚本，若无报错，即可安装完成</span></span><br><span class=\"line\">harbor/common.sh\t\t\t<span class=\"comment\"># 安装前检查docker、docker-compose等基础环境是否符合安装要求脚本,install.sh脚本中将该脚本先执行</span></span><br><span class=\"line\">harbor/harbor.yml\t\t\t<span class=\"comment\"># harbor的配置文件</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、harbor配置\"><a href=\"#2、harbor配置\" class=\"headerlink\" title=\"2、harbor配置\"></a>2、harbor配置</h4><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 若不需要进行变动，则修改hostname即可</span></span><br><span class=\"line\"><span class=\"comment\"># Configuration file of Harbor</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The IP address or hostname to access admin UI and registry service.</span></span><br><span class=\"line\"><span class=\"comment\"># DO NOT use localhost or 127.0.0.1, because Harbor needs to be accessed by external clients.</span></span><br><span class=\"line\"><span class=\"attr\">hostname:</span> <span class=\"string\">x.x.x.x</span>\t\t\t\t<span class=\"comment\"># 修改为自己搭建主机的ip即可</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、harbor-yml相关配置解释\"><a href=\"#3、harbor-yml相关配置解释\" class=\"headerlink\" title=\"3、harbor.yml相关配置解释\"></a>3、harbor.yml相关配置解释</h4><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">[root@xxxx</span> <span class=\"string\">harbor]#</span> <span class=\"string\">vim</span> <span class=\"string\">harbor.yml</span></span><br><span class=\"line\"><span class=\"comment\"># hostname: 指定主机名，不能指定为127.0.0.1或localhost或0.0.0.0</span></span><br><span class=\"line\"><span class=\"attr\">hostname:</span> <span class=\"string\">reg.mydomain.com</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># http配置：但为了安全，业务生产环境中官方不建议使用http协议，会容易遭到中间人攻击</span></span><br><span class=\"line\"><span class=\"attr\">http:</span></span><br><span class=\"line\">  <span class=\"comment\"># 配置http端口，默认为80</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># https配置，后面会描述如何开启harbor的https配置</span></span><br><span class=\"line\"><span class=\"attr\">https:</span></span><br><span class=\"line\">  <span class=\"comment\"># https端口配置，默认为443，可用于访问harbor以及其中的docker push等命令</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">443</span></span><br><span class=\"line\">  <span class=\"comment\"># ssl证书的路径</span></span><br><span class=\"line\">  <span class=\"attr\">certificate:</span> <span class=\"string\">/your/certificate/path</span></span><br><span class=\"line\">  <span class=\"comment\"># ssl密钥路径</span></span><br><span class=\"line\">  <span class=\"attr\">private_key:</span> <span class=\"string\">/your/private/key/path</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 是否开启外部代理，启用后，将不使用前面配置的hostname访问，默认未开启</span></span><br><span class=\"line\"><span class=\"attr\">external_url:</span> <span class=\"string\">https://reg.mydomain.com:8433</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># harbor默认管理员密码，可用于web页面登录，默认用户名为admin，密码为Harbor12345</span></span><br><span class=\"line\"><span class=\"attr\">harbor_admin_password:</span> <span class=\"string\">Harbor12345</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Harbor DB配置，harbor中默认提供了数据库组件，也可以去掉默认数据库组件，使用外部数据库，但官方文档描述说仅支持PostgreSQL数据库，使用外部数据库需要启动external_database参数并进行配置，也可启用外部redis服务</span></span><br><span class=\"line\"><span class=\"attr\">database:</span></span><br><span class=\"line\">  <span class=\"comment\"># 数据库密码</span></span><br><span class=\"line\">  <span class=\"attr\">password:</span> <span class=\"string\">root123</span></span><br><span class=\"line\">  <span class=\"comment\"># 空闲连接池最大连接数，该值小于等于0时，空闲连接池将不会保留任何连接</span></span><br><span class=\"line\">  <span class=\"attr\">max_idle_conns:</span> <span class=\"number\">50</span></span><br><span class=\"line\">  <span class=\"comment\"># 与数据库的最大打开的连接数，该值小于等于0时，表示无限制</span></span><br><span class=\"line\">  <span class=\"attr\">max_open_conns:</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"comment\"># external_database:</span></span><br><span class=\"line\"><span class=\"comment\">#   harbor:</span></span><br><span class=\"line\"><span class=\"comment\">#     host: harbor_db_host</span></span><br><span class=\"line\"><span class=\"comment\">#     port: harbor_db_port</span></span><br><span class=\"line\"><span class=\"comment\">#     db_name: harbor_db_name</span></span><br><span class=\"line\"><span class=\"comment\">#     username: harbor_db_username</span></span><br><span class=\"line\"><span class=\"comment\">#     password: harbor_db_password</span></span><br><span class=\"line\"><span class=\"comment\">#     ssl_mode: disable</span></span><br><span class=\"line\"><span class=\"comment\">#     max_idle_conns: 2</span></span><br><span class=\"line\"><span class=\"comment\">#     max_open_conns: 0</span></span><br><span class=\"line\"><span class=\"comment\">#   clair:</span></span><br><span class=\"line\"><span class=\"comment\">#     host: clair_db_host</span></span><br><span class=\"line\"><span class=\"comment\">#     port: clair_db_port</span></span><br><span class=\"line\"><span class=\"comment\">#     db_name: clair_db_name</span></span><br><span class=\"line\"><span class=\"comment\">#     username: clair_db_username</span></span><br><span class=\"line\"><span class=\"comment\">#     password: clair_db_password</span></span><br><span class=\"line\"><span class=\"comment\">#     ssl_mode: disable</span></span><br><span class=\"line\"><span class=\"comment\">#   notary_signer:</span></span><br><span class=\"line\"><span class=\"comment\">#     host: notary_signer_db_host</span></span><br><span class=\"line\"><span class=\"comment\">#     port: notary_signer_db_port</span></span><br><span class=\"line\"><span class=\"comment\">#     db_name: notary_signer_db_name</span></span><br><span class=\"line\"><span class=\"comment\">#     username: notary_signer_db_username</span></span><br><span class=\"line\"><span class=\"comment\">#     password: notary_signer_db_password</span></span><br><span class=\"line\"><span class=\"comment\">#     ssl_mode: disable</span></span><br><span class=\"line\"><span class=\"comment\">#   notary_server:</span></span><br><span class=\"line\"><span class=\"comment\">#     host: notary_server_db_host</span></span><br><span class=\"line\"><span class=\"comment\">#     port: notary_server_db_port</span></span><br><span class=\"line\"><span class=\"comment\">#     db_name: notary_server_db_name</span></span><br><span class=\"line\"><span class=\"comment\">#     username: notary_server_db_username</span></span><br><span class=\"line\"><span class=\"comment\">#     password: notary_server_db_password</span></span><br><span class=\"line\"><span class=\"comment\">#     ssl_mode: disable</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># external_redis:</span></span><br><span class=\"line\"><span class=\"comment\">#   host: redis</span></span><br><span class=\"line\"><span class=\"comment\">#   port: 6379</span></span><br><span class=\"line\"><span class=\"comment\">#   password:</span></span><br><span class=\"line\"><span class=\"comment\">#   # db_index 0 is for core, it's unchangeable</span></span><br><span class=\"line\"><span class=\"comment\">#   registry_db_index: 1</span></span><br><span class=\"line\"><span class=\"comment\">#   jobservice_db_index: 2</span></span><br><span class=\"line\"><span class=\"comment\">#   chartmuseum_db_index: 3</span></span><br><span class=\"line\"><span class=\"comment\">#   clair_db_index: 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 主机上存储harbor数据的位置</span></span><br><span class=\"line\"><span class=\"attr\">data_volume:</span> <span class=\"string\">/data</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># harbor默认将图像和图表数据存储在本地上，storage_service配置其可以使用其他的存储后端存储，其中可以配置CA证书路径、filesystem等配置</span></span><br><span class=\"line\"><span class=\"comment\"># storage_service:</span></span><br><span class=\"line\"><span class=\"comment\">#   ca_bundle:</span></span><br><span class=\"line\"><span class=\"comment\">#   filesystem:</span></span><br><span class=\"line\"><span class=\"comment\">#     maxthreads: 100</span></span><br><span class=\"line\"><span class=\"comment\">#   # set disable to true when you want to disable registry redirect</span></span><br><span class=\"line\"><span class=\"comment\">#   redirect:</span></span><br><span class=\"line\"><span class=\"comment\">#     disabled: false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Clair镜像扫描配置，检查容器基础框架的安全性，其原理还未研究，之后补充。harbor默认检查时间间隔为12h，设置为0表示禁止扫描</span></span><br><span class=\"line\"><span class=\"attr\">clair:</span></span><br><span class=\"line\">  <span class=\"comment\"># The interval of clair updaters, the unit is hour, set to 0 to disable the updaters.</span></span><br><span class=\"line\">  <span class=\"attr\">updaters_interval:</span> <span class=\"number\">12</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># jobservice是harbor的其中一个组件，主要负责镜像复制，具体原理后续补充</span></span><br><span class=\"line\"><span class=\"attr\">jobservice:</span></span><br><span class=\"line\">  <span class=\"comment\"># Maximum number of job workers in job service</span></span><br><span class=\"line\">  <span class=\"attr\">max_job_workers:</span> <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">notification:</span></span><br><span class=\"line\">  <span class=\"comment\"># Maximum retry count for webhook job</span></span><br><span class=\"line\">  <span class=\"attr\">webhook_job_max_retry:</span> <span class=\"number\">10</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"attr\">chart:</span></span><br><span class=\"line\">  <span class=\"comment\"># Change the value of absolute_url to enabled can enable absolute url in chart</span></span><br><span class=\"line\">  <span class=\"attr\">absolute_url:</span> <span class=\"string\">disabled</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># 日志配置，harbor默认使用rsyslog来收集日志</span></span><br><span class=\"line\"><span class=\"attr\">log:</span></span><br><span class=\"line\">  <span class=\"comment\"># 设置日志级别，options are debug, info, warning, error, fatal</span></span><br><span class=\"line\">  <span class=\"attr\">level:</span> <span class=\"string\">info</span></span><br><span class=\"line\">  <span class=\"comment\"># configs for logs in local storage</span></span><br><span class=\"line\">  <span class=\"attr\">local:</span></span><br><span class=\"line\">    <span class=\"comment\"># Log files are rotated log_rotate_count times before being removed. If count is 0, old versions are removed rather than rotated.</span></span><br><span class=\"line\">    <span class=\"attr\">rotate_count:</span> <span class=\"number\">50</span></span><br><span class=\"line\">    <span class=\"comment\"># 日志大小，可使用k，M，G作为单位</span></span><br><span class=\"line\">    <span class=\"attr\">rotate_size:</span> <span class=\"string\">200M</span></span><br><span class=\"line\">    <span class=\"comment\"># 日志存储路径</span></span><br><span class=\"line\">    <span class=\"attr\">location:</span> <span class=\"string\">/var/log/harbor</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 启用该选项可将日志转发到rsyslog服务器</span></span><br><span class=\"line\">  <span class=\"comment\"># external_endpoint:</span></span><br><span class=\"line\">  <span class=\"comment\">#   # protocol used to transmit log to external endpoint, options is tcp or udp</span></span><br><span class=\"line\">  <span class=\"comment\">#   protocol: tcp</span></span><br><span class=\"line\">  <span class=\"comment\">#   # The host of external endpoint</span></span><br><span class=\"line\">  <span class=\"comment\">#   host: localhost</span></span><br><span class=\"line\">  <span class=\"comment\">#   # Port of external endpoint</span></span><br><span class=\"line\">  <span class=\"comment\">#   port: 5140</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 代理配置</span></span><br><span class=\"line\"><span class=\"attr\">proxy:</span></span><br><span class=\"line\">  <span class=\"attr\">http_proxy:</span></span><br><span class=\"line\">  <span class=\"attr\">https_proxy:</span></span><br><span class=\"line\">  <span class=\"comment\"># no_proxy endpoints will appended to 127.0.0.1,localhost,.local,.internal,log,db,redis,nginx,core,portal,postgresql,jobservice,registry,registryctl,clair,chartmuseum,notary-server</span></span><br><span class=\"line\">  <span class=\"attr\">no_proxy:</span></span><br><span class=\"line\">  <span class=\"attr\">components:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">core</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">jobservice</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">clair</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4、配置启动\"><a href=\"#4、配置启动\" class=\"headerlink\" title=\"4、配置启动\"></a>4、配置启动</h4><p>​        这里仅先作为测试使用，所以仅修改了hostname、data、log目录，并关闭了https服务，使用默认的http服务以便于测试查看，修改记录如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">[root@xxx</span> <span class=\"string\">harbor]#</span> <span class=\"string\">vim</span> <span class=\"string\">harbor/harbor.yml</span></span><br><span class=\"line\"><span class=\"attr\">hostname:</span> <span class=\"number\">10.162</span><span class=\"number\">.17</span><span class=\"number\">.78</span></span><br><span class=\"line\"><span class=\"attr\">data_volume:</span> <span class=\"string\">/work/docker/harbor/data</span></span><br><span class=\"line\"><span class=\"attr\">log:</span></span><br><span class=\"line\">  <span class=\"attr\">level:</span> <span class=\"string\">info</span></span><br><span class=\"line\">  <span class=\"attr\">rotate_count:</span> <span class=\"number\">50</span></span><br><span class=\"line\">  <span class=\"attr\">rotate_size:</span> <span class=\"string\">200M</span></span><br><span class=\"line\">  <span class=\"attr\">location:</span> <span class=\"string\">/work/docker/harbor/log</span></span><br></pre></td></tr></table></figure>\n\n<p>​        配置文件修改完成后，执行install.sh文件进行安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 执行安装脚本，以下哪一步报错对应解决即可</span></span><br><span class=\"line\">[root@xxxx harbor]<span class=\"comment\"># ./install.sh </span></span><br><span class=\"line\"><span class=\"comment\">## 1. 检查docker是否安装及docker版本</span></span><br><span class=\"line\">[Step 0]: checking <span class=\"keyword\">if</span> docker is installed ...</span><br><span class=\"line\"></span><br><span class=\"line\">Note: docker version: 18.03.1</span><br><span class=\"line\"><span class=\"comment\">## 2. 检查docker-compose是否安装及对应版本</span></span><br><span class=\"line\">[Step 1]: checking docker-compose is installed ...</span><br><span class=\"line\"></span><br><span class=\"line\">Note: docker-compose version: 1.25.4</span><br><span class=\"line\"><span class=\"comment\">## 3. 加载harbor相关镜像</span></span><br><span class=\"line\">[Step 2]: loading Harbor images ...</span><br><span class=\"line\">47a4bb1cfbc7: Loading layer [==================================================&gt;]  34.26MB/34.26MB</span><br><span class=\"line\">c2d9cf7a4eaf: Loading layer [==================================================&gt;]  9.056MB/9.056MB</span><br><span class=\"line\">...</span><br><span class=\"line\">54b809bfb5ec: Loading layer [==================================================&gt;]  10.24kB/10.24kB</span><br><span class=\"line\">Loaded image: goharbor/harbor-db:v1.10.1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 4. 准备环境,查看config.yml其中的hostname是否配置正确</span></span><br><span class=\"line\">[Step 3]: preparing environment ...</span><br><span class=\"line\"><span class=\"comment\">## 5. 准备配置文件</span></span><br><span class=\"line\">[Step 4]: preparing harbor configs ...</span><br><span class=\"line\">prepare base dir is <span class=\"built_in\">set</span> to /work/docker/harbor/harbor</span><br><span class=\"line\">WARNING:root:WARNING: HTTP protocol is insecure. Harbor will deprecate http protocol <span class=\"keyword\">in</span> the future. Please make sure to upgrade to https</span><br><span class=\"line\">Generated configuration file: /config/<span class=\"built_in\">log</span>/logrotate.conf</span><br><span class=\"line\">Generated configuration file: /config/<span class=\"built_in\">log</span>/rsyslog_docker.conf</span><br><span class=\"line\">Generated configuration file: /config/nginx/nginx.conf</span><br><span class=\"line\">Generated configuration file: /config/core/env</span><br><span class=\"line\">Generated configuration file: /config/core/app.conf</span><br><span class=\"line\">Generated configuration file: /config/registry/config.yml</span><br><span class=\"line\">Generated configuration file: /config/registryctl/env</span><br><span class=\"line\">Generated configuration file: /config/db/env</span><br><span class=\"line\">Generated configuration file: /config/jobservice/env</span><br><span class=\"line\">Generated configuration file: /config/jobservice/config.yml</span><br><span class=\"line\">Generated and saved secret to file: /secret/keys/secretkey</span><br><span class=\"line\">Generated certificate, key file: /secret/core/private_key.pem, cert file: /secret/registry/root.crt</span><br><span class=\"line\">Generated configuration file: /compose_location/docker-compose.yml</span><br><span class=\"line\">Clean up the input dir</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 6. 启动harbor</span></span><br><span class=\"line\">[Step 5]: starting Harbor ...</span><br><span class=\"line\">Creating network <span class=\"string\">\"harbor_harbor\"</span> with the default driver</span><br><span class=\"line\">Creating harbor-log ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Creating harbor-db     ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Creating registryctl   ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Creating harbor-portal ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Creating registry      ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Creating redis         ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Creating harbor-core   ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Creating nginx             ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Creating harbor-jobservice ... <span class=\"keyword\">done</span></span><br><span class=\"line\">✔ ----Harbor has been installed and started successfully.----</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 可看出，最终harbor启动了nginx、redis、registry、db、log等模块</span></span><br><span class=\"line\">[root@xxx harbor]<span class=\"comment\"># docker ps</span></span><br><span class=\"line\">CONTAINER ID        IMAGE                                                     COMMAND                  CREATED             STATUS                   PORTS                       NAMES</span><br><span class=\"line\">b2a00d220528        goharbor/harbor-jobservice:v1.10.1                        <span class=\"string\">\"/harbor/harbor_jobs…\"</span>   4 minutes ago       Up 4 minutes (healthy)                               harbor-jobservice</span><br><span class=\"line\">3bbf43ca6e63        goharbor/nginx-photon:v1.10.1                             <span class=\"string\">\"nginx -g 'daemon of…\"</span>   4 minutes ago       Up 4 minutes (healthy)   0.0.0.0:80-&gt;8080/tcp        nginx</span><br><span class=\"line\">f3024394558d        goharbor/harbor-core:v1.10.1                              <span class=\"string\">\"/harbor/harbor_core\"</span>    4 minutes ago       Up 4 minutes (healthy)                               harbor-core</span><br><span class=\"line\">a2a1f9f07e4e        goharbor/redis-photon:v1.10.1                             <span class=\"string\">\"redis-server /etc/r…\"</span>   4 minutes ago       Up 4 minutes (healthy)   6379/tcp                    redis</span><br><span class=\"line\">042965f58cf7        goharbor/registry-photon:v2.7.1-patch-2819-2553-v1.10.1   <span class=\"string\">\"/home/harbor/entryp…\"</span>   4 minutes ago       Up 4 minutes (healthy)   5000/tcp                    registry</span><br><span class=\"line\">cbd4a760d1ee        goharbor/harbor-portal:v1.10.1                            <span class=\"string\">\"nginx -g 'daemon of…\"</span>   4 minutes ago       Up 4 minutes (healthy)   8080/tcp                    harbor-portal</span><br><span class=\"line\">a2e008d5258d        goharbor/harbor-registryctl:v1.10.1                       <span class=\"string\">\"/home/harbor/start.…\"</span>   4 minutes ago       Up 4 minutes (healthy)                               registryctl</span><br><span class=\"line\">f8a3567b9172        goharbor/harbor-db:v1.10.1                                <span class=\"string\">\"/docker-entrypoint.…\"</span>   4 minutes ago       Up 4 minutes (healthy)   5432/tcp                    harbor-db</span><br><span class=\"line\">84343b0a3fb5        goharbor/harbor-log:v1.10.1                               <span class=\"string\">\"/bin/sh -c /usr/loc…\"</span>   4 minutes ago       Up 4 minutes (healthy)   127.0.0.1:1514-&gt;10514/tcp   harbor-log</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 配置文件中设置的数据及日志目录都分别有各个模块的数据</span></span><br><span class=\"line\">[root@xxx harbor]<span class=\"comment\"># ls data/</span></span><br><span class=\"line\">ca_download  database  job_logs  psc  redis  registry  secret</span><br><span class=\"line\">[root@xxx harbor]<span class=\"comment\"># ls log/</span></span><br><span class=\"line\">core.log  jobservice.log  portal.log  postgresql.log  proxy.log  redis.log  registryctl.log  registry.log</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、镜像上传及拉取测试\"><a href=\"#三、镜像上传及拉取测试\" class=\"headerlink\" title=\"三、镜像上传及拉取测试\"></a>三、镜像上传及拉取测试</h3><p>​        目前，Harbor服务已经启动，可通过web登录进入并搭建私有镜像仓库</p>\n<h4 id=\"1、登陆\"><a href=\"#1、登陆\" class=\"headerlink\" title=\"1、登陆\"></a>1、登陆</h4><p>​            <img src=\"/2020/03/28/harbor/harbor%E6%90%AD%E5%BB%BAdocker%E7%A7%81%E6%9C%89%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/2.png\" style=\"zoom:25%;\">    </p>\n<h4 id=\"2、新建私有镜像仓库\"><a href=\"#2、新建私有镜像仓库\" class=\"headerlink\" title=\"2、新建私有镜像仓库\"></a>2、新建私有镜像仓库</h4><p>​                                    <img src=\"/2020/03/28/harbor/harbor%E6%90%AD%E5%BB%BAdocker%E7%A7%81%E6%9C%89%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/3.png\" style=\"zoom:25%;\"></p>\n<p>​                    <img src=\"/2020/03/28/harbor/harbor%E6%90%AD%E5%BB%BAdocker%E7%A7%81%E6%9C%89%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/4.png\" style=\"zoom:25%;\"></p>\n<h4 id=\"3、客户端免https登陆\"><a href=\"#3、客户端免https登陆\" class=\"headerlink\" title=\"3、客户端免https登陆\"></a>3、客户端免https登陆</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 此时直接使用docker login登陆到harbor中，会报错，下面hostname和port是harbor的配置文件中设置的名称及端口</span></span><br><span class=\"line\">[root@xxxx harbor]<span class=\"comment\"># docker login [hostname]:[port]</span></span><br><span class=\"line\">Username: admin</span><br><span class=\"line\">Password: </span><br><span class=\"line\">Error response from daemon: Get https://[hostname:port]/v2/: http: server gave HTTP response to HTTPS client</span><br><span class=\"line\"><span class=\"comment\"># 这是由于虽然harbor配置的是http端口启动，但客户端默认使用的是https协议，所以需要对docker做以下修改,在文件末尾添加insecure-registries</span></span><br><span class=\"line\">[root@xxxx harbor]<span class=\"comment\"># vim /etc/docker/daemon.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"graph\"</span>: <span class=\"string\">\"/work/docker/data\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"insecure-registries\"</span>: [ <span class=\"string\">\"hostname:port\"</span> ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 修改后，重启docker使其生效</span></span><br><span class=\"line\">[root@xxxx harbor]<span class=\"comment\"># systemctl restart docker.service</span></span><br><span class=\"line\"><span class=\"comment\"># 利用docker info查看是否添加上</span></span><br><span class=\"line\">[root@xxxx harbor]<span class=\"comment\"># docker info</span></span><br><span class=\"line\">Containers: 10</span><br><span class=\"line\"> Running: 1</span><br><span class=\"line\"> Paused: 0</span><br><span class=\"line\"> Stopped: 9</span><br><span class=\"line\">Images: 37</span><br><span class=\"line\">...</span><br><span class=\"line\">Experimental: <span class=\"literal\">false</span></span><br><span class=\"line\">Insecure Registries:</span><br><span class=\"line\"> hostname:port</span><br><span class=\"line\"> 127.0.0.0/8</span><br><span class=\"line\">Live Restore Enabled: <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<p>​        上面类似CentOs、ubuntu的设置客户端免https登陆的方法，但mac等安装了docker desktop主机上并没有这个文件，需要在desktop中修改，完成后重启docker</p>\n<p>​            <img src=\"/2020/03/28/harbor/harbor%E6%90%AD%E5%BB%BAdocker%E7%A7%81%E6%9C%89%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/5.png\" alt=\"image-20200329180536770\" style=\"zoom:33%;\"></p>\n<h4 id=\"4、上传镜像\"><a href=\"#4、上传镜像\" class=\"headerlink\" title=\"4、上传镜像\"></a>4、上传镜像</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@xxxx harbor]<span class=\"comment\"># docker login hostname:port</span></span><br><span class=\"line\">Username: admin</span><br><span class=\"line\">Password: </span><br><span class=\"line\">Login Succeeded</span><br><span class=\"line\">[root@xxxx harbor]<span class=\"comment\"># docker tag clickhouse-server-demo:1.0 hostname:port/clickhouse/clickhouse-server-demo:1.0</span></span><br><span class=\"line\">[root@xxxx harbor]<span class=\"comment\"># docker push hostname:port/clickhouse/clickhouse-server-demo:1.0</span></span><br><span class=\"line\">The push refers to repository [hostname:port/clickhouse/clickhouse-server-demo]</span><br><span class=\"line\">4e418dcae3b7: Pushed </span><br><span class=\"line\">e6fad812466e: Pushed </span><br><span class=\"line\">b05b15db2cd1: Pushed </span><br><span class=\"line\">1c79e943c270: Pushed </span><br><span class=\"line\">0dbb638d17fd: Pushed </span><br><span class=\"line\">a5c6f2a2f0f4: Pushed </span><br><span class=\"line\">e0367eb23283: Pushed </span><br><span class=\"line\">16542a8fc3be: Pushed </span><br><span class=\"line\">6597da2e2e52: Pushed </span><br><span class=\"line\">977183d4e999: Pushed </span><br><span class=\"line\">c8be1b8f4d60: Pushed </span><br><span class=\"line\">1.0: digest: sha256:6247b85f528c16e534a6f8c3be2b7baa70054d0be0a4ffa42b256259034c3268 size: 2617</span><br></pre></td></tr></table></figure>\n\n<p>​    <img src=\"/2020/03/28/harbor/harbor%E6%90%AD%E5%BB%BAdocker%E7%A7%81%E6%9C%89%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/6.png\" style=\"zoom:33%;\"></p>\n<h4 id=\"5、下载镜像\"><a href=\"#5、下载镜像\" class=\"headerlink\" title=\"5、下载镜像\"></a>5、下载镜像</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 用另外一个机器当测试机，拉取镜像，从harbor web页面也可发现下载数变为了1</span></span><br><span class=\"line\">[root@xx ~]<span class=\"comment\"># docker pull hostname:port/clickhouse/clickhouse-server-demo:1.0</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/2020/03/28/harbor/harbor%E6%90%AD%E5%BB%BAdocker%E7%A7%81%E6%9C%89%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/7.png\" style=\"zoom:25%;\">\n\n<img src=\"/2020/03/28/harbor/harbor%E6%90%AD%E5%BB%BAdocker%E7%A7%81%E6%9C%89%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/8.png\" style=\"zoom:25%;\">\n","categories":["harbor"],"tags":["docker","harbor"]},{"title":"docker-compose定制clickhouse配置启动","url":"/2020/03/28/clickhouse/docker-compose%E5%AE%9A%E5%88%B6clickhouse%E9%85%8D%E7%BD%AE%E5%90%AF%E5%8A%A8/","content":"<p>​        上一篇介绍<a href=\"https://schnappi618.github.io/2020/03/21/clickhouse%E7%9A%84docker%E6%9E%B6%E6%9E%84/\">clickhouse的docker架构</a>中通过剥离ClickHouse提供的官方docker代码中server的必需代码打包了一个完整的clickhouse的镜像，但启动之后的配置文件都是默认的，http、MySQL访问接口以及用户权限等都未进行设置，其clickhouse服务在环境中相当于裸奔状态，本文将通过docker-compose设置clickhouse的配置文件、用户设置等来完成其定制化启动。</p>\n<p><strong>参考文档：</strong></p>\n<ul>\n<li><a href=\"https://docs.docker.com/compose/\" target=\"_blank\" rel=\"noopener\">docker-compose官方文档</a></li>\n<li><a href=\"https://clickhouse.tech/docs/zh/operations/server_settings/settings/\" target=\"_blank\" rel=\"noopener\">clickhouse-server设置文档</a></li>\n</ul>\n<h2 id=\"一、docker-compose简介\"><a href=\"#一、docker-compose简介\" class=\"headerlink\" title=\"一、docker-compose简介\"></a>一、docker-compose简介</h2><h3 id=\"1、什么是docker-compose\"><a href=\"#1、什么是docker-compose\" class=\"headerlink\" title=\"1、什么是docker-compose\"></a>1、什么是docker-compose</h3><p>​        docker-compose是一个用户定义并运行多个容器的Docker工具，可以通过YAML文件配置服务，并通过命令按照文件配置启动该服务。</p>\n<p>​        <strong>docker-compose一般使用的步骤：</strong></p>\n<ul>\n<li><p>使用Dockerfile或打包好的docker镜像作为应用程序的基础环境</p>\n</li>\n<li><p>docker-compose.yml文件定义构成应用程序的服务，例如：网络环境，端口等情况</p>\n</li>\n<li><p>执行<code>docker-compose up</code>命令启动并运行应用程序</p>\n</li>\n</ul>\n<h3 id=\"2、docker-compose安装\"><a href=\"#2、docker-compose安装\" class=\"headerlink\" title=\"2、docker-compose安装\"></a>2、docker-compose安装</h3><p>​        若为windows或mac安装了docker desktop版本，均已经自带了docker-compose命令，直接使用即可，若为其他CentOS或ubuntu等的linux版本，安装docker以后还需要另外安装docker-compose命令(目前最新的稳定版本为1.25.4，所以下面的安装方法为1.25.4版本，后续若需要最新的版本，可到<a href=\"https://github.com/docker/compose/releases\" target=\"_blank\" rel=\"noopener\">docker-compose的github网站上</a>安装即可)，安装方法为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -L https://github.com/docker/compose/releases/download/1.25.4/docker-compose-`uname -s`-`uname -m` -o /usr/<span class=\"built_in\">local</span>/bin/docker-compose</span><br><span class=\"line\">chmod +x /usr/<span class=\"built_in\">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"二、docker-compose定制clickhouse配置\"><a href=\"#二、docker-compose定制clickhouse配置\" class=\"headerlink\" title=\"二、docker-compose定制clickhouse配置\"></a>二、docker-compose定制clickhouse配置</h2><h3 id=\"1、文件结构\"><a href=\"#1、文件结构\" class=\"headerlink\" title=\"1、文件结构\"></a>1、文件结构</h3><p>​        新建一个目录用来放置docker-compose启动clickhouse的配置文件等信息，具体文件结构如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌─[bulubulu@localhost] - [~/clickhouse/docker_compose] - [2020-03-28 10:01:47]</span><br><span class=\"line\">└─[0] &lt;&gt; tree .</span><br><span class=\"line\">.</span><br><span class=\"line\">├── config.xml</span><br><span class=\"line\">├── data</span><br><span class=\"line\">├── docker-compose.yml</span><br><span class=\"line\">├── <span class=\"built_in\">log</span></span><br><span class=\"line\">│   ├── clickhouse-server.err.log</span><br><span class=\"line\">│   └── clickhouse-server.log</span><br><span class=\"line\">└── users.xml</span><br><span class=\"line\"><span class=\"comment\">## config.xml：clickhouse-server的配置文件</span></span><br><span class=\"line\"><span class=\"comment\">## data：利用docker启动clickhouse后的数据目录</span></span><br><span class=\"line\"><span class=\"comment\">## docker-compose.yml：docker-compose的配置文件</span></span><br><span class=\"line\"><span class=\"comment\">## log：日志目录</span></span><br><span class=\"line\"><span class=\"comment\">## user.xml：clickhouse-server的用户配置文件</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、docker-compose-yml文件内容\"><a href=\"#2、docker-compose-yml文件内容\" class=\"headerlink\" title=\"2、docker-compose.yml文件内容\"></a>2、docker-compose.yml文件内容</h3><p>​        docker-compose.yml为compose的核心，该文件的大部分指令均与<code>docker run</code>相关参数含义类似。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'3'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">\t<span class=\"comment\"># 服务名称为：clickhouse-server</span></span><br><span class=\"line\">  <span class=\"attr\">clickhouse-server:</span></span><br><span class=\"line\">  \t<span class=\"comment\"># image：指定镜像，可以为镜像名称或镜像id，如果本地没有该镜像，compose会尝试pull该镜像</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">clickhouse-server-demo:1.0</span></span><br><span class=\"line\">    <span class=\"comment\"># container_name：指定容器名称，默认为 项目名称_服务名称_序号 的格式</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">clickhouse-server_1</span></span><br><span class=\"line\">    <span class=\"comment\"># hostname：指定容器主机名</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">clickhouse-server_1</span></span><br><span class=\"line\">    <span class=\"comment\"># networks配置该容器连接的网络，指定到文件末尾定义的networks</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">test-bridge</span></span><br><span class=\"line\">    <span class=\"comment\"># ports：暴露端口信息，格式为 宿主机端口:容器端口；仅指定容器端口时，宿主机会随机选择端口，类似于docker run -p</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">\"8123:8123\"</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">\"9000:9000\"</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">\"9004:9004\"</span></span><br><span class=\"line\">    <span class=\"comment\"># expose：暴露端口，但不映射到宿主机，所以外部无法访问该端口，仅能容器内部访问使用</span></span><br><span class=\"line\">    <span class=\"attr\">expose:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">9009</span></span><br><span class=\"line\">    <span class=\"comment\"># volumes：数据卷挂载路径设置，类似于docker run --volumn=hostdir:containerDir，也可指定文件权限</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">    <span class=\"comment\"># 例如：将当前目录下的config.xml文件映射到容器中的/etc/clickhouse-server/config.xml文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./config.xml:/etc/clickhouse-server/config.xml</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./users.xml:/etc/clickhouse-server/users.xml</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./data:/var/lib/clickhouse</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./log/clickhouse-server.log:/var/log/clickhouse-server/clickhouse-server.log</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./log/clickhouse-server.err.log:/var/log/clickhouse-server/clickhouse-server.err.log</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\"><span class=\"comment\"># networks名称为test-bridge，和上面services中networks下的名称对应</span></span><br><span class=\"line\">  <span class=\"attr\">test-bridge:</span></span><br><span class=\"line\">  <span class=\"comment\"># external表示compose启动时会找到名为docker-compose-default的已存在的网络，若未找到该网络，则docker-compose up启动时会报错，同时通过 docker network ls 查看本地目前有哪些网络</span></span><br><span class=\"line\">    <span class=\"attr\">external:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">docker_compose_default</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、config-xml文件内容\"><a href=\"#3、config-xml文件内容\" class=\"headerlink\" title=\"3、config.xml文件内容\"></a>3、config.xml文件内容</h3><p>​        从docker-compose.yml文件中可以看出，该文件其实为clickhose-server的配置文件，本次基本使用了一些默认的配置，对clickhouse-server配置文件的解释可参考<a href=\"%5Bhttps://schnappi618.github.io/2020/03/28/clickhouse-server%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/%5D(https://schnappi618.github.io/2020/03/28/clickhouse-server%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/)\">clickhouse-server配置文件详解</a>，该文件内容如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">yandex</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">level</span>&gt;</span>trace<span class=\"tag\">&lt;/<span class=\"name\">level</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">log</span>&gt;</span>/var/log/clickhouse-server/clickhouse-server.log<span class=\"tag\">&lt;/<span class=\"name\">log</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">errorlog</span>&gt;</span>/var/log/clickhouse-server/clickhouse-server.err.log<span class=\"tag\">&lt;/<span class=\"name\">errorlog</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">size</span>&gt;</span>1000M<span class=\"tag\">&lt;/<span class=\"name\">size</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">count</span>&gt;</span>10<span class=\"tag\">&lt;/<span class=\"name\">count</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">logger</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">http_port</span>&gt;</span>8123<span class=\"tag\">&lt;/<span class=\"name\">http_port</span>&gt;</span>   <span class=\"comment\">&lt;!-- 通过url访问clickhouse的端口号 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tcp_port</span>&gt;</span>9000<span class=\"tag\">&lt;/<span class=\"name\">tcp_port</span>&gt;</span>     <span class=\"comment\">&lt;!-- 通过tcp访问clickhouse的端口号 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mysql_port</span>&gt;</span>9004<span class=\"tag\">&lt;/<span class=\"name\">mysql_port</span>&gt;</span>  <span class=\"comment\">&lt;!-- 通过mysql访问clickhouse的端口号 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- For HTTPS and SSL over native protocol. --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;https_port&gt;8443&lt;/https_port&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;tcp_ssl_port&gt;9440&lt;/tcp_ssl_port&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Used with https_port and tcp_ssl_port. Full ssl options list: https://github.com/yandex/ClickHouse/blob/master/contrib/libpoco/NetSSL_OpenSSL/include/Poco/Net/SSLManager.h#L71 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">openSSL</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">server</span>&gt;</span> <span class=\"comment\">&lt;!-- Used for https server AND secure tcp port --&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- openssl req -subj \"/CN=localhost\" -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout /etc/clickhouse-server/server.key -out /etc/clickhouse-server/server.crt --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">certificateFile</span>&gt;</span>/etc/clickhouse-server/server.crt<span class=\"tag\">&lt;/<span class=\"name\">certificateFile</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">privateKeyFile</span>&gt;</span>/etc/clickhouse-server/server.key<span class=\"tag\">&lt;/<span class=\"name\">privateKeyFile</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- openssl dhparam -out /etc/clickhouse-server/dhparam.pem 4096 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dhParamsFile</span>&gt;</span>/etc/clickhouse-server/dhparam.pem<span class=\"tag\">&lt;/<span class=\"name\">dhParamsFile</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">verificationMode</span>&gt;</span>none<span class=\"tag\">&lt;/<span class=\"name\">verificationMode</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">loadDefaultCAFile</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">loadDefaultCAFile</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">cacheSessions</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">cacheSessions</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">disableProtocols</span>&gt;</span>sslv2,sslv3<span class=\"tag\">&lt;/<span class=\"name\">disableProtocols</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">preferServerCiphers</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">preferServerCiphers</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">client</span>&gt;</span> <span class=\"comment\">&lt;!-- Used for connecting to https dictionary source --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">loadDefaultCAFile</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">loadDefaultCAFile</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">cacheSessions</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">cacheSessions</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">disableProtocols</span>&gt;</span>sslv2,sslv3<span class=\"tag\">&lt;/<span class=\"name\">disableProtocols</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">preferServerCiphers</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">preferServerCiphers</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- Use for self-signed: &lt;verificationMode&gt;none&lt;/verificationMode&gt; --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">invalidCertificateHandler</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!-- Use for self-signed: &lt;name&gt;AcceptCertificateHandler&lt;/name&gt; --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>RejectCertificateHandler<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">invalidCertificateHandler</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">client</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">openSSL</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Default root page on http[s] server. For example load UI from https://tabix.io/ when opening http://localhost:8123 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;http_server_default_response&gt;&lt;![CDATA[&lt;html ng-app=\"SMI2\"&gt;&lt;head&gt;&lt;base href=\"http://ui.tabix.io/\"&gt;&lt;/head&gt;&lt;body&gt;&lt;div ui-view=\"\" class=\"content-ui\"&gt;&lt;/div&gt;&lt;script src=\"http://loader.tabix.io/master.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;]]&gt;&lt;/http_server_default_response&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Port for communication between replicas. Used for data exchange. --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">interserver_http_port</span>&gt;</span>9009<span class=\"tag\">&lt;/<span class=\"name\">interserver_http_port</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Hostname that is used by other replicas to request this server.</span></span><br><span class=\"line\"><span class=\"comment\">         If not specified, than it is determined analoguous to 'hostname -f' command.</span></span><br><span class=\"line\"><span class=\"comment\">         This setting could be used to switch replication to another network interface.</span></span><br><span class=\"line\"><span class=\"comment\">      --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;interserver_http_host&gt;example.yandex.ru&lt;/interserver_http_host&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Listen specified host. use :: (wildcard IPv6 address), if you want to accept connections both with IPv4 and IPv6 from everywhere. --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- &lt;listen_host&gt;::&lt;/listen_host&gt; --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Same for hosts with disabled ipv6: --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- &lt;listen_host&gt;0.0.0.0&lt;/listen_host&gt; --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Default values - try listen localhost on ipv4 and ipv6: --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;listen_host&gt;::1&lt;/listen_host&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;listen_host&gt;127.0.0.1&lt;/listen_host&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">max_connections</span>&gt;</span>4096<span class=\"tag\">&lt;/<span class=\"name\">max_connections</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">keep_alive_timeout</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">keep_alive_timeout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Maximum number of concurrent queries. --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">max_concurrent_queries</span>&gt;</span>100<span class=\"tag\">&lt;/<span class=\"name\">max_concurrent_queries</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Set limit on number of open files (default: maximum). This setting makes sense on Mac OS X because getrlimit() fails to retrieve</span></span><br><span class=\"line\"><span class=\"comment\">         correct maximum value. --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- &lt;max_open_files&gt;262144&lt;/max_open_files&gt; --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Size of cache of uncompressed blocks of data, used in tables of MergeTree family.</span></span><br><span class=\"line\"><span class=\"comment\">         In bytes. Cache is single for server. Memory is allocated only on demand.</span></span><br><span class=\"line\"><span class=\"comment\">         Cache is used when 'use_uncompressed_cache' user setting turned on (off by default).</span></span><br><span class=\"line\"><span class=\"comment\">         Uncompressed cache is advantageous only for very short queries and in rare cases.</span></span><br><span class=\"line\"><span class=\"comment\">      --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">uncompressed_cache_size</span>&gt;</span>8589934592<span class=\"tag\">&lt;/<span class=\"name\">uncompressed_cache_size</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Approximate size of mark cache, used in tables of MergeTree family.</span></span><br><span class=\"line\"><span class=\"comment\">         In bytes. Cache is single for server. Memory is allocated only on demand.</span></span><br><span class=\"line\"><span class=\"comment\">         You should not lower this value.</span></span><br><span class=\"line\"><span class=\"comment\">      --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mark_cache_size</span>&gt;</span>5368709120<span class=\"tag\">&lt;/<span class=\"name\">mark_cache_size</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Path to data directory, with trailing slash. --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">path</span>&gt;</span>/var/lib/clickhouse/<span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Path to temporary data for processing hard queries. --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tmp_path</span>&gt;</span>/var/lib/clickhouse/tmp/<span class=\"tag\">&lt;/<span class=\"name\">tmp_path</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Path to configuration file with users, access rights, profiles of settings, quotas. --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">users_config</span>&gt;</span>users.xml<span class=\"tag\">&lt;/<span class=\"name\">users_config</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- &lt;users&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;default&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;password_sha256_hex&gt;8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92&lt;/password_sha256_hex&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;networks incl=\"networks\" replace=\"replace\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                &lt;ip&gt;127.0.0.1/0&lt;/ip&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;/networks&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;profile&gt;default&lt;/profile&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;quota&gt;default&lt;/quota&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;/default&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;ck&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;password_sha256_hex&gt;8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92&lt;/password_sha256_hex&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;networks incl=\"networks\" replace=\"replace\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                &lt;ip&gt;::/0&lt;/ip&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;/networks&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;profile&gt;readonly&lt;/profile&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;quota&gt;default&lt;/quota&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;/ck&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;/users&gt; --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Default profile of settings.. --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">default_profile</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">default_profile</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Default database. --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">default_database</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">default_database</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Server time zone could be set here.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">         Time zone is used when converting between String and DateTime types,</span></span><br><span class=\"line\"><span class=\"comment\">          when printing DateTime in text formats and parsing DateTime from text,</span></span><br><span class=\"line\"><span class=\"comment\">          it is used in date and time related functions, if specific time zone was not passed as an argument.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">         Time zone is specified as identifier from IANA time zone database, like UTC or Africa/Abidjan.</span></span><br><span class=\"line\"><span class=\"comment\">         If not specified, system time zone at server startup is used.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">         Please note, that server could display time zone alias instead of specified name.</span></span><br><span class=\"line\"><span class=\"comment\">         Example: W-SU is an alias for Europe/Moscow and Zulu is an alias for UTC.</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">timezone</span>&gt;</span>Asia/Shanghai<span class=\"tag\">&lt;/<span class=\"name\">timezone</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- You can specify umask here (see \"man umask\"). Server will apply it on startup.</span></span><br><span class=\"line\"><span class=\"comment\">         Number is always parsed as octal. Default umask is 027 (other users cannot read logs, data files, etc; group can only read).</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- &lt;umask&gt;022&lt;/umask&gt; --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Configuration of clusters that could be used in Distributed tables.</span></span><br><span class=\"line\"><span class=\"comment\">         https://clickhouse.yandex/reference_en.html#Distributed</span></span><br><span class=\"line\"><span class=\"comment\">      --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">remote_servers</span> <span class=\"attr\">incl</span>=<span class=\"string\">\"clickhouse_remote_servers\"</span> &gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- Test only shard config for testing distributed storage --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">test_shard_localhost</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">shard</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>localhost<span class=\"tag\">&lt;/<span class=\"name\">host</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>9000<span class=\"tag\">&lt;/<span class=\"name\">port</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">replica</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">shard</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">test_shard_localhost</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">remote_servers</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- If element has 'incl' attribute, then for it's value will be used corresponding substitution from another file.</span></span><br><span class=\"line\"><span class=\"comment\">         By default, path to file with substitutions is /etc/metrika.xml. It could be changed in config in 'include_from' element.</span></span><br><span class=\"line\"><span class=\"comment\">         Values for substitutions are specified in /yandex/name_of_substitution elements in that file.</span></span><br><span class=\"line\"><span class=\"comment\">      --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- ZooKeeper is used to store metadata about replicas, when using Replicated tables.</span></span><br><span class=\"line\"><span class=\"comment\">         Optional. If you don't use replicated tables, you could omit that.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">         See https://clickhouse.yandex/reference_en.html#Data%20replication</span></span><br><span class=\"line\"><span class=\"comment\">      --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">zookeeper</span> <span class=\"attr\">incl</span>=<span class=\"string\">\"zookeeper-servers\"</span> <span class=\"attr\">optional</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Substitutions for parameters of replicated tables.</span></span><br><span class=\"line\"><span class=\"comment\">          Optional. If you don't use replicated tables, you could omit that.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">         See https://clickhouse.yandex/reference_en.html#Creating%20replicated%20tables</span></span><br><span class=\"line\"><span class=\"comment\">      --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">macros</span> <span class=\"attr\">incl</span>=<span class=\"string\">\"macros\"</span> <span class=\"attr\">optional</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Reloading interval for embedded dictionaries, in seconds. Default: 3600. --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">builtin_dictionaries_reload_interval</span>&gt;</span>3600<span class=\"tag\">&lt;/<span class=\"name\">builtin_dictionaries_reload_interval</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Maximum session timeout, in seconds. Default: 3600. --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">max_session_timeout</span>&gt;</span>3600<span class=\"tag\">&lt;/<span class=\"name\">max_session_timeout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Default session timeout, in seconds. Default: 60. --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">default_session_timeout</span>&gt;</span>60<span class=\"tag\">&lt;/<span class=\"name\">default_session_timeout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Sending data to Graphite for monitoring. Several sections can be defined. --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">        interval - send every X second</span></span><br><span class=\"line\"><span class=\"comment\">        root_path - prefix for keys</span></span><br><span class=\"line\"><span class=\"comment\">        hostname_in_path - append hostname to root_path (default = true)</span></span><br><span class=\"line\"><span class=\"comment\">        metrics - send data from table system.metrics</span></span><br><span class=\"line\"><span class=\"comment\">        events - send data from table system.events</span></span><br><span class=\"line\"><span class=\"comment\">        asynchronous_metrics - send data from table system.asynchronous_metrics</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;graphite&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;host&gt;localhost&lt;/host&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;port&gt;42000&lt;/port&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;timeout&gt;0.1&lt;/timeout&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;interval&gt;60&lt;/interval&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;root_path&gt;one_min&lt;/root_path&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;hostname_in_path&gt;true&lt;hostname_in_path&gt;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        &lt;metrics&gt;true&lt;/metrics&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;events&gt;true&lt;/events&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;asynchronous_metrics&gt;true&lt;/asynchronous_metrics&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;/graphite&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;graphite&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;host&gt;localhost&lt;/host&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;port&gt;42000&lt;/port&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;timeout&gt;0.1&lt;/timeout&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;interval&gt;1&lt;/interval&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;root_path&gt;one_sec&lt;/root_path&gt;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        &lt;metrics&gt;true&lt;/metrics&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;events&gt;true&lt;/events&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;asynchronous_metrics&gt;false&lt;/asynchronous_metrics&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;/graphite&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Query log. Used only for queries with setting log_queries = 1. --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">query_log</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- What table to insert data. If table is not exist, it will be created.</span></span><br><span class=\"line\"><span class=\"comment\">             When query log structure is changed after system update,</span></span><br><span class=\"line\"><span class=\"comment\">              then old table will be renamed and new table will be created automatically.</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">database</span>&gt;</span>system<span class=\"tag\">&lt;/<span class=\"name\">database</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span>query_log<span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- Interval of flushing data. --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">flush_interval_milliseconds</span>&gt;</span>7500<span class=\"tag\">&lt;/<span class=\"name\">flush_interval_milliseconds</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">query_log</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Uncomment if use part_log</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;part_log&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;database&gt;system&lt;/database&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;table&gt;part_log&lt;/table&gt;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        &lt;flush_interval_milliseconds&gt;7500&lt;/flush_interval_milliseconds&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;/part_log&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Parameters for embedded dictionaries, used in Yandex.Metrica.</span></span><br><span class=\"line\"><span class=\"comment\">         See https://clickhouse.yandex/reference_en.html#Internal%20dictionaries</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Path to file with region hierarchy. --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- &lt;path_to_regions_hierarchy_file&gt;/opt/geo/regions_hierarchy.txt&lt;/path_to_regions_hierarchy_file&gt; --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Path to directory with files containing names of regions --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- &lt;path_to_regions_names_files&gt;/opt/geo/&lt;/path_to_regions_names_files&gt; --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Configuration of external dictionaries. See:</span></span><br><span class=\"line\"><span class=\"comment\">         https://clickhouse.yandex/reference_en.html#External%20Dictionaries</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dictionaries_config</span>&gt;</span>*_dictionary.xml<span class=\"tag\">&lt;/<span class=\"name\">dictionaries_config</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Uncomment if you want data to be compressed 30-100% better.</span></span><br><span class=\"line\"><span class=\"comment\">         Don't do that if you just started using ClickHouse.</span></span><br><span class=\"line\"><span class=\"comment\">      --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">compression</span> <span class=\"attr\">incl</span>=<span class=\"string\">\"clickhouse_compression\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;!- - Set of variants. Checked in order. Last matching case wins. If nothing matches, lz4 will be used. - -&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;case&gt;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">            &lt;!- - Conditions. All must be satisfied. Some conditions may be omitted. - -&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;min_part_size&gt;10000000000&lt;/min_part_size&gt;        &lt;!- - Min part size in bytes. - -&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;min_part_size_ratio&gt;0.01&lt;/min_part_size_ratio&gt;   &lt;!- - Min size of part relative to whole table size. - -&gt;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">            &lt;!- - What compression method to use. - -&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;method&gt;zstd&lt;/method&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;/case&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">compression</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Allow to execute distributed DDL queries (CREATE, DROP, ALTER, RENAME) on cluster.</span></span><br><span class=\"line\"><span class=\"comment\">         Works only if ZooKeeper is enabled. Comment it if such functionality isn't required. --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">distributed_ddl</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- Path in ZooKeeper to queue with DDL queries --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">path</span>&gt;</span>/clickhouse/task_queue/ddl<span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">distributed_ddl</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Settings to fine tune MergeTree tables. See documentation in source code, in MergeTreeSettings.h --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;merge_tree&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;max_suspicious_broken_parts&gt;5&lt;/max_suspicious_broken_parts&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;/merge_tree&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Protection from accidental DROP.</span></span><br><span class=\"line\"><span class=\"comment\">         If size of a MergeTree table is greater than max_table_size_to_drop (in bytes) than table could not be dropped with any DROP query.</span></span><br><span class=\"line\"><span class=\"comment\">         If you want do delete one table and don't want to restart clickhouse-server, you could create special file &lt;clickhouse-path&gt;/flags/force_drop_table and make DROP once.</span></span><br><span class=\"line\"><span class=\"comment\">         By default max_table_size_to_drop is 50GB, max_table_size_to_drop=0 allows to DROP any tables.</span></span><br><span class=\"line\"><span class=\"comment\">         Uncomment to disable protection.</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- &lt;max_table_size_to_drop&gt;0&lt;/max_table_size_to_drop&gt; --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Example of parameters for GraphiteMergeTree table engine --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">graphite_rollup_example</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">regexp</span>&gt;</span>click_cost<span class=\"tag\">&lt;/<span class=\"name\">regexp</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">function</span>&gt;</span>any<span class=\"tag\">&lt;/<span class=\"name\">function</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">retention</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">age</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">age</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">precision</span>&gt;</span>3600<span class=\"tag\">&lt;/<span class=\"name\">precision</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">retention</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">retention</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">age</span>&gt;</span>86400<span class=\"tag\">&lt;/<span class=\"name\">age</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">precision</span>&gt;</span>60<span class=\"tag\">&lt;/<span class=\"name\">precision</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">retention</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">default</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">function</span>&gt;</span>max<span class=\"tag\">&lt;/<span class=\"name\">function</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">retention</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">age</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">age</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">precision</span>&gt;</span>60<span class=\"tag\">&lt;/<span class=\"name\">precision</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">retention</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">retention</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">age</span>&gt;</span>3600<span class=\"tag\">&lt;/<span class=\"name\">age</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">precision</span>&gt;</span>300<span class=\"tag\">&lt;/<span class=\"name\">precision</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">retention</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">retention</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">age</span>&gt;</span>86400<span class=\"tag\">&lt;/<span class=\"name\">age</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">precision</span>&gt;</span>3600<span class=\"tag\">&lt;/<span class=\"name\">precision</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">retention</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">default</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">graphite_rollup_example</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Directory in &lt;clickhouse-path&gt; containing schema files for various input formats.</span></span><br><span class=\"line\"><span class=\"comment\">         The directory will be created if it doesn't exist.</span></span><br><span class=\"line\"><span class=\"comment\">      --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">format_schema_path</span>&gt;</span>/var/lib/clickhouse/format_schemas/<span class=\"tag\">&lt;/<span class=\"name\">format_schema_path</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">yandex</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、users-xml文件内容\"><a href=\"#3、users-xml文件内容\" class=\"headerlink\" title=\"3、users.xml文件内容\"></a>3、users.xml文件内容</h3><p>​        clickhouse-server中users.xml文件表示了对其服务的用户及权限的设置，本次文件也在默认配置下进行了修改，具体每个配置代表的意义可以参考<a href=\"%5Bhttps://schnappi618.github.io/2020/03/28/clickhouse%E7%94%A8%E6%88%B7%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/%5D(https://schnappi618.github.io/2020/03/28/clickhouse%E7%94%A8%E6%88%B7%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/)\">clickhouse用户配置详解</a>，内容如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">yandex</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Profiles of settings. --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- Default settings. --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">default</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- Maximum memory usage for processing single query, in bytes. --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">max_memory_usage</span>&gt;</span>10000000000<span class=\"tag\">&lt;/<span class=\"name\">max_memory_usage</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- Use cache of uncompressed blocks of data. Meaningful only for processing many of very short queries. --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">use_uncompressed_cache</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">use_uncompressed_cache</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- How to choose between replicas during distributed query processing.</span></span><br><span class=\"line\"><span class=\"comment\">                 random - choose random replica from set of replicas with minimum number of errors</span></span><br><span class=\"line\"><span class=\"comment\">                 nearest_hostname - from set of replicas with minimum number of errors, choose replica</span></span><br><span class=\"line\"><span class=\"comment\">                  with minumum number of different symbols between replica's hostname and local hostname</span></span><br><span class=\"line\"><span class=\"comment\">                  (Hamming distance).</span></span><br><span class=\"line\"><span class=\"comment\">                 in_order - first live replica is choosen in specified order.</span></span><br><span class=\"line\"><span class=\"comment\">            --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">load_balancing</span>&gt;</span>random<span class=\"tag\">&lt;/<span class=\"name\">load_balancing</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">default</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- Profile that allows only read queries. --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">readonly</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">readonly</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">readonly</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">readonly</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Users and ACL. --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">users</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- If user name was not specified, 'default' user is used. --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">default</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- Password could be specified in plaintext or in SHA256 (in hex format).</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">                 If you want to specify password in plaintext (not recommended), place it in 'password' element.</span></span><br><span class=\"line\"><span class=\"comment\">                 Example: &lt;password&gt;qwerty&lt;/password&gt;.</span></span><br><span class=\"line\"><span class=\"comment\">                 Password could be empty.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">                 If you want to specify SHA256, place it in 'password_sha256_hex' element.</span></span><br><span class=\"line\"><span class=\"comment\">                 Example: &lt;password_sha256_hex&gt;65e84be33532fb784c48129675f9eff3a682b27168c0ea744b2cf58ee02337c5&lt;/password_sha256_hex&gt;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">                 How to generate decent password:</span></span><br><span class=\"line\"><span class=\"comment\">                 Execute: PASSWORD=$(base64 &lt; /dev/urandom | head -c8); echo \"$PASSWORD\"; echo -n \"$PASSWORD\" | sha256sum | tr -d '-'</span></span><br><span class=\"line\"><span class=\"comment\">                 In first line will be password and in second - corresponding SHA256.</span></span><br><span class=\"line\"><span class=\"comment\">            --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- List of networks with open access.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">                 To open access from everywhere, specify:</span></span><br><span class=\"line\"><span class=\"comment\">                    &lt;ip&gt;::/0&lt;/ip&gt;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">                 To open access only from localhost, specify:</span></span><br><span class=\"line\"><span class=\"comment\">                    &lt;ip&gt;::1&lt;/ip&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                    &lt;ip&gt;127.0.0.1&lt;/ip&gt;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">                 Each element of list has one of the following forms:</span></span><br><span class=\"line\"><span class=\"comment\">                 &lt;ip&gt; IP-address or network mask. Examples: 213.180.204.3 or 10.0.0.1/8 or 2a02:6b8::3 or 2a02:6b8::3/64.</span></span><br><span class=\"line\"><span class=\"comment\">                 &lt;host&gt; Hostname. Example: server01.yandex.ru.</span></span><br><span class=\"line\"><span class=\"comment\">                     To check access, DNS query is performed, and all received addresses compared to peer address.</span></span><br><span class=\"line\"><span class=\"comment\">                 &lt;host_regexp&gt; Regular expression for host names. Example, ^server\\d\\d-\\d\\d-\\d\\.yandex\\.ru$</span></span><br><span class=\"line\"><span class=\"comment\">                     To check access, DNS PTR query is performed for peer address and then regexp is applied.</span></span><br><span class=\"line\"><span class=\"comment\">                     Then, for result of PTR query, another DNS query is performed and all received addresses compared to peer address.</span></span><br><span class=\"line\"><span class=\"comment\">                     Strongly recommended that regexp is ends with $</span></span><br><span class=\"line\"><span class=\"comment\">                 All results of DNS requests are cached till server restart.</span></span><br><span class=\"line\"><span class=\"comment\">            --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">networks</span> <span class=\"attr\">incl</span>=<span class=\"string\">\"networks\"</span> <span class=\"attr\">replace</span>=<span class=\"string\">\"replace\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">ip</span>&gt;</span>::1<span class=\"tag\">&lt;/<span class=\"name\">ip</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ip</span>&gt;</span>127.0.0.1<span class=\"tag\">&lt;/<span class=\"name\">ip</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">networks</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- Settings profile for user. --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- Quota for user. --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">quota</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">quota</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">default</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- Example of user with readonly access. 说明：下面有两个用户seluser（readonly表示只读权限）和inuser（default表示默认权限）密码如下 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">seluser</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>meiyoumima<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">networks</span> <span class=\"attr\">incl</span>=<span class=\"string\">\"networks\"</span> <span class=\"attr\">replace</span>=<span class=\"string\">\"replace\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">ip</span>&gt;</span>::/0<span class=\"tag\">&lt;/<span class=\"name\">ip</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">networks</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span>readonly<span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">quota</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">quota</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">seluser</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">inuser</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>meiyoumima<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">networks</span> <span class=\"attr\">incl</span>=<span class=\"string\">\"networks\"</span> <span class=\"attr\">replace</span>=<span class=\"string\">\"replace\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">ip</span>&gt;</span>::/0<span class=\"tag\">&lt;/<span class=\"name\">ip</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">networks</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">quota</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">quota</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">inuser</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">users</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Quotas. --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">quotas</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- Name of quota. --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">default</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- Limits for time interval. You could specify many intervals with different limits. --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">interval</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!-- Length of interval. --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">duration</span>&gt;</span>3600<span class=\"tag\">&lt;/<span class=\"name\">duration</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">&lt;!-- No limits. Just calculate resource usage for time interval. --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">queries</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">queries</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">errors</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">errors</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">result_rows</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">result_rows</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">read_rows</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">read_rows</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">execution_time</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">execution_time</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">interval</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">default</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">quotas</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">yandex</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、启动并测试服务\"><a href=\"#三、启动并测试服务\" class=\"headerlink\" title=\"三、启动并测试服务\"></a>三、启动并测试服务</h2><h3 id=\"1、启动服务\"><a href=\"#1、启动服务\" class=\"headerlink\" title=\"1、启动服务\"></a>1、启动服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动该服务，docker-compose表示创建并启动该容器，-d表示放入后台</span></span><br><span class=\"line\">[rootxxxx docker_compose]<span class=\"comment\"># docker-compose up -d</span></span><br><span class=\"line\">Creating clickhouse-server_1 ... <span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"comment\"># 查看启动状态</span></span><br><span class=\"line\">[rootxxxx docker_compose]<span class=\"comment\"># docker ps</span></span><br><span class=\"line\">CONTAINER ID        IMAGE                        COMMAND             CREATED             STATUS              PORTS                                                                              NAMES</span><br><span class=\"line\">92b25e101be0        clickhouse-server-demo:1.0   <span class=\"string\">\"/entrypoint.sh\"</span>    3 seconds ago       Up 2 seconds        0.0.0.0:8123-&gt;8123/tcp, 0.0.0.0:9000-&gt;9000/tcp, 0.0.0.0:9004-&gt;9004/tcp, 9009/tcp   clickhouse-server_1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、测试用户配置\"><a href=\"#2、测试用户配置\" class=\"headerlink\" title=\"2、测试用户配置\"></a>2、测试用户配置</h3><p>​        从users.xml文件中可以看到创建了一个用户名为seluser，密码为meiyoumima的只读用户，这里通过该用户是否可以登陆服务，并且权限是否正确进行简单的测试</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过对外暴露的tcp端口9000使用clickhouse-client登陆测试</span></span><br><span class=\"line\"><span class=\"comment\">## 1. seluser只读用户登陆</span></span><br><span class=\"line\">[rootxxxx docker_compose]<span class=\"comment\"># docker run -it --rm --link clickhouse-server_1:docker_compose --net docker_compose_default clickhouse-server-demo:1.0 usr/bin/clickhouse-client --host docker_compose --user seluser --password meiyoumima</span></span><br><span class=\"line\">ClickHouse client version 20.3.4.10 (official build).</span><br><span class=\"line\">Connecting to docker_compose:9000 as user seluser.</span><br><span class=\"line\">Connected to ClickHouse server version 20.3.4 revision 54433.</span><br><span class=\"line\"></span><br><span class=\"line\">clickhouse-server_1 :) show databases</span><br><span class=\"line\"></span><br><span class=\"line\">SHOW DATABASES</span><br><span class=\"line\"></span><br><span class=\"line\">┌─name────┐</span><br><span class=\"line\">│ default │</span><br><span class=\"line\">│ system  │</span><br><span class=\"line\">└─────────┘</span><br><span class=\"line\"></span><br><span class=\"line\">2 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span>. Elapsed: 0.002 sec. </span><br><span class=\"line\"></span><br><span class=\"line\">clickhouse-server_1 :) create database <span class=\"built_in\">test</span>\t\t<span class=\"comment\"># 可以看到由于seluser是个readonly的用户，所以无法创建数据库</span></span><br><span class=\"line\"></span><br><span class=\"line\">CREATE DATABASE <span class=\"built_in\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\">Received exception from server (version 20.3.4):</span><br><span class=\"line\">Code: 164. DB::Exception: Received from docker_compose:9000. DB::Exception: seluser: Cannot execute query <span class=\"keyword\">in</span> <span class=\"built_in\">readonly</span> mode. </span><br><span class=\"line\"></span><br><span class=\"line\">0 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span>. Elapsed: 0.071 sec. </span><br><span class=\"line\"></span><br><span class=\"line\">clickhouse-server_1 :) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 2. inuser读写用户登陆</span></span><br><span class=\"line\">[rootxxxx docker_compose]<span class=\"comment\"># docker run -it --rm --link clickhouse-server_1:docker_compose --net docker_compose_default clickhouse-server-demo:1.0 usr/bin/clickhouse-client --host docker_compose --user inuser --password meiyoumima </span></span><br><span class=\"line\">ClickHouse client version 20.3.4.10 (official build).</span><br><span class=\"line\">Connecting to docker_compose:9000 as user inuser.</span><br><span class=\"line\">Connected to ClickHouse server version 20.3.4 revision 54433.</span><br><span class=\"line\"></span><br><span class=\"line\">clickhouse-server_1 :) create database <span class=\"built_in\">test</span>\t\t\t<span class=\"comment\"># inuser读写用户创建test库成功</span></span><br><span class=\"line\"></span><br><span class=\"line\">CREATE DATABASE <span class=\"built_in\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\">Ok.</span><br><span class=\"line\"></span><br><span class=\"line\">0 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span>. Elapsed: 0.001 sec. </span><br><span class=\"line\"></span><br><span class=\"line\">clickhouse-server_1 :) show databases</span><br><span class=\"line\"></span><br><span class=\"line\">SHOW DATABASES</span><br><span class=\"line\"></span><br><span class=\"line\">┌─name────┐</span><br><span class=\"line\">│ default │</span><br><span class=\"line\">│ system  │</span><br><span class=\"line\">│ <span class=\"built_in\">test</span>    │</span><br><span class=\"line\">└─────────┘</span><br><span class=\"line\"></span><br><span class=\"line\">3 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span>. Elapsed: 0.002 sec.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3、从上面的config.xml中可以看到开启了其他远程主机通过mysql登陆的方法，端口为9004</span></span><br><span class=\"line\">[rootxxxx ~]</span><br><span class=\"line\">$ mysql -h xx.xx.xx.xx -P9004 -u seluser -p</span><br><span class=\"line\">Enter password: </span><br><span class=\"line\">Welcome to the MySQL monitor.  Commands end with ; or \\g.</span><br><span class=\"line\">Your MySQL connection id is 3</span><br><span class=\"line\">Server version: 20.3.4.10-ClickHouse </span><br><span class=\"line\"></span><br><span class=\"line\">Copyright (c) 2009-2017 Percona LLC and/or its affiliates</span><br><span class=\"line\">Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.</span><br><span class=\"line\"></span><br><span class=\"line\">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class=\"line\">affiliates. Other names may be trademarks of their respective</span><br><span class=\"line\">owners.</span><br><span class=\"line\"></span><br><span class=\"line\">Type <span class=\"string\">'help;'</span> or <span class=\"string\">'\\h'</span> <span class=\"keyword\">for</span> <span class=\"built_in\">help</span>. Type <span class=\"string\">'\\c'</span> to clear the current input statement.</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; show databases;</span><br><span class=\"line\">+---------+</span><br><span class=\"line\">| name    |</span><br><span class=\"line\">+---------+</span><br><span class=\"line\">| default |</span><br><span class=\"line\">| system  |</span><br><span class=\"line\">| <span class=\"built_in\">test</span>    |</span><br><span class=\"line\">+---------+</span><br><span class=\"line\">3 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; create database zztest;</span><br><span class=\"line\">ERROR 164 (00000): seluser: Cannot execute query <span class=\"keyword\">in</span> <span class=\"built_in\">readonly</span> mode</span><br></pre></td></tr></table></figure>\n\n","categories":["clickhouse"],"tags":["clickhouse","docker"]},{"title":"clickhouse的docker架构","url":"/2020/03/21/clickhouse/clickhouse%E7%9A%84docker%E6%9E%B6%E6%9E%84/","content":"<p>​        由于最终选用了docker方法安装了clickhouse，便从github下载了<a href=\"https://github.com/ClickHouse/ClickHouse/\" target=\"_blank\" rel=\"noopener\">clickhouse源码</a>，对clickhouse提供的docker目录结构进行了解，并且积累有关docker的知识(本文仅会通过clickhouse本身的Dockerfile文件简单描述其中使用到的各个命令的作用及在当前使用的情况，详细关于Dockerfile中指令的作用示例等会在之后的docker部分中进行学习描述^_^)，从而方便之后修改打包出需要的镜像。</p>\n<h2 id=\"一、ClickHouse的docker文件架构\"><a href=\"#一、ClickHouse的docker文件架构\" class=\"headerlink\" title=\"一、ClickHouse的docker文件架构\"></a>一、ClickHouse的docker文件架构</h2><p>​        clickhouse关于docker的文件目录分为builder、client、packager、server、test以及外层的docker-compose.yml文件，docker目录的树状结构如下：</p>\n<details>\n  <summary><font>docker文件目录</font></summary>\n  <pre><code>  \ndocker\n├── README.md\n├── builder                            # gcc-9/ninja/cmake... 等基础环境的安装\n│   ├── Dockerfile\n│   ├── Makefile\n│   ├── README.md\n│   └── build.sh\n├── client                            # 安装clickhouse client\n│   ├── Dockerfile\n│   └── README.md\n├── images.json\n├── packager\n│   ├── README.md\n│   ├── binary\n│   │   ├── Dockerfile\n│   │   └── build.sh\n│   ├── deb\n│   │   ├── Dockerfile\n│   │   └── build.sh\n│   ├── freebsd\n│   │   └── Vagrantfile\n│   └── packager\n├── server                        # 安装配置clickhouse server\n│   ├── Dockerfile\n│   ├── README.md\n│   ├── docker_related_config.xml\n│   ├── entrypoint.sh\n│   └── local.Dockerfile\n└── test                            # 用于测试使用\n    ├── Dockerfile\n    ├── README.md\n    ├── codebrowser\n    │   └── Dockerfile\n    ├── compatibility\n    │   ├── centos\n    │   │   └── Dockerfile\n    │   └── ubuntu\n    │       └── Dockerfile\n    ├── coverage\n    │   └── Dockerfile\n    ├── integration\n    │   └── Dockerfile\n    ├── performance\n    │   ├── Dockerfile\n    │   ├── run.sh\n    │   └── s3downloader\n    ├── performance-comparison\n    │   ├── Dockerfile\n    │   ├── compare.sh\n    │   ├── config\n    │   │   ├── config.d\n    │   │   │   └── perf-comparison-tweaks-config.xml\n    │   │   └── users.d\n    │   │       └── perf-comparison-tweaks-users.xml\n    │   ├── download.sh\n    │   ├── entrypoint.sh\n    │   ├── eqmed.sql\n    │   ├── perf.py\n    │   ├── performance_comparison.md\n    │   └── report.py\n    ├── pvs\n    │   └── Dockerfile\n    ├── split_build_smoke_test\n    │   ├── Dockerfile\n    │   └── run.sh\n    ├── stateful\n    │   ├── Dockerfile\n    │   └── s3downloader\n    ├── stateful_with_coverage\n    │   ├── Dockerfile\n    │   ├── run.sh\n    │   └── s3downloader\n    ├── stateless\n    │   ├── Dockerfile\n    │   └── clickhouse-statelest-test-runner.Dockerfile\n    ├── stateless_with_coverage\n    │   ├── Dockerfile\n    │   └── run.sh\n    ├── stress\n    │   ├── Dockerfile\n    │   ├── README.md\n    │   └── stress\n    ├── test_runner.sh\n    ├── test_runner_docker_compose.yaml\n    └── unit\n        └── Dockerfile\n  </code></pre>\n</details>\n\n<h2 id=\"二、server内容详解\"><a href=\"#二、server内容详解\" class=\"headerlink\" title=\"二、server内容详解\"></a>二、server内容详解</h2><p>​        ClickHouse docker的server目录包含了：Dockerfile、README.md、docker_related_config.xml、entrypoint.sh、local.Dockerfile这些文件，其中README.md简单介绍了如何通过docker启动clickhouse服务等基本应用，将从Dockerfile文件内容入手从而解释其他文件的作用。</p>\n<h3 id=\"2-1、Dockerfile文件内容\"><a href=\"#2-1、Dockerfile文件内容\" class=\"headerlink\" title=\"2.1、Dockerfile文件内容\"></a>2.1、Dockerfile文件内容</h3><figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> ubuntu:<span class=\"number\">18.04</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## ARG 构建参数： repository、version、gosu_ver</span></span><br><span class=\"line\"><span class=\"keyword\">ARG</span> repository=<span class=\"string\">\"deb http://repo.yandex.ru/clickhouse/deb/stable/ main/\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 官方目前还没有clickhouse-common-statis/client/server的20.4.1.*这个版本，改为version=20.3.4.*即可docker build打包镜像</span></span><br><span class=\"line\"><span class=\"keyword\">ARG</span> version=<span class=\"number\">20.4</span>.<span class=\"number\">1</span>.*</span><br><span class=\"line\"><span class=\"keyword\">ARG</span> gosu_ver=<span class=\"number\">1.10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## RUN 执行命令：安装基础命令及clickhouse-client/clickhouse-server/clickhouse-common-static...</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> apt-get update \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; apt-get install --yes --no-install-recommends \\</span></span><br><span class=\"line\"><span class=\"bash\">        apt-transport-https \\</span></span><br><span class=\"line\"><span class=\"bash\">        dirmngr \\</span></span><br><span class=\"line\"><span class=\"bash\">        gnupg \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; mkdir -p /etc/apt/sources.list.d \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; apt-key adv --keyserver keyserver.ubuntu.com --recv E0C56BD4 \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"variable\">$repository</span> &gt; /etc/apt/sources.list.d/clickhouse.list \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; apt-get update \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; env DEBIAN_aFRONTEND=noninteractive \\</span></span><br><span class=\"line\"><span class=\"bash\">        apt-get install --allow-unauthenticated --yes --no-install-recommends \\</span></span><br><span class=\"line\"><span class=\"bash\">            clickhouse-common-static=<span class=\"variable\">$version</span> \\</span></span><br><span class=\"line\"><span class=\"bash\">            clickhouse-client=<span class=\"variable\">$version</span> \\</span></span><br><span class=\"line\"><span class=\"bash\">            clickhouse-server=<span class=\"variable\">$version</span> \\</span></span><br><span class=\"line\"><span class=\"bash\">            locales \\</span></span><br><span class=\"line\"><span class=\"bash\">            tzdata \\</span></span><br><span class=\"line\"><span class=\"bash\">            wget \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; rm -rf \\</span></span><br><span class=\"line\"><span class=\"bash\">        /var/lib/apt/lists/* \\</span></span><br><span class=\"line\"><span class=\"bash\">        /var/cache/debconf \\</span></span><br><span class=\"line\"><span class=\"bash\">        /tmp/* \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; apt-get clean</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## ADD: 将github上的gosu-amd64下载为/bin/gosu文件, gosu类似于linux中的sudo命令</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"bash\"> https://github.com/tianon/gosu/releases/download/<span class=\"variable\">$gosu_ver</span>/gosu-amd64 /bin/gosu</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 语言环境修改</span></span><br><span class=\"line\"><span class=\"comment\">## 生成需要的locale文件</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> locale-gen en_US.UTF-8</span></span><br><span class=\"line\"><span class=\"comment\">## ENV：设置环境变量</span></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> LANG en_US.UTF-<span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> LANGUAGE en_US:en</span><br><span class=\"line\"><span class=\"keyword\">ENV</span> LC_ALL en_US.UTF-<span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> TZ UTC</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> mkdir /docker-entrypoint-initdb.d</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## COPY：复制文件，eg：将docker_related_config.xml文件复制到/etc/clickhouse-server/config.d/目录下，不需要提前创建目标目录，若不存在，COPY会自动创建</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> docker_related_config.xml /etc/clickhouse-server/config.d/</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> entrypoint.sh /entrypoint.sh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> chmod +x \\</span></span><br><span class=\"line\"><span class=\"bash\">    /entrypoint.sh \\</span></span><br><span class=\"line\"><span class=\"bash\">    /bin/gosu</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## EXPOSE：暴露端口，仅声明容器运行时应该打开哪些服务端口，方便启动docker run -p时配置映射关系</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">9000</span> <span class=\"number\">8123</span> <span class=\"number\">9009</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## VOLUME: 数据持久化，会将启动后容器/var/lib/clickhouse目录下的数据写入到宿主机上，如果docker run时指定了--volume=/work/docker/clickhouse_test_db:/var/lib/clickhouse，便会同步至宿主机的/work/docker/clickhouse_test_db目录，若未指定会写入宿主机docker info的Docker Root Dir目录下</span></span><br><span class=\"line\"><span class=\"keyword\">VOLUME</span><span class=\"bash\"> /var/lib/clickhouse</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 设置CLICKHOUSE_CONFIG环境变量</span></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> CLICKHOUSE_CONFIG /etc/clickhouse-server/config.xml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## ENTRYPOINT [\"shell脚本\"]：执行容器运行前的一些准备工作</span></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"bash\"> [<span class=\"string\">\"/entrypoint.sh\"</span>]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-docker-related-config-xml文件内容\"><a href=\"#2-2-docker-related-config-xml文件内容\" class=\"headerlink\" title=\"2.2 docker_related_config.xml文件内容\"></a>2.2 docker_related_config.xml文件内容</h3><p>​        从Dockerfile中可以看到，docker_related_config.xml文件会被放置在clickhouse-server的配置目录<code>/etc/clickhouse-server/config.d/</code>下，用来配置clickhouse-server容器的监听地址，默认配置允许接受来自其他容器和主机网络的连接。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">yandex</span>&gt;</span></span><br><span class=\"line\">     <span class=\"comment\">&lt;!-- Listen wildcard address to allow accepting connections from other containers and host network. --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">listen_host</span>&gt;</span>::<span class=\"tag\">&lt;/<span class=\"name\">listen_host</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">listen_host</span>&gt;</span>0.0.0.0<span class=\"tag\">&lt;/<span class=\"name\">listen_host</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">listen_try</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">listen_try</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;logger&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;console&gt;1&lt;/console&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;/logger&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">yandex</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3、entrypoint-sh文件内容\"><a href=\"#2-3、entrypoint-sh文件内容\" class=\"headerlink\" title=\"2.3、entrypoint.sh文件内容\"></a>2.3、entrypoint.sh文件内容</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">DO_CHOWN=1</span><br><span class=\"line\">if [ \"$CLICKHOUSE_DO_NOT_CHOWN\" = 1 ]; then</span><br><span class=\"line\">    DO_CHOWN=0</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">CLICKHOUSE_UID=\"$&#123;CLICKHOUSE_UID:-\"$(id -u clickhouse)\"&#125;\"</span><br><span class=\"line\">CLICKHOUSE_GID=\"$&#123;CLICKHOUSE_GID:-\"$(id -g clickhouse)\"&#125;\"</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> support --user</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 设置USER/GROUP为clickhouse</span></span></span><br><span class=\"line\">if [ x\"$UID\" == x0 ]; then</span><br><span class=\"line\">    USER=$CLICKHOUSE_UID</span><br><span class=\"line\">    GROUP=$CLICKHOUSE_GID</span><br><span class=\"line\">    gosu=\"gosu $USER:$GROUP\"</span><br><span class=\"line\">else</span><br><span class=\"line\">    USER=\"$(id -u)\"</span><br><span class=\"line\">    GROUP=\"$(id -g)\"</span><br><span class=\"line\">    gosu=\"\"</span><br><span class=\"line\">    DO_CHOWN=0</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">set</span> some vars</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 配置文件 /etc/clickhouse-server/config.xml</span></span></span><br><span class=\"line\">CLICKHOUSE_CONFIG=\"$&#123;CLICKHOUSE_CONFIG:-/etc/clickhouse-server/config.xml&#125;\"</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> port is needed to check <span class=\"keyword\">if</span> clickhouse-server is ready <span class=\"keyword\">for</span> connections</span></span><br><span class=\"line\">HTTP_PORT=\"$(clickhouse extract-from-config --config-file $CLICKHOUSE_CONFIG --key=http_port)\"</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> get CH directories locations</span></span><br><span class=\"line\">DATA_DIR=\"$(clickhouse extract-from-config --config-file $CLICKHOUSE_CONFIG --key=path || true)\"</span><br><span class=\"line\">TMP_DIR=\"$(clickhouse extract-from-config --config-file $CLICKHOUSE_CONFIG --key=tmp_path || true)\"</span><br><span class=\"line\">USER_PATH=\"$(clickhouse extract-from-config --config-file $CLICKHOUSE_CONFIG --key=user_files_path || true)\"</span><br><span class=\"line\">LOG_PATH=\"$(clickhouse extract-from-config --config-file $CLICKHOUSE_CONFIG --key=logger.log || true)\"</span><br><span class=\"line\">LOG_DIR=\"$(dirname $LOG_PATH || true)\"</span><br><span class=\"line\">ERROR_LOG_PATH=\"$(clickhouse extract-from-config --config-file $CLICKHOUSE_CONFIG --key=logger.errorlog || true)\"</span><br><span class=\"line\">ERROR_LOG_DIR=\"$(dirname $ERROR_LOG_PATH || true)\"</span><br><span class=\"line\">FORMAT_SCHEMA_PATH=\"$(clickhouse extract-from-config --config-file $CLICKHOUSE_CONFIG --key=format_schema_path || true)\"</span><br><span class=\"line\">CLICKHOUSE_USER=\"$&#123;CLICKHOUSE_USER:-default&#125;\"</span><br><span class=\"line\"></span><br><span class=\"line\">for dir in \"$DATA_DIR\" \\</span><br><span class=\"line\">  \"$ERROR_LOG_DIR\" \\</span><br><span class=\"line\">  \"$LOG_DIR\" \\</span><br><span class=\"line\">  \"$TMP_DIR\" \\</span><br><span class=\"line\">  \"$USER_PATH\" \\</span><br><span class=\"line\">  \"$FORMAT_SCHEMA_PATH\"</span><br><span class=\"line\">do</span><br><span class=\"line\">    # check if variable not empty</span><br><span class=\"line\">    [ -z \"$dir\" ] &amp;&amp; continue</span><br><span class=\"line\">    # ensure directories exist</span><br><span class=\"line\">    if ! mkdir -p \"$dir\"; then</span><br><span class=\"line\">        echo \"Couldn't create necessary directory: $dir\"</span><br><span class=\"line\">        exit 1</span><br><span class=\"line\">    fi</span><br><span class=\"line\"></span><br><span class=\"line\">    if [ \"$DO_CHOWN\" = \"1\" ]; then</span><br><span class=\"line\">        # ensure proper directories permissions</span><br><span class=\"line\">        chown -R \"$USER:$GROUP\" \"$dir\"</span><br><span class=\"line\">    elif [ \"$(stat -c %u \"$dir\")\" != \"$USER\" ]; then</span><br><span class=\"line\">        echo \"Necessary directory '$dir' isn't owned by user with id '$USER'\"</span><br><span class=\"line\">        exit 1</span><br><span class=\"line\">    fi</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if [ -n \"$(ls /docker-entrypoint-initdb.d/)\" ]; then</span><br><span class=\"line\">    $gosu /usr/bin/clickhouse-server --config-file=$CLICKHOUSE_CONFIG &amp;</span><br><span class=\"line\">    pid=\"$!\"</span><br><span class=\"line\"></span><br><span class=\"line\">    # check if clickhouse is ready to accept connections</span><br><span class=\"line\">    # will try to send ping clickhouse via http_port (max 12 retries, with 1 sec delay)</span><br><span class=\"line\">    if ! wget --spider --quiet --tries=12 --waitretry=1 --retry-connrefused \"http://localhost:$HTTP_PORT/ping\" ; then</span><br><span class=\"line\">        echo &gt;&amp;2 'ClickHouse init process failed.'</span><br><span class=\"line\">        exit 1</span><br><span class=\"line\">    fi</span><br><span class=\"line\"></span><br><span class=\"line\">    if [ ! -z \"$CLICKHOUSE_PASSWORD\" ]; then</span><br><span class=\"line\">        printf -v WITH_PASSWORD '%s %q' \"--password\" \"$CLICKHOUSE_PASSWORD\"</span><br><span class=\"line\">    fi</span><br><span class=\"line\"></span><br><span class=\"line\">    clickhouseclient=( clickhouse-client --multiquery -u $CLICKHOUSE_USER $WITH_PASSWORD )</span><br><span class=\"line\"></span><br><span class=\"line\">    echo</span><br><span class=\"line\">    for f in /docker-entrypoint-initdb.d/*; do</span><br><span class=\"line\">        case \"$f\" in</span><br><span class=\"line\">            *.sh)</span><br><span class=\"line\">                if [ -x \"$f\" ]; then</span><br><span class=\"line\">                    echo \"$0: running $f\"</span><br><span class=\"line\">                    \"$f\"</span><br><span class=\"line\">                else</span><br><span class=\"line\">                    echo \"$0: sourcing $f\"</span><br><span class=\"line\">                    . \"$f\"</span><br><span class=\"line\">                fi</span><br><span class=\"line\">                ;;</span><br><span class=\"line\">            *.sql)    echo \"$0: running $f\"; cat \"$f\" | \"$&#123;clickhouseclient[@]&#125;\" ; echo ;;</span><br><span class=\"line\">            *.sql.gz) echo \"$0: running $f\"; gunzip -c \"$f\" | \"$&#123;clickhouseclient[@]&#125;\"; echo ;;</span><br><span class=\"line\">            *)        echo \"$0: ignoring $f\" ;;</span><br><span class=\"line\">        esac</span><br><span class=\"line\">        echo</span><br><span class=\"line\">    done</span><br><span class=\"line\"></span><br><span class=\"line\">    if ! kill -s TERM \"$pid\" || ! wait \"$pid\"; then</span><br><span class=\"line\">        echo &gt;&amp;2 'Finishing of ClickHouse init process failed.'</span><br><span class=\"line\">        exit 1</span><br><span class=\"line\">    fi</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"keyword\">if</span> no args passed to `docker run` or first argument start with `--`, <span class=\"keyword\">then</span> the user is passing clickhouse-server arguments</span></span><br><span class=\"line\">if [[ $# -lt 1 ]] || [[ \"$1\" == \"--\"* ]]; then</span><br><span class=\"line\">    exec $gosu /usr/bin/clickhouse-server --config-file=$CLICKHOUSE_CONFIG \"$@\"</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Otherwise, we assume the user want to run his own process, <span class=\"keyword\">for</span> example a `bash` shell to explore this image</span></span><br><span class=\"line\">exec \"$@\"</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-4、local-Dockerfile文件\"><a href=\"#2-4、local-Dockerfile文件\" class=\"headerlink\" title=\"2.4、local.Dockerfile文件\"></a>2.4、local.Dockerfile文件</h3><p>​        暂时保留，未发现使用该文件的地方</p>\n<h3 id=\"2-5-server镜像打包\"><a href=\"#2-5-server镜像打包\" class=\"headerlink\" title=\"2.5 server镜像打包\"></a>2.5 server镜像打包</h3><p>​        根据clickhouse-server的docker源代码发现Dockerfile、entrypoint.sh、docker_related_config.xml三个文件为docker必需文件，新建一个目录，只写入这三个文件后，对原生server镜像进行打包。</p>\n<p>​                                    <img src=\"/2020/03/21/clickhouse/clickhouse%E7%9A%84docker%E6%9E%B6%E6%9E%84/1.png\" alt=\"镜像打包目录架构\" style=\"zoom:50%;\"></p>\n<p>​        上图为镜像打包准备目录的架构，确保docker服务启动后使用<code>docker build -t clickhouse-server-demo:1.0 .</code>打包镜像名为clickhouse-server-demo，tag为1.0的docker镜像。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 打包镜像</span></span></span><br><span class=\"line\">[root... test-clickhouse]# docker build -t clickhouse-server-demo:1.0 .</span><br><span class=\"line\">Sending build context to Docker daemon 8.704 kB</span><br><span class=\"line\">Step 1/19 : FROM ubuntu:18.04</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">Successfully built 16acf3ee797d\t\t\t\t\t\t\t## 当最终出现打包镜像成功表示docker build完成</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 若打包失败处理方法(本次打包过程中从github下载源代码版本较新，官方deb包还未更新，出现过打包失败的情况)：</span></span></span><br><span class=\"line\">[root... test-clickhouse]# docker build -t clickhouse-server-demo:1.0 .</span><br><span class=\"line\">...</span><br><span class=\"line\">E: Version '20.4.1.*' for 'clickhouse-common-static' was not found</span><br><span class=\"line\">E: Version '20.4.1.*' for 'clickhouse-client' was not found</span><br><span class=\"line\">E: Version '20.4.1.*' for 'clickhouse-server' was not found</span><br><span class=\"line\">The command '/bin/sh -c apt-get update     &amp;&amp; apt-get install --yes --no-install-recommends         apt-transport-https         dirmngr         gnupg     &amp;&amp; mkdir -p /etc/apt/sources.list.d     &amp;&amp; apt-key adv --keyserver keyserver.ubuntu.com --recv E0C56BD4     &amp;&amp; echo $repository &gt; /etc/apt/sources.list.d/clickhouse.list     &amp;&amp; apt-get update     &amp;&amp; env DEBIAN_FRONTEND=noninteractive         apt-get install --allow-unauthenticated --yes --no-install-recommends             clickhouse-common-static=$version             clickhouse-client=$version             clickhouse-server=$version             locales             tzdata             wget     &amp;&amp; rm -rf         /var/lib/apt/lists/*  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">## 以上报错表示clickhouse-server/client..未找到20.4.1.*的包，在执行Dockerfile中的/bin/sh -c apt-get update...命令执行失败</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">### 1. 通过`docker image ls`的命令看到并未打包镜像成功，其中image id为289a...</span></span></span><br><span class=\"line\">[root... test-clickhouse]# docker image ls</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">&lt;none&gt;              &lt;none&gt;              9feb83a76f47        8 minutes ago       64.2 MB</span><br><span class=\"line\">ubuntu              18.04               4e5021d210f6        37 hours ago        64.2 MB</span><br><span class=\"line\">hello-world         latest              fce289e99eb9        14 months ago       1.84 kB</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">### 2. 通过`docker run -it 9feb83a76f47 /bin/bash`进入目前已打包的镜像中，执行失败的命令，查看报错原因</span></span></span><br><span class=\"line\">[root... test-clickhouse]# docker run -it 9feb83a76f47 /bin/bash</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 进入后可通过执行命令查看打包失败原因</span></span></span><br><span class=\"line\">root@8974a71311f5:/# apt-get update     &amp;&amp; apt-get install --yes --no-install-recommends         apt-transport-https         dirmngr         gnupg     &amp;&amp; mkdir -p /etc/apt/sources.list.d     &amp;&amp; apt-key adv --keyserver keyserver.ubuntu.com --recv E0C56BD4     &amp;&amp; echo $repository &gt; /etc/apt/sources.list.d/clickhouse.list     &amp;&amp; apt-get update     &amp;&amp; env DEBIAN_FRONTEND=noninteractive         apt-get install --allow-unauthenticated --yes --no-install-recommends             clickhouse-common-static=$version             clickhouse-client=$version             clickhouse-server=$version             locales             tzdata             wget     &amp;&amp; rm -rf         /var/lib/apt/lists/*         /var/cache/debconf         /tmp/*     &amp;&amp; apt-get clean</span><br><span class=\"line\">...</span><br><span class=\"line\">E: Unable to locate package clickhouse-common-static</span><br><span class=\"line\">E: Unable to locate package clickhouse-client</span><br><span class=\"line\">E: Unable to locate package clickhouse-server</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 由执行结果看到是由于没有找到clickhouse-server/client/common-static这三个包，通过查看命令可以看到，安装这三个包时指定了版本为Dockerfile初始化的version值，可能是由于version版本过高导致</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">## 可以通过不指定版本安装查看是否是由于版本过高导致，通过结果可以看到，会得到的版本是20.3.4.10</span></span></span><br><span class=\"line\">root@8974a71311f5:/# apt-get install --allow-unauthenticated --yes --no-install-recommends clickhouse-common-static</span><br><span class=\"line\">Reading package lists... Done</span><br><span class=\"line\">Building dependency tree       </span><br><span class=\"line\">Reading state information... Done</span><br><span class=\"line\">The following additional packages will be installed:</span><br><span class=\"line\">  tzdata</span><br><span class=\"line\">Suggested packages:</span><br><span class=\"line\">  clickhouse-common-static-dbg</span><br><span class=\"line\">The following NEW packages will be installed:</span><br><span class=\"line\">  clickhouse-common-static tzdata</span><br><span class=\"line\">0 upgraded, 2 newly installed, 0 to remove and 0 not upgraded.</span><br><span class=\"line\">Need to get 117 MB of archives.</span><br><span class=\"line\">After this operation, 397 MB of additional disk space will be used.</span><br><span class=\"line\">Get:1 http://archive.ubuntu.com/ubuntu bionic-updates/main amd64 tzdata all 2019c-0ubuntu0.18.04 [190 kB]</span><br><span class=\"line\">Get:2 http://repo.yandex.ru/clickhouse/deb/stable main/ clickhouse-common-static 20.3.4.10 [116 MB]</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">## 也可通过获取路径看到最新版的clickhouse-client等包为20.3.4.10，所以将Dockerfile中的version值改为20.3.4.*即可，或者在命令中不指定版本安装，默认打包最新的安装包即可。</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 其他docker build过程中的报错也可通过该方法解决，启动镜像找到报错原因去解决问题即可。</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 问题解决后，将已有镜像删除，重新进行打包</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">## 由于当时只启动了关于该镜像的容器，所以可以直接全部stop掉，如果有其他启动的容器，则不能这样关闭</span></span></span><br><span class=\"line\">[root... test-clickhouse]# docker stop $(docker ps -a -q)</span><br><span class=\"line\">8974a71311f5</span><br><span class=\"line\">fae466f31ccf</span><br><span class=\"line\">[root... test-clickhouse]# docker rm fae466f31ccf</span><br><span class=\"line\">fae466f31ccf</span><br><span class=\"line\">[root... test-clickhouse]# docker rm 8974a71311f5</span><br><span class=\"line\">8974a71311f5</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">## 删除镜像</span></span></span><br><span class=\"line\">[root... test-clickhouse]# docker rmi 9feb83a76f47</span><br><span class=\"line\">Deleted: sha256:9feb83a76f4778aba0523c9e4bd492aa6804d1fa759558b8f93d8aa61ae6ac57</span><br><span class=\"line\">Deleted: sha256:b99e0912ee05a0f2a581f061828a89b1b08d6485b5481bc3585e44a7c8f53857</span><br><span class=\"line\">Deleted: sha256:227768fbfa5b173b32260e0cb38ef33d9495693593699c95b837f7b71a286064</span><br><span class=\"line\">[root... test-clickhouse]# docker image ls        </span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">ubuntu              18.04               4e5021d210f6        38 hours ago        64.2 MB</span><br><span class=\"line\">hello-world         latest              fce289e99eb9        14 months ago       1.84 kB</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 重新打包</span></span></span><br><span class=\"line\">[root... test-clickhouse]# docker build -t clickhouse-server-demo:1.0 .</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2020/03/21/clickhouse/clickhouse%E7%9A%84docker%E6%9E%B6%E6%9E%84/2.png\" style=\"zoom:50%;\">        \n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 查看镜像</span></span></span><br><span class=\"line\">[root... test-clickhouse]# docker image ls        </span><br><span class=\"line\">REPOSITORY               TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">clickhouse-server-demo   1.0                 16acf3ee797d        21 minutes ago      492 MB</span><br><span class=\"line\">ubuntu                   18.04               4e5021d210f6        3 days ago          64.2 MB</span><br><span class=\"line\">hello-world              latest              fce289e99eb9        14 months ago       1.84 kB</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 启动容器</span></span></span><br><span class=\"line\">[root... test-clickhouse]# docker run -d --name clickhouse-test-server --ulimit nofile=262144:262144  --volume=/work/clickhouse/clickhouse-test-server:/var/lib/clickhouse  clickhouse-server-demo:1.0</span><br><span class=\"line\">958ed2deaab03542f2880f41e66346165252f953f91efa60b7d95ad6a1a88330</span><br><span class=\"line\">[root... test-clickhouse]# docker ps</span><br><span class=\"line\">CONTAINER ID        IMAGE                        COMMAND             CREATED             STATUS              PORTS                          NAMES</span><br><span class=\"line\">958ed2deaab0        clickhouse-server-demo:1.0   \"/entrypoint.sh\"    3 seconds ago       Up 3 seconds        8123/tcp, 9000/tcp, 9009/tcp   clickhouse-test-server</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 进入容器</span></span></span><br><span class=\"line\">[root... work]# docker exec -it 958e /bin/bash</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">## 进入当前clickhouse</span></span></span><br><span class=\"line\">root@958ed2deaab0:/# clickhouse-client </span><br><span class=\"line\">ClickHouse client version 20.3.4.10 (official build).</span><br><span class=\"line\">Connecting to localhost:9000 as user default.</span><br><span class=\"line\">Connected to ClickHouse server version 20.3.4 revision 54433.</span><br><span class=\"line\"></span><br><span class=\"line\">958ed2deaab0 :) show databases;</span><br><span class=\"line\"></span><br><span class=\"line\">SHOW DATABASES</span><br><span class=\"line\"></span><br><span class=\"line\">┌─name────┐</span><br><span class=\"line\">│ default │</span><br><span class=\"line\">│ system  │</span><br><span class=\"line\">└─────────┘</span><br><span class=\"line\"></span><br><span class=\"line\">2 rows in set. Elapsed: 0.002 sec.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、client内容详解\"><a href=\"#三、client内容详解\" class=\"headerlink\" title=\"三、client内容详解\"></a>三、client内容详解</h2><p>​        client目录下仅有Dockerfile以及README.md文件</p>\n<h3 id=\"3-1、Dockerfile文件内容\"><a href=\"#3-1、Dockerfile文件内容\" class=\"headerlink\" title=\"3.1、Dockerfile文件内容\"></a>3.1、Dockerfile文件内容</h3><figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> ubuntu:<span class=\"number\">18.04</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ARG</span> repository=<span class=\"string\">\"deb http://repo.yandex.ru/clickhouse/deb/stable/ main/\"</span></span><br><span class=\"line\"><span class=\"keyword\">ARG</span> version=<span class=\"number\">20.4</span>.<span class=\"number\">1</span>.*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> apt-get update \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; apt-get install --yes --no-install-recommends \\</span></span><br><span class=\"line\"><span class=\"bash\">        apt-transport-https \\</span></span><br><span class=\"line\"><span class=\"bash\">        dirmngr \\</span></span><br><span class=\"line\"><span class=\"bash\">        gnupg \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; mkdir -p /etc/apt/sources.list.d \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; apt-key adv --keyserver keyserver.ubuntu.com --recv E0C56BD4 \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"variable\">$repository</span> &gt; /etc/apt/sources.list.d/clickhouse.list \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; apt-get update \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; env DEBIAN_FRONTEND=noninteractive \\</span></span><br><span class=\"line\"><span class=\"bash\">        apt-get install --allow-unauthenticated --yes --no-install-recommends \\</span></span><br><span class=\"line\"><span class=\"bash\">            clickhouse-client=<span class=\"variable\">$version</span> \\</span></span><br><span class=\"line\"><span class=\"bash\">            clickhouse-common-static=<span class=\"variable\">$version</span> \\</span></span><br><span class=\"line\"><span class=\"bash\">            locales \\</span></span><br><span class=\"line\"><span class=\"bash\">            tzdata \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; rm -rf /var/lib/apt/lists/* /var/cache/debconf \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; apt-get clean</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> locale-gen en_US.UTF-8</span></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> LANG en_US.UTF-<span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> LANGUAGE en_US:en</span><br><span class=\"line\"><span class=\"keyword\">ENV</span> LC_ALL en_US.UTF-<span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"bash\"> [<span class=\"string\">\"/usr/bin/clickhouse-client\"</span>]</span></span><br></pre></td></tr></table></figure>\n\n","categories":["clickhouse"],"tags":["clickhouse","docker"]},{"title":"multiprocessing进程池与回调函数","url":"/2020/03/12/code/multiprocessing%E8%BF%9B%E7%A8%8B%E6%B1%A0%E4%B8%8E%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/","content":"<h2 id=\"一、研究背景\"><a href=\"#一、研究背景\" class=\"headerlink\" title=\"一、研究背景\"></a>一、研究背景</h2><p>​        在利用python库multiprocessing进行多进程开发时，利用了进程池及apply_async异步非阻塞进行函数调用时，为了代码逻辑清晰以及代码块功能最小化，下一步的调用使用到了第一次apply_async的结果，将两个异步调用执行变成了同步执行，导致异步1min可以执行完成的程序变成了10min才执行完成，将优点变成了缺点。</p>\n<p>​        这里将对源代码进行分析，并进行修改。</p>\n<p><strong>原本代码类似如下：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Pool</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getA</span><span class=\"params\">(info)</span>:</span></span><br><span class=\"line\">    info[<span class=\"string\">'test1'</span>] = <span class=\"string\">'test1'</span></span><br><span class=\"line\">    info[<span class=\"string\">'test2'</span>] = <span class=\"string\">'test2'</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> info</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getB</span><span class=\"params\">(info)</span>:</span></span><br><span class=\"line\">    a = &#123;&#125;</span><br><span class=\"line\">    a[<span class=\"string\">'test'</span>] = info[<span class=\"string\">'test1'</span>] + <span class=\"string\">'_'</span> + info[<span class=\"string\">'test2'</span>]</span><br><span class=\"line\">    print(a)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        msg = <span class=\"string\">'success'</span></span><br><span class=\"line\">        pool = Pool(<span class=\"number\">4</span>)</span><br><span class=\"line\">        infoList = [&#123;<span class=\"string\">'a'</span>: <span class=\"string\">'a1'</span>, <span class=\"string\">'b'</span>: <span class=\"string\">'b1'</span>&#125;, &#123;<span class=\"string\">'a'</span>: <span class=\"string\">'a2'</span>, <span class=\"string\">'b'</span>: <span class=\"string\">'b2'</span>&#125;]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> info <span class=\"keyword\">in</span> infoList:</span><br><span class=\"line\">            basicinfo = pool.apply_async(getA, (info, ))</span><br><span class=\"line\">            baseinfo = basicinfo.get()</span><br><span class=\"line\">            pool.apply_async(getB, (baseinfo, ))</span><br><span class=\"line\">        pool.close()</span><br><span class=\"line\">        pool.join()</span><br><span class=\"line\">        print(msg)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err:</span><br><span class=\"line\">        print(err)</span><br></pre></td></tr></table></figure>\n\n<p><strong>执行结果：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">'test'</span>: <span class=\"string\">'test1_test2'</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">'test'</span>: <span class=\"string\">'test1_test2'</span>&#125;</span><br><span class=\"line\">success</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"二、原因分析\"><a href=\"#二、原因分析\" class=\"headerlink\" title=\"二、原因分析\"></a>二、原因分析</h2><p>​        apply_async属于异步非阻塞模式，原本的代码使用了两次pool.apply_async()，并且第二次的apply_async需要利用第一次apply_async的结果，这就表示本来应该是两次异步同一时间执行两个函数，现在第二个函数需要等待第一个函数执行完之后再执行，产生了等待时间，从而将程序执行时长扩大。以下通过上述getA和getB示例详细描述原因：</p>\n<p>​                                <img src=\"/2020/03/12/code/multiprocessing%E8%BF%9B%E7%A8%8B%E6%B1%A0%E4%B8%8E%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/2.png\" style=\"zoom:50%;\"></p>\n<p>​        上图为apply_async方法适合用的场景，该场景两个调用函数并不关心对方的结果，getA与getB函数可以同时执行，到了t2时刻执行时间最长的getA函数执行结束，则该程序执行结束。</p>\n<p>​                            <img src=\"/2020/03/12/code/multiprocessing%E8%BF%9B%E7%A8%8B%E6%B1%A0%E4%B8%8E%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/3.png\" style=\"zoom:50%;\"></p>\n<p>​        而本次的需求实际为上图所示，虽然都使用了apply_async的异步模式，但getB函数需接收getA执行完成的结果，导致getB函数并没有和getA同时开始执行，getB从t1时刻就开始等待getA的执行结果，直到t2时刻getA执行完成返回结果之后，getB才开始执行，直到t3时刻执行结束。</p>\n<h2 id=\"三、处理方法\"><a href=\"#三、处理方法\" class=\"headerlink\" title=\"三、处理方法\"></a>三、处理方法</h2><h3 id=\"1、合并调用函数\"><a href=\"#1、合并调用函数\" class=\"headerlink\" title=\"1、合并调用函数\"></a>1、合并调用函数</h3><p>​        该方法是将底层的getA和getB两个函数，合并为一个函数getC执行，之后使用一次apply_async执行即可。修改代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Pool</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getA</span><span class=\"params\">(info)</span>:</span></span><br><span class=\"line\">    info[<span class=\"string\">'test1'</span>] = <span class=\"string\">'test1'</span></span><br><span class=\"line\">    info[<span class=\"string\">'test2'</span>] = <span class=\"string\">'test2'</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> info</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getB</span><span class=\"params\">(info)</span>:</span></span><br><span class=\"line\">    a = &#123;&#125;</span><br><span class=\"line\">    a[<span class=\"string\">'test'</span>] = info[<span class=\"string\">'test1'</span>] + <span class=\"string\">'_'</span> + info[<span class=\"string\">'test2'</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 可以添加一个合并了getA和getB函数的getC</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getC</span><span class=\"params\">(info)</span>:</span></span><br><span class=\"line\">    info_a = getA(info)</span><br><span class=\"line\">    info_b = getB(info_a)</span><br><span class=\"line\">    print(info_b)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> info_b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        msg = <span class=\"string\">'success'</span></span><br><span class=\"line\">        pool = Pool(<span class=\"number\">4</span>)</span><br><span class=\"line\">        infoList = [&#123;<span class=\"string\">'a'</span>: <span class=\"string\">'a1'</span>, <span class=\"string\">'b'</span>: <span class=\"string\">'b1'</span>&#125;, &#123;<span class=\"string\">'a'</span>: <span class=\"string\">'a2'</span>, <span class=\"string\">'b'</span>: <span class=\"string\">'b2'</span>&#125;]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> info <span class=\"keyword\">in</span> infoList:</span><br><span class=\"line\">            basicinfo = pool.apply_async(getC, (info, ))     <span class=\"comment\"># 直接调用getC</span></span><br><span class=\"line\">        pool.close()</span><br><span class=\"line\">        pool.join()</span><br><span class=\"line\">        print(msg)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err:</span><br><span class=\"line\">        print(err)</span><br></pre></td></tr></table></figure>\n\n<p><strong>执行结果：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">'test'</span>: <span class=\"string\">'test1_test2'</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">'test'</span>: <span class=\"string\">'test1_test2'</span>&#125;</span><br><span class=\"line\">success</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、使用回调函数\"><a href=\"#2、使用回调函数\" class=\"headerlink\" title=\"2、使用回调函数\"></a>2、使用回调函数</h3><p>​        另外一种方式是使用apply_async所包含的回调函数，回调函数的格式为<code>apply_async(func1, args=(input, ), callback=func2)</code>,意思就是将func1函数的返回传递给func2，并且由主进程继续执行func2函数，修改代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Pool</span><br><span class=\"line\"><span class=\"keyword\">import</span>  os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getA</span><span class=\"params\">(info)</span>:</span></span><br><span class=\"line\">    info[<span class=\"string\">'test1'</span>] = <span class=\"string\">'test1'</span></span><br><span class=\"line\">    info[<span class=\"string\">'test2'</span>] = <span class=\"string\">'test2'</span></span><br><span class=\"line\">    print(<span class=\"string\">'getA pid'</span>, os.getpid())</span><br><span class=\"line\">    <span class=\"keyword\">return</span> info</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getB</span><span class=\"params\">(info)</span>:</span></span><br><span class=\"line\">    a = &#123;&#125;</span><br><span class=\"line\">    a[<span class=\"string\">'test'</span>] = info[<span class=\"string\">'test1'</span>] + <span class=\"string\">'_'</span> + info[<span class=\"string\">'test2'</span>]</span><br><span class=\"line\">    print(a)</span><br><span class=\"line\">    print(<span class=\"string\">'getB pid'</span>, os.getpid())</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"主进程pid：\"</span>, os.getpid())</span><br><span class=\"line\">        msg = <span class=\"string\">'success'</span></span><br><span class=\"line\">        pool = Pool(<span class=\"number\">4</span>)</span><br><span class=\"line\">        infoList = [&#123;<span class=\"string\">'a'</span>: <span class=\"string\">'a1'</span>, <span class=\"string\">'b'</span>: <span class=\"string\">'b1'</span>&#125;, &#123;<span class=\"string\">'a'</span>: <span class=\"string\">'a2'</span>, <span class=\"string\">'b'</span>: <span class=\"string\">'b2'</span>&#125;]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> info <span class=\"keyword\">in</span> infoList:</span><br><span class=\"line\">            basicinfo = pool.apply_async(getA, args=(info, ), callback=getB)\t\t<span class=\"comment\"># 将getB看为回调函数</span></span><br><span class=\"line\">        pool.close()</span><br><span class=\"line\">        pool.join()</span><br><span class=\"line\">        print(msg)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err:</span><br><span class=\"line\">        print(err)</span><br></pre></td></tr></table></figure>\n\n<p><strong>执行结果：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">主进程pid： <span class=\"number\">20006</span></span><br><span class=\"line\">getA pid <span class=\"number\">20007</span></span><br><span class=\"line\">getA pid <span class=\"number\">20008</span></span><br><span class=\"line\">&#123;<span class=\"string\">'test'</span>: <span class=\"string\">'test1_test2'</span>&#125;</span><br><span class=\"line\">getB pid <span class=\"number\">20006</span></span><br><span class=\"line\">&#123;<span class=\"string\">'test'</span>: <span class=\"string\">'test1_test2'</span>&#125;</span><br><span class=\"line\">getB pid <span class=\"number\">20006</span></span><br><span class=\"line\">success</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 可以看到所有的getB函数都由主进程来完成</span></span><br></pre></td></tr></table></figure>\n\n\n\n","tags":["multiprocessing","python"]},{"title":"ClickHouse的多种连接方式","url":"/2020/03/07/clickhouse/ClickHouse%E7%9A%84%E5%A4%9A%E7%A7%8D%E8%BF%9E%E6%8E%A5%E6%96%B9%E5%BC%8F/","content":"<h2 id=\"一、ClickHouse多种连接方式\"><a href=\"#一、ClickHouse多种连接方式\" class=\"headerlink\" title=\"一、ClickHouse多种连接方式\"></a>一、ClickHouse多种连接方式</h2><p>ClickHouse官方以及一些第三方提供了<a href=\"https://clickhouse.tech/docs/zh/interfaces/\" target=\"_blank\" rel=\"noopener\">多种方式连接到服务端</a></p>\n<ul>\n<li>命令行接口：clickhouse-client</li>\n<li>HTTP接口</li>\n<li>MySQL客户端接口</li>\n<li>C++客户端</li>\n<li>JDBC驱动</li>\n<li>ODBC驱动</li>\n<li>第三方提供<ul>\n<li>各种客户端库：Python/Go/Perl/Ruby/……</li>\n<li>可视界面：Tabix/DataGrip/……</li>\n<li>集成产品：puppet/Prometheus/Zabbix/……</li>\n</ul>\n</li>\n</ul>\n<p>官方提供了许多方式连接到服务端，这里目前只测试了需要使用到的HTTP接口、MySQL客户端接口以及可视界面这几种方法，后续其他有需要再进行更新</p>\n<h2 id=\"二、HTTP接口连接ClickHouse\"><a href=\"#二、HTTP接口连接ClickHouse\" class=\"headerlink\" title=\"二、HTTP接口连接ClickHouse\"></a>二、HTTP接口连接ClickHouse</h2><p>2.1、修改配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 默认官方rpm包、docker等安装后提供的http端口为8123，可根据需要修改配置文件，默认配置文件路径为<span class=\"string\">'/etc/clickhouse-server/config.xml'</span></span></span><br><span class=\"line\">vim /etc/clickhouse-server/config.xml</span><br><span class=\"line\">    &lt;http_port&gt;8123&lt;/http_port&gt;             ## 可将端口修改为需要的端口，重启clickhouse服务即可</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 利用rpm包等进行安装的重启服务即可</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 若利用docker安装需要在外部可以直接访问需要重新docker run并使用-p参数将容器端口映射到本地端口</span></span><br><span class=\"line\">docker run -d --name clickhouse-test-server --ulimit nofile=262144:262144 -p 8123:8123 --volume=/work/clickhouse/clickhouse_test_db:/var/lib/clickhouse yandex/clickhouse-server</span><br></pre></td></tr></table></figure>\n\n<p>2.2、通过http接口访问</p>\n<p>2.2.1、端口检查</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl 'http://localhost:8123/'</span><br></pre></td></tr></table></figure>\n\n<p>2.2.2、接口使用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> select 示例</span></span><br><span class=\"line\">echo '1' | curl 'http://localhost:8123/?query=SELECT' --data-binary @-</span><br><span class=\"line\"></span><br><span class=\"line\">curl 'http://localhost:8123/?query=SELECT%201'</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 利用format指定输出格式</span></span></span><br><span class=\"line\">echo 'SELECT 1 FORMAT Pretty' | curl 'http://localhost:8123/?' --data-binary @-</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建数据必须通过post接口实现</span></span><br><span class=\"line\">echo 'INSERT INTO t VALUES (1),(2),(3)' | POST 'http://localhost:8123/'</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2020/03/07/clickhouse/ClickHouse%E7%9A%84%E5%A4%9A%E7%A7%8D%E8%BF%9E%E6%8E%A5%E6%96%B9%E5%BC%8F/1.png\" style=\"zoom:33%;\">\n\n<h2 id=\"三、MySQL客户端连接ClickHouse\"><a href=\"#三、MySQL客户端连接ClickHouse\" class=\"headerlink\" title=\"三、MySQL客户端连接ClickHouse\"></a>三、MySQL客户端连接ClickHouse</h2><p>​        目前MySQL数据库使用率比较高，通过以下方法可以直接从MySQL客户端直接连接到ClickHouse</p>\n<p>3.1、修改配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在配置文件中新增mysql端口</span></span><br><span class=\"line\">vim /etc/clickhouse-server/config.xml</span><br><span class=\"line\">    &lt;mysql_port&gt;9004&lt;/mysql_port&gt;            ## 开启mysql接口，但此时仅可以本地访问</span><br><span class=\"line\">    ## 若需要其他ip访问，添加下面配置，并写入允许访问地址</span><br><span class=\"line\">    &lt;listen_host&gt;::&lt;/listen_host&gt;            ## 开启对应的可访问地址</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 配置完成后重启服务即可</span></span><br></pre></td></tr></table></figure>\n\n<p>3.2、MySQL连接ClickHouse</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql --protocol tcp -u default -P 9004 -h[服务器ip]</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2020/03/07/clickhouse/ClickHouse%E7%9A%84%E5%A4%9A%E7%A7%8D%E8%BF%9E%E6%8E%A5%E6%96%B9%E5%BC%8F/2.png\" style=\"zoom:25%;\">\n\n<h2 id=\"四、可视界面连接ClickHouse\"><a href=\"#四、可视界面连接ClickHouse\" class=\"headerlink\" title=\"四、可视界面连接ClickHouse\"></a>四、可视界面连接ClickHouse</h2><p>​        很多软件官方都提供了clickhouse的连接方法，仅对web页面tabix以及DataGrip连接做了测试，配置好的页面如下：</p>\n<p>其余方法可参考官方提供的入口：<a href=\"https://clickhouse.tech/docs/zh/interfaces/third-party/gui/\" target=\"_blank\" rel=\"noopener\">https://clickhouse.tech/docs/zh/interfaces/third-party/gui/</a></p>\n<p>4.1、tabix连接</p>\n<p>​    <strong>使用tabix连接必须打开ClickHouse的HTTP连接接口</strong></p>\n<p>​    <a href=\"http://ui.tabix.io/#!/login\" target=\"_blank\" rel=\"noopener\">tabix访问页面</a></p>\n<p>​    输入对应配置即可看到对应数据库界面：</p>\n<img src=\"/2020/03/07/clickhouse/ClickHouse%E7%9A%84%E5%A4%9A%E7%A7%8D%E8%BF%9E%E6%8E%A5%E6%96%B9%E5%BC%8F/3.png\" style=\"zoom:25%;\">\n\n<img src=\"/2020/03/07/clickhouse/ClickHouse%E7%9A%84%E5%A4%9A%E7%A7%8D%E8%BF%9E%E6%8E%A5%E6%96%B9%E5%BC%8F/4.png\" style=\"zoom:25%;\">\n\n<p>4.2、DataGrip连接测试</p>\n<p>​        和tabix连接类似，新增数据库类型为ClickHouse并输入配置参数连接即可，最终效果图如下：</p>\n<img src=\"/2020/03/07/clickhouse/ClickHouse%E7%9A%84%E5%A4%9A%E7%A7%8D%E8%BF%9E%E6%8E%A5%E6%96%B9%E5%BC%8F/5.png\" style=\"zoom:33%;\">","categories":["clickhouse"],"tags":["clickhouse"]},{"title":"利用docker安装启动ClickHouse","url":"/2020/03/07/clickhouse/%E5%88%A9%E7%94%A8docker%E5%AE%89%E8%A3%85%E5%90%AF%E5%8A%A8ClickHouse/","content":"<h2 id=\"一、clickhouse简介\"><a href=\"#一、clickhouse简介\" class=\"headerlink\" title=\"一、clickhouse简介\"></a>一、clickhouse简介</h2><p>​        ClickHouse是一个面向列存储的数据库管理系统，可以使用SQL查询实时生成分析数据报告，主要用于OLAP(在线分析处理查询)场景。关于clickhouse原理以及基础知识在以后学习中慢慢总结。(^_^)</p>\n<h2 id=\"二、安装启动\"><a href=\"#二、安装启动\" class=\"headerlink\" title=\"二、安装启动\"></a>二、安装启动</h2><p>这里主要描述如何使用docker安装并启动clickhouse，其他安装方法均参考了官方文档: <a href=\"https://clickhouse.tech/docs/zh/getting_started/install/\" target=\"_blank\" rel=\"noopener\">https://clickhouse.tech/docs/zh/getting_started/install/</a></p>\n<h3 id=\"1、Debian-Ubuntu-RPM安装ClickHouse\"><a href=\"#1、Debian-Ubuntu-RPM安装ClickHouse\" class=\"headerlink\" title=\"1、Debian/Ubuntu/RPM安装ClickHouse\"></a>1、Debian/Ubuntu/RPM安装ClickHouse</h3><p>对于以上方法安装，官方均提供了安装包，直接通过<code>apt-get install</code>或<code>rpm -ivh</code>安装即可，安装包路径如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Debian/Ubuntu</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 安装包位置：https://repo.yandex.ru/clickhouse/deb/stable/main/</span></span></span><br><span class=\"line\">deb http://repo.yandex.ru/clickhouse/deb/stable/ main/</span><br><span class=\"line\">sudo apt-get install dirmngr    # optional</span><br><span class=\"line\">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv E0C56BD4    # optional</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install clickhouse-client clickhouse-server</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> rpm安装</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 安装包位置：https://repo.yandex.ru/clickhouse/rpm/stable/x86_64</span></span></span><br><span class=\"line\">sudo yum install yum-utils</span><br><span class=\"line\">sudo rpm --import https://repo.yandex.ru/clickhouse/CLICKHOUSE-KEY.GPG</span><br><span class=\"line\">sudo yum-config-manager --add-repo https://repo.yandex.ru/clickhouse/rpm/stable/x86_64</span><br><span class=\"line\">sudo yum install clickhouse-server clickhouse-client</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、docker安装ClickHouse\"><a href=\"#2、docker安装ClickHouse\" class=\"headerlink\" title=\"2、docker安装ClickHouse\"></a>2、docker安装ClickHouse</h3><h4 id=\"2-1-docker安装\"><a href=\"#2-1-docker安装\" class=\"headerlink\" title=\"2.1 docker安装\"></a>2.1 docker安装</h4><p>Centos安装docker参考于docker官方文档：<a href=\"https://docs.docker.com/install/linux/docker-ce/centos/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/install/linux/docker-ce/centos/</a></p>\n<p>2.1.1、卸载老版本docker</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine</span><br></pre></td></tr></table></figure>\n\n<p>2.1.2、安装依赖包并设置官方镜像源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class=\"line\">yum-config-manager --add-repo https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</span><br></pre></td></tr></table></figure>\n\n<p>2.1.3、安装最新版docker</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>\n\n<p>2.1.4、启动docker</p>\n<p>目前docker最新版本为19.03版本，安装该版本启动时(安装17.03版本并没有报错)有可能产生以下报错：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> systemctl start docker</span></span><br><span class=\"line\">A dependency job for docker.service failed. See 'journalctl -xe' for details.</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 报错具体如下图：出现该报错的原因是，由于主机之前对/etc/group等文件进行过`chattr +i`加锁操作，导致docker安装时执行groupadd docker报错</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 解决方法，对相关文件解锁之后，执行groupadd docker即可</span></span></span><br><span class=\"line\">此时执行systemctl start docker即可成功启动</span><br><span class=\"line\"></span><br><span class=\"line\">启动完成后可利用官方提供的hello-world进行测试</span><br><span class=\"line\">docker run hello-world</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2020/03/07/clickhouse/%E5%88%A9%E7%94%A8docker%E5%AE%89%E8%A3%85%E5%90%AF%E5%8A%A8ClickHouse/1.jpg\" style=\"zoom:50%;\">\n\n<h4 id=\"2-2-安装ClickHouse\"><a href=\"#2-2-安装ClickHouse\" class=\"headerlink\" title=\"2.2 安装ClickHouse\"></a>2.2 安装ClickHouse</h4><p>​        docker环境搭建好之后，利用docker安装clickhouse比较简单，clickhouse官方提供了默认的镜像，直接使用即可。官方文档参考：<a href=\"https://hub.docker.com/r/yandex/clickhouse-server/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/r/yandex/clickhouse-server/</a></p>\n<p>​        目前正在研究如何根据源码包修改docker文件，安装之后得到想要的配置，预计下周出个文章详解^_^</p>\n<p>2.2.1、拉取clickhouse的docker镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull yandex/clickhouse-server</span><br><span class=\"line\">docker pull yandex/clickhouse-clinet</span><br></pre></td></tr></table></figure>\n\n<p>2.2.2、启动server端</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 默认直接启动即可</span></span><br><span class=\"line\">docker run -d --name [启动之后的名称] --ulimit nofile=262144:262144 yandex/clickhouse-server</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如果想指定目录启动，这里以clickhouse-test-server命令为例，可以随意写</span></span><br><span class=\"line\">mkdir /work/clickhouse/clickhouse-test-db       ## 创建数据文件目录</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 使用以下路径启动，在外只能访问clickhouse提供的默认9000端口，只能通过clickhouse-client连接server</span></span><br><span class=\"line\">docker run -d --name clickhouse-test-server --ulimit nofile=262144:262144 --volume=/work/clickhouse/clickhouse_test_db:/var/lib/clickhouse yandex/clickhouse-server</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-启动并连接clickhouse-server\"><a href=\"#2-3-启动并连接clickhouse-server\" class=\"headerlink\" title=\"2.3 启动并连接clickhouse-server\"></a>2.3 启动并连接clickhouse-server</h4><p>2.3.1、docker启动clickhouse-client</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it --rm --link clickhouse-test-server:clickhouse-server yandex/clickhouse-client --host clickhouse-server</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2020/03/07/clickhouse/%E5%88%A9%E7%94%A8docker%E5%AE%89%E8%A3%85%E5%90%AF%E5%8A%A8ClickHouse/2.png\" style=\"zoom:50%;\">\n\n<p>2.3.2、使用clickhouse-client连接</p>\n<img src=\"/2020/03/07/clickhouse/%E5%88%A9%E7%94%A8docker%E5%AE%89%E8%A3%85%E5%90%AF%E5%8A%A8ClickHouse/3.png\" style=\"zoom:50%;\">\n\n<h3 id=\"3、客户端常用参数\"><a href=\"#3、客户端常用参数\" class=\"headerlink\" title=\"3、客户端常用参数\"></a>3、客户端常用参数</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">clickhouse-client</span><br><span class=\"line\">    --host, -h     \t：服务端host名称，默认 localhost</span><br><span class=\"line\">    --port         \t：连接端口，默认9000</span><br><span class=\"line\">    --user, -u     \t：用户名，默认 default</span><br><span class=\"line\">    --password     \t：密码，默认空</span><br><span class=\"line\">    --query, -q    \t：非交互模式下的查询语句</span><br><span class=\"line\">    --database, -d \t：默认当前操作的数据库，默认default</span><br><span class=\"line\">    --multiline, -m ：允许多行语句查询，在clickhouse中默认回车即为sql结束，可使用该参数多行输入</span><br><span class=\"line\">    --format, -f\t\t：使用指定的默认格式输出结果      csv,以逗号分隔</span><br><span class=\"line\">    --time, -t\t\t\t：非交互模式下会打印查询执行的时间</span><br><span class=\"line\">    --stacktrace\t\t：出现异常会打印堆栈跟踪信息</span><br><span class=\"line\">    --config-file\t\t：配置文件名称</span><br></pre></td></tr></table></figure>\n\n","categories":["clickhouse"],"tags":["clickhouse","docker"]},{"title":"利用github+hexo搭建个人博客","url":"/2020/02/26/other/%E5%88%A9%E7%94%A8github-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","content":"<h1 id=\"利用github-hexo搭建个人博客\"><a href=\"#利用github-hexo搭建个人博客\" class=\"headerlink\" title=\"利用github+hexo搭建个人博客\"></a>利用github+hexo搭建个人博客</h1><p>参考网页：</p>\n<p><a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">https://pages.github.com/</a></p>\n<p><a href=\"https://www.jianshu.com/p/3db6a61d3782\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/3db6a61d3782</a></p>\n<p>搭建之前电脑所需安装软件：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"code\"><pre><span class=\"line\">- github账号</span><br><span class=\"line\">- nodejs 安装包链接: https://nodejs.org/zh-cn/download/</span><br><span class=\"line\">\tmac利用brew install <span class=\"keyword\">node</span><span class=\"title\">@12</span>安装后，需通过brew <span class=\"literal\">inf</span>o <span class=\"keyword\">node</span><span class=\"title\">@12</span>得到写入环境变量的命令执行并重新导入环境变量使其生效</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-在本机创建github-io页面\"><a href=\"#1-在本机创建github-io页面\" class=\"headerlink\" title=\"1. 在本机创建github.io页面\"></a>1. 在本机创建github.io页面</h4><p>1.1、在自己的github账号上创建repository</p>\n<img src=\"/2020/02/26/other/%E5%88%A9%E7%94%A8github-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/createblog_github1.png\" style=\"zoom:25%;\">\n\n<p>1.2、 设置github page，设置如下图所示</p>\n<img src=\"/2020/02/26/other/%E5%88%A9%E7%94%A8github-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/createblog_github2.png\" style=\"zoom:25%;\">\n\n<h4 id=\"2-安装hexo\"><a href=\"#2-安装hexo\" class=\"headerlink\" title=\"2. 安装hexo\"></a>2. 安装hexo</h4><figure class=\"highlight avrasm\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-<span class=\"keyword\">cli</span> --registry=https://registry.npm.taobao<span class=\"meta\">.org</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-初始化页面\"><a href=\"#3-初始化页面\" class=\"headerlink\" title=\"3. 初始化页面\"></a>3. 初始化页面</h4><figure class=\"highlight jboss-cli\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在想要放置页面的目录下，初始化github上新建的repository：schnappi.github.io</span></span><br><span class=\"line\">hexo init schnappi.github.io</span><br><span class=\"line\"><span class=\"comment\"># 安装hexo index/archive/tag等插件</span></span><br><span class=\"line\">npm install -g hexo-deployer-git <span class=\"params\">--registry=https</span>:<span class=\"string\">//registry.npm.taobao.org</span></span><br><span class=\"line\">npm install <span class=\"params\">--save</span> hexo-generator-index  <span class=\"params\">--registry=https</span>:<span class=\"string\">//registry.npm.taobao.org</span></span><br><span class=\"line\">npm install <span class=\"params\">--save</span> hexo-generator-archive  <span class=\"params\">--registry=https</span>:<span class=\"string\">//registry.npm.taobao.org</span></span><br><span class=\"line\">npm install <span class=\"params\">--save</span> hexo-generator-tag  <span class=\"params\">--registry=https</span>:<span class=\"string\">//registry.npm.taobao.org</span></span><br><span class=\"line\"><span class=\"comment\"># 安裝 hexo-deployer-git</span></span><br><span class=\"line\">npm install hexo-deployer-git <span class=\"params\">--save</span> <span class=\"params\">--registry=https</span>:<span class=\"string\">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-修改配置文件\"><a href=\"#4-修改配置文件\" class=\"headerlink\" title=\"4. 修改配置文件\"></a>4. 修改配置文件</h4><figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 配置文件title等根据需要修改</span></span><br><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\"><span class=\"attr\">title</span>: <span class=\"string\">Hexo</span></span><br><span class=\"line\"><span class=\"attr\">subtitle</span>: <span class=\"string\">''</span></span><br><span class=\"line\"><span class=\"attr\">description</span>: <span class=\"string\">''</span></span><br><span class=\"line\"><span class=\"attr\">keywords</span>:<span class=\"string\"></span></span><br><span class=\"line\"><span class=\"attr\">author</span>: <span class=\"string\">schnappi</span></span><br><span class=\"line\"><span class=\"attr\">language</span>: <span class=\"string\">zh</span></span><br><span class=\"line\"><span class=\"attr\">timezone</span>: <span class=\"string\">'Asia/Shanghai'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># url必须指向github.io的地址</span></span><br><span class=\"line\"><span class=\"attr\">url</span>: <span class=\"string\">https://schnappi.github.io</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 与github共通刷新必须执行以下内容，其中repo为用户的schnappi.github.io上的github地址，可直接在github页面复制</span></span><br><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\"><span class=\"attr\">deploy</span>:<span class=\"string\"></span></span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">'git'</span></span><br><span class=\"line\">  <span class=\"attr\">repo</span>: <span class=\"string\">https://github.com/Schnappi618/schnappi618.github.io.git</span></span><br><span class=\"line\">  <span class=\"attr\">branch</span>: <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-测试\"><a href=\"#5-测试\" class=\"headerlink\" title=\"5. 测试\"></a>5. 测试</h4><figure class=\"highlight vala\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># 在github目录下执行以下命令</span></span><br><span class=\"line\"><span class=\"meta\">## 生成页面</span></span><br><span class=\"line\">hexo gen</span><br><span class=\"line\"><span class=\"meta\">## 本地测试</span></span><br><span class=\"line\">hexo server</span><br><span class=\"line\"></span><br><span class=\"line\">执行完后，访问本地http:<span class=\"comment\">//localhost:4000即可查看默认样式</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/2020/02/26/other/%E5%88%A9%E7%94%A8github-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/createblog_github3.png\" style=\"zoom:25%;\">\n\n\n\n<h4 id=\"6-部署\"><a href=\"#6-部署\" class=\"headerlink\" title=\"6. 部署\"></a>6. 部署</h4><figure class=\"highlight 1c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># 执行以下命令进行推送</span></span><br><span class=\"line\">hexo clean <span class=\"meta\">&amp;&amp; hexo deploy</span></span><br></pre></td></tr></table></figure>\n\n<p>执行完成后，即可通过github page地址 <a href=\"https://schnappi.github.io/\" target=\"_blank\" rel=\"noopener\">https://schnappi.github.io</a> 进行访问</p>\n<p><em>之后需要将修改部署上去，执行以下命令即可</em></p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">hexo</span> <span class=\"string\">gen</span></span><br><span class=\"line\"><span class=\"attr\">hexo</span> <span class=\"string\">clean &amp;&amp; hexo deploy</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"7-其他配置\"><a href=\"#7-其他配置\" class=\"headerlink\" title=\"7. 其他配置\"></a>7. 其他配置</h4><p>1、修改默认主题</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"code\"><pre><span class=\"line\">上图中显示的是hexo中默认的主题，若需要修改主题可以进入 https://hexo.io/themes 选择喜欢的主题</span><br><span class=\"line\"></span><br><span class=\"line\">cd schnappi.github.io/themes</span><br><span class=\"line\">git <span class=\"keyword\">clone</span> <span class=\"title\">https</span>://xxxx.git       <span class=\"comment\"># 将其主题clone下来即可</span></span><br></pre></td></tr></table></figure>\n\n<p>2、文章图片显示</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># 下载hexo支持的插入图片插件</span></span><br><span class=\"line\">npm install https:<span class=\"comment\">//github.com/7ym0n/hexo-asset-image --sa</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># 修改配置文件_config.yml</span></span><br><span class=\"line\">post_asset_folder: <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># 在之后通过hexo new post [name]创建新文件时，在source/_post目录下会生成一个和name同名的目录，将需要的图片放入其中</span></span><br><span class=\"line\">文章中引用直接通过相对路径 name/xxx.png即可</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n","categories":["hexo"],"tags":["hexo"]},{"title":"Hello World","url":"/2020/02/22/other/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"}]